
FinalProjectBACKUP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002890  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000120  00800060  00002890  00002924  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000087  00800180  00800180  00002a44  2**0
                  ALLOC
  3 .stab         00003ec4  00000000  00000000  00002a44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025d2  00000000  00000000  00006908  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 3e 13 	jmp	0x267c	; 0x267c <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 30       	cpi	r26, 0x07	; 7
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4b 12 	call	0x2496	; 0x2496 <main>
      8a:	0c 94 46 14 	jmp	0x288c	; 0x288c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_vidInit>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_vidInit+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	80 91 80 01 	lds	r24, 0x0180
      a0:	88 23       	and	r24, r24
      a2:	f1 f4       	brne	.+60     	; 0xe0 <UART_vidInit+0x4e>
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 93 80 01 	sts	0x0180, r24
      aa:	87 e6       	ldi	r24, 0x67	; 103
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	9a 83       	std	Y+2, r25	; 0x02
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	eb e2       	ldi	r30, 0x2B	; 43
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	10 82       	st	Z, r1
      b8:	ea e2       	ldi	r30, 0x2A	; 42
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	88 e1       	ldi	r24, 0x18	; 24
      be:	80 83       	st	Z, r24
      c0:	e0 e4       	ldi	r30, 0x40	; 64
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	86 e8       	ldi	r24, 0x86	; 134
      c6:	80 83       	st	Z, r24
      c8:	e9 e2       	ldi	r30, 0x29	; 41
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	80 83       	st	Z, r24
      d0:	e0 e4       	ldi	r30, 0x40	; 64
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	9a 81       	ldd	r25, Y+2	; 0x02
      d8:	89 2f       	mov	r24, r25
      da:	99 27       	eor	r25, r25
      dc:	8f 70       	andi	r24, 0x0F	; 15
      de:	80 83       	st	Z, r24
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <UART_vidSendChar>:
		UBRRL_R	=( u16Baud 	&0xff);
		UBRRH_R	=((u16Baud	>> 8 )& UBRRH_M);
	}
}
void UART_vidSendChar(uint8 u8Data)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	0f 92       	push	r0
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA_R&(1<<UCSRA_UDRE)));
      f6:	eb e2       	ldi	r30, 0x2B	; 43
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	88 2f       	mov	r24, r24
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	80 72       	andi	r24, 0x20	; 32
     102:	90 70       	andi	r25, 0x00	; 0
     104:	00 97       	sbiw	r24, 0x00	; 0
     106:	b9 f3       	breq	.-18     	; 0xf6 <UART_vidSendChar+0xc>
	UDR_R = u8Data;
     108:	ec e2       	ldi	r30, 0x2C	; 44
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	80 83       	st	Z, r24
}
     110:	0f 90       	pop	r0
     112:	cf 91       	pop	r28
     114:	df 91       	pop	r29
     116:	08 95       	ret

00000118 <UART_u8RecieveChar>:

uint8 UART_u8RecieveChar(void)
{
     118:	df 93       	push	r29
     11a:	cf 93       	push	r28
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA_R&(1<<UCSRA_RXC)));
     120:	eb e2       	ldi	r30, 0x2B	; 43
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	88 23       	and	r24, r24
     128:	dc f7       	brge	.-10     	; 0x120 <UART_u8RecieveChar+0x8>
	return UDR_R ;
     12a:	ec e2       	ldi	r30, 0x2C	; 44
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
}
     130:	cf 91       	pop	r28
     132:	df 91       	pop	r29
     134:	08 95       	ret

00000136 <UART_u8DataReady>:
uint8 UART_u8DataReady()
{
     136:	df 93       	push	r29
     138:	cf 93       	push	r28
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
	return (UCSRA_R&(1<<UCSRA_RXC));
     13e:	eb e2       	ldi	r30, 0x2B	; 43
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	80 78       	andi	r24, 0x80	; 128
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <UART_u8GetUdr>:
uint8 UART_u8GetUdr()
{
     14c:	df 93       	push	r29
     14e:	cf 93       	push	r28
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	return UDR_R ;
     154:	ec e2       	ldi	r30, 0x2C	; 44
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
}
     15a:	cf 91       	pop	r28
     15c:	df 91       	pop	r29
     15e:	08 95       	ret

00000160 <UART_vidSendString>:
void UART_vidSendString(uint8 u8Data[], uint8 length)
{
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	00 d0       	rcall	.+0      	; 0x166 <UART_vidSendString+0x6>
     166:	00 d0       	rcall	.+0      	; 0x168 <UART_vidSendString+0x8>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	9b 83       	std	Y+3, r25	; 0x03
     16e:	8a 83       	std	Y+2, r24	; 0x02
     170:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i=0;i< length;i++)
     172:	19 82       	std	Y+1, r1	; 0x01
     174:	0e c0       	rjmp	.+28     	; 0x192 <UART_vidSendString+0x32>
	{
		UART_vidSendChar(u8Data[i]);
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	28 2f       	mov	r18, r24
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	fc 01       	movw	r30, r24
     182:	e2 0f       	add	r30, r18
     184:	f3 1f       	adc	r31, r19
     186:	80 81       	ld	r24, Z
     188:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
{
	return UDR_R ;
}
void UART_vidSendString(uint8 u8Data[], uint8 length)
{
	for (uint8 i=0;i< length;i++)
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	8f 5f       	subi	r24, 0xFF	; 255
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	99 81       	ldd	r25, Y+1	; 0x01
     194:	8c 81       	ldd	r24, Y+4	; 0x04
     196:	98 17       	cp	r25, r24
     198:	70 f3       	brcs	.-36     	; 0x176 <UART_vidSendString+0x16>
	{
		UART_vidSendChar(u8Data[i]);
	}
}
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <UART_vidSendStringConfirmed>:
uint8 UART_vidSendStringConfirmed(uint8 * u8Data)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <UART_vidSendStringConfirmed+0x6>
     1ae:	0f 92       	push	r0
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	9b 83       	std	Y+3, r25	; 0x03
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 f =1;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <UART_vidSendStringConfirmed+0x40>
	while(f&&*u8Data)
	{
		UART_vidSendChar(*(u8Data));
     1be:	ea 81       	ldd	r30, Y+2	; 0x02
     1c0:	fb 81       	ldd	r31, Y+3	; 0x03
     1c2:	80 81       	ld	r24, Z
     1c4:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
		f = (UART_u8RecieveChar()==*(u8Data++));
     1c8:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
     1cc:	98 2f       	mov	r25, r24
     1ce:	ea 81       	ldd	r30, Y+2	; 0x02
     1d0:	fb 81       	ldd	r31, Y+3	; 0x03
     1d2:	80 81       	ld	r24, Z
     1d4:	19 82       	std	Y+1, r1	; 0x01
     1d6:	98 17       	cp	r25, r24
     1d8:	11 f4       	brne	.+4      	; 0x1de <UART_vidSendStringConfirmed+0x36>
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	89 83       	std	Y+1, r24	; 0x01
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	9b 81       	ldd	r25, Y+3	; 0x03
     1e2:	01 96       	adiw	r24, 0x01	; 1
     1e4:	9b 83       	std	Y+3, r25	; 0x03
     1e6:	8a 83       	std	Y+2, r24	; 0x02
	}
}
uint8 UART_vidSendStringConfirmed(uint8 * u8Data)
{
	uint8 f =1;
	while(f&&*u8Data)
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	88 23       	and	r24, r24
     1ec:	29 f0       	breq	.+10     	; 0x1f8 <UART_vidSendStringConfirmed+0x50>
     1ee:	ea 81       	ldd	r30, Y+2	; 0x02
     1f0:	fb 81       	ldd	r31, Y+3	; 0x03
     1f2:	80 81       	ld	r24, Z
     1f4:	88 23       	and	r24, r24
     1f6:	19 f7       	brne	.-58     	; 0x1be <UART_vidSendStringConfirmed+0x16>
	{
		UART_vidSendChar(*(u8Data));
		f = (UART_u8RecieveChar()==*(u8Data++));
	}
	return f;
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
}
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <UART_vidRecieveString>:

void UART_vidRecieveString(uint8 u8Data[], uint8* length)
{
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	00 d0       	rcall	.+0      	; 0x212 <UART_vidRecieveString+0xc>
     212:	00 d0       	rcall	.+0      	; 0x214 <UART_vidRecieveString+0xe>
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	9a 83       	std	Y+2, r25	; 0x02
     21a:	89 83       	std	Y+1, r24	; 0x01
     21c:	7c 83       	std	Y+4, r23	; 0x04
     21e:	6b 83       	std	Y+3, r22	; 0x03
	*length=0;
     220:	eb 81       	ldd	r30, Y+3	; 0x03
     222:	fc 81       	ldd	r31, Y+4	; 0x04
     224:	10 82       	st	Z, r1
	do
	{
		u8Data[(*length)++]=UART_u8RecieveChar();
     226:	eb 81       	ldd	r30, Y+3	; 0x03
     228:	fc 81       	ldd	r31, Y+4	; 0x04
     22a:	f0 80       	ld	r15, Z
     22c:	2f 2d       	mov	r18, r15
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	9a 81       	ldd	r25, Y+2	; 0x02
     234:	8c 01       	movw	r16, r24
     236:	02 0f       	add	r16, r18
     238:	13 1f       	adc	r17, r19
     23a:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
     23e:	f8 01       	movw	r30, r16
     240:	80 83       	st	Z, r24
     242:	8f 2d       	mov	r24, r15
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	eb 81       	ldd	r30, Y+3	; 0x03
     248:	fc 81       	ldd	r31, Y+4	; 0x04
     24a:	80 83       	st	Z, r24
	}
	while(u8Data[(*length)-1]&&u8Data[(*length)-1]!='\r');
     24c:	eb 81       	ldd	r30, Y+3	; 0x03
     24e:	fc 81       	ldd	r31, Y+4	; 0x04
     250:	80 81       	ld	r24, Z
     252:	88 2f       	mov	r24, r24
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	9c 01       	movw	r18, r24
     258:	21 50       	subi	r18, 0x01	; 1
     25a:	30 40       	sbci	r19, 0x00	; 0
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	fc 01       	movw	r30, r24
     262:	e2 0f       	add	r30, r18
     264:	f3 1f       	adc	r31, r19
     266:	80 81       	ld	r24, Z
     268:	88 23       	and	r24, r24
     26a:	81 f0       	breq	.+32     	; 0x28c <UART_vidRecieveString+0x86>
     26c:	eb 81       	ldd	r30, Y+3	; 0x03
     26e:	fc 81       	ldd	r31, Y+4	; 0x04
     270:	80 81       	ld	r24, Z
     272:	88 2f       	mov	r24, r24
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	9c 01       	movw	r18, r24
     278:	21 50       	subi	r18, 0x01	; 1
     27a:	30 40       	sbci	r19, 0x00	; 0
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	fc 01       	movw	r30, r24
     282:	e2 0f       	add	r30, r18
     284:	f3 1f       	adc	r31, r19
     286:	80 81       	ld	r24, Z
     288:	8d 30       	cpi	r24, 0x0D	; 13
     28a:	69 f6       	brne	.-102    	; 0x226 <UART_vidRecieveString+0x20>
	u8Data[(*length)]=0;
     28c:	eb 81       	ldd	r30, Y+3	; 0x03
     28e:	fc 81       	ldd	r31, Y+4	; 0x04
     290:	80 81       	ld	r24, Z
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	e2 0f       	add	r30, r18
     29e:	f3 1f       	adc	r31, r19
     2a0:	10 82       	st	Z, r1
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	08 95       	ret

000002b6 <_Debug>:


#ifdef DEBUGGING
void _Debug(int8 u8Data[])
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <_Debug+0x6>
     2bc:	0f 92       	push	r0
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9b 83       	std	Y+3, r25	; 0x03
     2c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     2c6:	19 82       	std	Y+1, r1	; 0x01
	if(!UART_INIT)
     2c8:	80 91 80 01 	lds	r24, 0x0180
     2cc:	88 23       	and	r24, r24
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <_Debug+0x1e>
	{
		UART_vidInit();
     2d0:	0e 94 49 00 	call	0x92	; 0x92 <UART_vidInit>
	}
	do
	{
		UART_vidSendChar(u8Data[i]);
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	28 2f       	mov	r18, r24
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	9b 81       	ldd	r25, Y+3	; 0x03
     2de:	fc 01       	movw	r30, r24
     2e0:	e2 0f       	add	r30, r18
     2e2:	f3 1f       	adc	r31, r19
     2e4:	80 81       	ld	r24, Z
     2e6:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
	}
	while (u8Data[++i]);
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	28 2f       	mov	r18, r24
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	9b 81       	ldd	r25, Y+3	; 0x03
     2fa:	fc 01       	movw	r30, r24
     2fc:	e2 0f       	add	r30, r18
     2fe:	f3 1f       	adc	r31, r19
     300:	80 81       	ld	r24, Z
     302:	88 23       	and	r24, r24
     304:	39 f7       	brne	.-50     	; 0x2d4 <_Debug+0x1e>
	UART_vidSendChar('\r');
     306:	8d e0       	ldi	r24, 0x0D	; 13
     308:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
}
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	08 95       	ret

00000318 <_Debug_value>:

void _Debug_value(uint32 u32Data)
{
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	df 93       	push	r29
     31e:	cf 93       	push	r28
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	64 97       	sbiw	r28, 0x14	; 20
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	69 8b       	std	Y+17, r22	; 0x11
     332:	7a 8b       	std	Y+18, r23	; 0x12
     334:	8b 8b       	std	Y+19, r24	; 0x13
     336:	9c 8b       	std	Y+20, r25	; 0x14
	int8 arr[11]={0};
     338:	8b e0       	ldi	r24, 0x0B	; 11
     33a:	fe 01       	movw	r30, r28
     33c:	36 96       	adiw	r30, 0x06	; 6
     33e:	df 01       	movw	r26, r30
     340:	98 2f       	mov	r25, r24
     342:	1d 92       	st	X+, r1
     344:	9a 95       	dec	r25
     346:	e9 f7       	brne	.-6      	; 0x342 <_Debug_value+0x2a>
	uint8 i=0;
     348:	1d 82       	std	Y+5, r1	; 0x05
	uint32 x=1000000;
     34a:	80 e4       	ldi	r24, 0x40	; 64
     34c:	92 e4       	ldi	r25, 0x42	; 66
     34e:	af e0       	ldi	r26, 0x0F	; 15
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	89 83       	std	Y+1, r24	; 0x01
     354:	9a 83       	std	Y+2, r25	; 0x02
     356:	ab 83       	std	Y+3, r26	; 0x03
     358:	bc 83       	std	Y+4, r27	; 0x04
     35a:	12 c0       	rjmp	.+36     	; 0x380 <_Debug_value+0x68>
	while (!(u32Data/x))
	{
		x/=10;
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	ab 81       	ldd	r26, Y+3	; 0x03
     362:	bc 81       	ldd	r27, Y+4	; 0x04
     364:	2a e0       	ldi	r18, 0x0A	; 10
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	bc 01       	movw	r22, r24
     36e:	cd 01       	movw	r24, r26
     370:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
     374:	da 01       	movw	r26, r20
     376:	c9 01       	movw	r24, r18
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	ab 83       	std	Y+3, r26	; 0x03
     37e:	bc 83       	std	Y+4, r27	; 0x04
void _Debug_value(uint32 u32Data)
{
	int8 arr[11]={0};
	uint8 i=0;
	uint32 x=1000000;
	while (!(u32Data/x))
     380:	89 89       	ldd	r24, Y+17	; 0x11
     382:	9a 89       	ldd	r25, Y+18	; 0x12
     384:	ab 89       	ldd	r26, Y+19	; 0x13
     386:	bc 89       	ldd	r27, Y+20	; 0x14
     388:	29 81       	ldd	r18, Y+1	; 0x01
     38a:	3a 81       	ldd	r19, Y+2	; 0x02
     38c:	4b 81       	ldd	r20, Y+3	; 0x03
     38e:	5c 81       	ldd	r21, Y+4	; 0x04
     390:	bc 01       	movw	r22, r24
     392:	cd 01       	movw	r24, r26
     394:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
     398:	da 01       	movw	r26, r20
     39a:	c9 01       	movw	r24, r18
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	a1 05       	cpc	r26, r1
     3a0:	b1 05       	cpc	r27, r1
     3a2:	e1 f2       	breq	.-72     	; 0x35c <_Debug_value+0x44>
	{
		x/=10;
	}
	if (x)
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	ab 81       	ldd	r26, Y+3	; 0x03
     3aa:	bc 81       	ldd	r27, Y+4	; 0x04
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	a1 05       	cpc	r26, r1
     3b0:	b1 05       	cpc	r27, r1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <_Debug_value+0x9e>
     3b4:	4b c0       	rjmp	.+150    	; 0x44c <_Debug_value+0x134>
     3b6:	40 c0       	rjmp	.+128    	; 0x438 <_Debug_value+0x120>
	{
		while (x)
		{
			arr[i++]=(u32Data/x)+'0';
     3b8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ba:	08 2f       	mov	r16, r24
     3bc:	10 e0       	ldi	r17, 0x00	; 0
     3be:	89 89       	ldd	r24, Y+17	; 0x11
     3c0:	9a 89       	ldd	r25, Y+18	; 0x12
     3c2:	ab 89       	ldd	r26, Y+19	; 0x13
     3c4:	bc 89       	ldd	r27, Y+20	; 0x14
     3c6:	29 81       	ldd	r18, Y+1	; 0x01
     3c8:	3a 81       	ldd	r19, Y+2	; 0x02
     3ca:	4b 81       	ldd	r20, Y+3	; 0x03
     3cc:	5c 81       	ldd	r21, Y+4	; 0x04
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
     3d6:	da 01       	movw	r26, r20
     3d8:	c9 01       	movw	r24, r18
     3da:	28 2f       	mov	r18, r24
     3dc:	20 5d       	subi	r18, 0xD0	; 208
     3de:	ce 01       	movw	r24, r28
     3e0:	06 96       	adiw	r24, 0x06	; 6
     3e2:	fc 01       	movw	r30, r24
     3e4:	e0 0f       	add	r30, r16
     3e6:	f1 1f       	adc	r31, r17
     3e8:	20 83       	st	Z, r18
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	8d 83       	std	Y+5, r24	; 0x05
			u32Data -=(u32Data/x)*x;
     3f0:	89 89       	ldd	r24, Y+17	; 0x11
     3f2:	9a 89       	ldd	r25, Y+18	; 0x12
     3f4:	ab 89       	ldd	r26, Y+19	; 0x13
     3f6:	bc 89       	ldd	r27, Y+20	; 0x14
     3f8:	29 81       	ldd	r18, Y+1	; 0x01
     3fa:	3a 81       	ldd	r19, Y+2	; 0x02
     3fc:	4b 81       	ldd	r20, Y+3	; 0x03
     3fe:	5c 81       	ldd	r21, Y+4	; 0x04
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
     408:	dc 01       	movw	r26, r24
     40a:	cb 01       	movw	r24, r22
     40c:	89 8b       	std	Y+17, r24	; 0x11
     40e:	9a 8b       	std	Y+18, r25	; 0x12
     410:	ab 8b       	std	Y+19, r26	; 0x13
     412:	bc 8b       	std	Y+20, r27	; 0x14
			x/=10;
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	ab 81       	ldd	r26, Y+3	; 0x03
     41a:	bc 81       	ldd	r27, Y+4	; 0x04
     41c:	2a e0       	ldi	r18, 0x0A	; 10
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
     42c:	da 01       	movw	r26, r20
     42e:	c9 01       	movw	r24, r18
     430:	89 83       	std	Y+1, r24	; 0x01
     432:	9a 83       	std	Y+2, r25	; 0x02
     434:	ab 83       	std	Y+3, r26	; 0x03
     436:	bc 83       	std	Y+4, r27	; 0x04
	{
		x/=10;
	}
	if (x)
	{
		while (x)
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	ab 81       	ldd	r26, Y+3	; 0x03
     43e:	bc 81       	ldd	r27, Y+4	; 0x04
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	a1 05       	cpc	r26, r1
     444:	b1 05       	cpc	r27, r1
     446:	09 f0       	breq	.+2      	; 0x44a <_Debug_value+0x132>
     448:	b7 cf       	rjmp	.-146    	; 0x3b8 <_Debug_value+0xa0>
     44a:	0d c0       	rjmp	.+26     	; 0x466 <_Debug_value+0x14e>
			x/=10;
		}
	}
	else
	{
		arr[i++]='0';
     44c:	8d 81       	ldd	r24, Y+5	; 0x05
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	ce 01       	movw	r24, r28
     454:	06 96       	adiw	r24, 0x06	; 6
     456:	fc 01       	movw	r30, r24
     458:	e2 0f       	add	r30, r18
     45a:	f3 1f       	adc	r31, r19
     45c:	80 e3       	ldi	r24, 0x30	; 48
     45e:	80 83       	st	Z, r24
     460:	8d 81       	ldd	r24, Y+5	; 0x05
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	8d 83       	std	Y+5, r24	; 0x05
	}
	_Debug(arr);
     466:	ce 01       	movw	r24, r28
     468:	06 96       	adiw	r24, 0x06	; 6
     46a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Debug>

}
     46e:	64 96       	adiw	r28, 0x14	; 20
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <updatetime>:


static uint32 time=0;
static uint32 d=0;
uint32 updatetime()
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
	return time++;
     48c:	80 91 81 01 	lds	r24, 0x0181
     490:	90 91 82 01 	lds	r25, 0x0182
     494:	a0 91 83 01 	lds	r26, 0x0183
     498:	b0 91 84 01 	lds	r27, 0x0184
     49c:	9c 01       	movw	r18, r24
     49e:	ad 01       	movw	r20, r26
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	a1 1d       	adc	r26, r1
     4a4:	b1 1d       	adc	r27, r1
     4a6:	80 93 81 01 	sts	0x0181, r24
     4aa:	90 93 82 01 	sts	0x0182, r25
     4ae:	a0 93 83 01 	sts	0x0183, r26
     4b2:	b0 93 84 01 	sts	0x0184, r27
     4b6:	da 01       	movw	r26, r20
     4b8:	c9 01       	movw	r24, r18
}
     4ba:	bc 01       	movw	r22, r24
     4bc:	cd 01       	movw	r24, r26
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <millis>:
uint32 millis()
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	return (time /(TIMER0_TICK_PER_SECOND/1000	));
     4cc:	80 91 81 01 	lds	r24, 0x0181
     4d0:	90 91 82 01 	lds	r25, 0x0182
     4d4:	a0 91 83 01 	lds	r26, 0x0183
     4d8:	b0 91 84 01 	lds	r27, 0x0184
     4dc:	25 e0       	ldi	r18, 0x05	; 5
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e0       	ldi	r20, 0x00	; 0
     4e2:	50 e0       	ldi	r21, 0x00	; 0
     4e4:	bc 01       	movw	r22, r24
     4e6:	cd 01       	movw	r24, r26
     4e8:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
     4ec:	da 01       	movw	r26, r20
     4ee:	c9 01       	movw	r24, r18
}
     4f0:	bc 01       	movw	r22, r24
     4f2:	cd 01       	movw	r24, r26
     4f4:	cf 91       	pop	r28
     4f6:	df 91       	pop	r29
     4f8:	08 95       	ret

000004fa <_wait>:
void _wait(uint32 mils)
{
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	00 d0       	rcall	.+0      	; 0x500 <_wait+0x6>
     500:	00 d0       	rcall	.+0      	; 0x502 <_wait+0x8>
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	69 83       	std	Y+1, r22	; 0x01
     508:	7a 83       	std	Y+2, r23	; 0x02
     50a:	8b 83       	std	Y+3, r24	; 0x03
     50c:	9c 83       	std	Y+4, r25	; 0x04
	d= (millis()+1);
     50e:	0e 94 62 02 	call	0x4c4	; 0x4c4 <millis>
     512:	dc 01       	movw	r26, r24
     514:	cb 01       	movw	r24, r22
     516:	01 96       	adiw	r24, 0x01	; 1
     518:	a1 1d       	adc	r26, r1
     51a:	b1 1d       	adc	r27, r1
     51c:	80 93 85 01 	sts	0x0185, r24
     520:	90 93 86 01 	sts	0x0186, r25
     524:	a0 93 87 01 	sts	0x0187, r26
     528:	b0 93 88 01 	sts	0x0188, r27
	while(millis()<2000);
     52c:	0e 94 62 02 	call	0x4c4	; 0x4c4 <millis>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	80 3d       	cpi	r24, 0xD0	; 208
     536:	27 e0       	ldi	r18, 0x07	; 7
     538:	92 07       	cpc	r25, r18
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	a2 07       	cpc	r26, r18
     53e:	20 e0       	ldi	r18, 0x00	; 0
     540:	b2 07       	cpc	r27, r18
     542:	a0 f3       	brcs	.-24     	; 0x52c <_wait+0x32>
}
     544:	0f 90       	pop	r0
     546:	0f 90       	pop	r0
     548:	0f 90       	pop	r0
     54a:	0f 90       	pop	r0
     54c:	cf 91       	pop	r28
     54e:	df 91       	pop	r29
     550:	08 95       	ret

00000552 <TIMER_vidInit>:
void TIMER_vidInit()
{
     552:	df 93       	push	r29
     554:	cf 93       	push	r28
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	TCCR0_R =(0								<<TCCR0_FOC0	)
     55a:	e3 e5       	ldi	r30, 0x53	; 83
     55c:	f0 e0       	ldi	r31, 0x00	; 0
     55e:	8b e0       	ldi	r24, 0x0B	; 11
     560:	80 83       	st	Z, r24
			|(Get_Bit(TIMER0_MODE,0)		<<TCCR0_WGM00	)
			|(Get_Bit(TIMER0_MODE,1)		<<TCCR0_WGM01	)
			|((TIMER0_OC0_MODE				<<TCCR0_COM_S	)&TCCR0_COM_M	)
			|((TIMER0_CLOCK					<<TCCR0_CS_S	)&TCCR0_CS_M	);

	TIMSK_R =(TIMER0_OVERFLOW_INT			<<TIMSK_TOIE0	)
     562:	e9 e5       	ldi	r30, 0x59	; 89
     564:	f0 e0       	ldi	r31, 0x00	; 0
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	80 83       	st	Z, r24
			|(TIMER0_OCR_INT				<<TIMSK_OCIE0	);

	OCR0_R	= TIMER0_OCR0;
     56a:	ec e5       	ldi	r30, 0x5C	; 92
     56c:	f0 e0       	ldi	r31, 0x00	; 0
     56e:	81 e3       	ldi	r24, 0x31	; 49
     570:	80 83       	st	Z, r24
}
     572:	cf 91       	pop	r28
     574:	df 91       	pop	r29
     576:	08 95       	ret

00000578 <_delay_ms>:

void _delay_ms(uint16 U16Time)
{
     578:	df 93       	push	r29
     57a:	cf 93       	push	r28
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	28 97       	sbiw	r28, 0x08	; 8
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	98 87       	std	Y+8, r25	; 0x08
     58e:	8f 83       	std	Y+7, r24	; 0x07
	uint16 U16i;
	uint8 TCT,OCT,TCNT,SS;
	SS = SREG;
     590:	ef e5       	ldi	r30, 0x5F	; 95
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	80 81       	ld	r24, Z
     596:	89 83       	std	Y+1, r24	; 0x01
	Disable_Global_Interrupt();
     598:	af e5       	ldi	r26, 0x5F	; 95
     59a:	b0 e0       	ldi	r27, 0x00	; 0
     59c:	ef e5       	ldi	r30, 0x5F	; 95
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	80 81       	ld	r24, Z
     5a2:	8f 77       	andi	r24, 0x7F	; 127
     5a4:	8c 93       	st	X, r24
	TCT = TCCR0_R;
     5a6:	e3 e5       	ldi	r30, 0x53	; 83
     5a8:	f0 e0       	ldi	r31, 0x00	; 0
     5aa:	80 81       	ld	r24, Z
     5ac:	8c 83       	std	Y+4, r24	; 0x04
	OCT = OCR0_R;
     5ae:	ec e5       	ldi	r30, 0x5C	; 92
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	8b 83       	std	Y+3, r24	; 0x03
	TCNT=TCNT0_R;
     5b6:	e2 e5       	ldi	r30, 0x52	; 82
     5b8:	f0 e0       	ldi	r31, 0x00	; 0
     5ba:	80 81       	ld	r24, Z
     5bc:	8a 83       	std	Y+2, r24	; 0x02
	TCCR0_R = (TIMER0_CLOCK_PRESCALAR_256|Get_Bit(TIMER0_MODE_CTC,0)<<TCCR0_WGM00|Get_Bit(TIMER0_MODE_CTC,1)<<TCCR0_WGM01);
     5be:	e3 e5       	ldi	r30, 0x53	; 83
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	8c e0       	ldi	r24, 0x0C	; 12
     5c4:	80 83       	st	Z, r24
	OCR0_R  = 200;
     5c6:	ec e5       	ldi	r30, 0x5C	; 92
     5c8:	f0 e0       	ldi	r31, 0x00	; 0
     5ca:	88 ec       	ldi	r24, 0xC8	; 200
     5cc:	80 83       	st	Z, r24
	for (U16i=0;U16i<U16Time;U16i++)
     5ce:	1e 82       	std	Y+6, r1	; 0x06
     5d0:	1d 82       	std	Y+5, r1	; 0x05
     5d2:	16 c0       	rjmp	.+44     	; 0x600 <_delay_ms+0x88>
	{
		while(!Get_Bit(TIFR_R,1));
     5d4:	e8 e5       	ldi	r30, 0x58	; 88
     5d6:	f0 e0       	ldi	r31, 0x00	; 0
     5d8:	80 81       	ld	r24, Z
     5da:	86 95       	lsr	r24
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	81 70       	andi	r24, 0x01	; 1
     5e2:	90 70       	andi	r25, 0x00	; 0
     5e4:	00 97       	sbiw	r24, 0x00	; 0
     5e6:	b1 f3       	breq	.-20     	; 0x5d4 <_delay_ms+0x5c>
		Set_Bit(TIFR_R,1);
     5e8:	a8 e5       	ldi	r26, 0x58	; 88
     5ea:	b0 e0       	ldi	r27, 0x00	; 0
     5ec:	e8 e5       	ldi	r30, 0x58	; 88
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	82 60       	ori	r24, 0x02	; 2
     5f4:	8c 93       	st	X, r24
	TCT = TCCR0_R;
	OCT = OCR0_R;
	TCNT=TCNT0_R;
	TCCR0_R = (TIMER0_CLOCK_PRESCALAR_256|Get_Bit(TIMER0_MODE_CTC,0)<<TCCR0_WGM00|Get_Bit(TIMER0_MODE_CTC,1)<<TCCR0_WGM01);
	OCR0_R  = 200;
	for (U16i=0;U16i<U16Time;U16i++)
     5f6:	8d 81       	ldd	r24, Y+5	; 0x05
     5f8:	9e 81       	ldd	r25, Y+6	; 0x06
     5fa:	01 96       	adiw	r24, 0x01	; 1
     5fc:	9e 83       	std	Y+6, r25	; 0x06
     5fe:	8d 83       	std	Y+5, r24	; 0x05
     600:	2d 81       	ldd	r18, Y+5	; 0x05
     602:	3e 81       	ldd	r19, Y+6	; 0x06
     604:	8f 81       	ldd	r24, Y+7	; 0x07
     606:	98 85       	ldd	r25, Y+8	; 0x08
     608:	28 17       	cp	r18, r24
     60a:	39 07       	cpc	r19, r25
     60c:	18 f3       	brcs	.-58     	; 0x5d4 <_delay_ms+0x5c>
	{
		while(!Get_Bit(TIFR_R,1));
		Set_Bit(TIFR_R,1);
	}
	TCNT0_R=TCNT;
     60e:	e2 e5       	ldi	r30, 0x52	; 82
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	8a 81       	ldd	r24, Y+2	; 0x02
     614:	80 83       	st	Z, r24
	TCCR0_R = TCT;
     616:	e3 e5       	ldi	r30, 0x53	; 83
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	8c 81       	ldd	r24, Y+4	; 0x04
     61c:	80 83       	st	Z, r24
	OCR0_R = OCT;
     61e:	ec e5       	ldi	r30, 0x5C	; 92
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	80 83       	st	Z, r24
	SREG=SS;
     626:	ef e5       	ldi	r30, 0x5F	; 95
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	80 83       	st	Z, r24
}
     62e:	28 96       	adiw	r28, 0x08	; 8
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	f8 94       	cli
     634:	de bf       	out	0x3e, r29	; 62
     636:	0f be       	out	0x3f, r0	; 63
     638:	cd bf       	out	0x3d, r28	; 61
     63a:	cf 91       	pop	r28
     63c:	df 91       	pop	r29
     63e:	08 95       	ret

00000640 <TEMP_SENSOR_vidInit>:
 */

#include "TEMP_SENSOR_LOCAL.h"

void TEMP_SENSOR_vidInit()
{
     640:	df 93       	push	r29
     642:	cf 93       	push	r28
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
	ADC_vidInit();
     648:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <ADC_vidInit>
	DIO_vidInit();
     64c:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <DIO_vidInit>
	DIO_u8SetPinDir(Temp_Sensor_pin,INPUT);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
}
     658:	cf 91       	pop	r28
     65a:	df 91       	pop	r29
     65c:	08 95       	ret

0000065e <TEMP_SENSOR_u16GetData>:

uint16 TEMP_SENSOR_u16GetData(int8 TEMP_ARR[])
{
     65e:	df 93       	push	r29
     660:	cf 93       	push	r28
     662:	00 d0       	rcall	.+0      	; 0x664 <TEMP_SENSOR_u16GetData+0x6>
     664:	00 d0       	rcall	.+0      	; 0x666 <TEMP_SENSOR_u16GetData+0x8>
     666:	00 d0       	rcall	.+0      	; 0x668 <TEMP_SENSOR_u16GetData+0xa>
     668:	cd b7       	in	r28, 0x3d	; 61
     66a:	de b7       	in	r29, 0x3e	; 62
     66c:	9e 83       	std	Y+6, r25	; 0x06
     66e:	8d 83       	std	Y+5, r24	; 0x05
	uint16 temp=(((uint32)ADC_u16Read(Temp_Sensor_pin)*500)/1023);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <ADC_u16Read>
     676:	cc 01       	movw	r24, r24
     678:	a0 e0       	ldi	r26, 0x00	; 0
     67a:	b0 e0       	ldi	r27, 0x00	; 0
     67c:	24 ef       	ldi	r18, 0xF4	; 244
     67e:	31 e0       	ldi	r19, 0x01	; 1
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__mulsi3>
     68c:	dc 01       	movw	r26, r24
     68e:	cb 01       	movw	r24, r22
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	33 e0       	ldi	r19, 0x03	; 3
     694:	40 e0       	ldi	r20, 0x00	; 0
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	bc 01       	movw	r22, r24
     69a:	cd 01       	movw	r24, r26
     69c:	0e 94 24 14 	call	0x2848	; 0x2848 <__udivmodsi4>
     6a0:	da 01       	movw	r26, r20
     6a2:	c9 01       	movw	r24, r18
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 t=temp;
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	9a 83       	std	Y+2, r25	; 0x02
     6ae:	89 83       	std	Y+1, r24	; 0x01

	TEMP_ARR[2]=(t%10)+'0';t/=10;
     6b0:	8d 81       	ldd	r24, Y+5	; 0x05
     6b2:	9e 81       	ldd	r25, Y+6	; 0x06
     6b4:	fc 01       	movw	r30, r24
     6b6:	32 96       	adiw	r30, 0x02	; 2
     6b8:	89 81       	ldd	r24, Y+1	; 0x01
     6ba:	9a 81       	ldd	r25, Y+2	; 0x02
     6bc:	2a e0       	ldi	r18, 0x0A	; 10
     6be:	30 e0       	ldi	r19, 0x00	; 0
     6c0:	b9 01       	movw	r22, r18
     6c2:	0e 94 10 14 	call	0x2820	; 0x2820 <__udivmodhi4>
     6c6:	80 5d       	subi	r24, 0xD0	; 208
     6c8:	80 83       	st	Z, r24
     6ca:	89 81       	ldd	r24, Y+1	; 0x01
     6cc:	9a 81       	ldd	r25, Y+2	; 0x02
     6ce:	2a e0       	ldi	r18, 0x0A	; 10
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	b9 01       	movw	r22, r18
     6d4:	0e 94 10 14 	call	0x2820	; 0x2820 <__udivmodhi4>
     6d8:	cb 01       	movw	r24, r22
     6da:	9a 83       	std	Y+2, r25	; 0x02
     6dc:	89 83       	std	Y+1, r24	; 0x01
	TEMP_ARR[1]=(t%10)+'0';t/=10;
     6de:	8d 81       	ldd	r24, Y+5	; 0x05
     6e0:	9e 81       	ldd	r25, Y+6	; 0x06
     6e2:	fc 01       	movw	r30, r24
     6e4:	31 96       	adiw	r30, 0x01	; 1
     6e6:	89 81       	ldd	r24, Y+1	; 0x01
     6e8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ea:	2a e0       	ldi	r18, 0x0A	; 10
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	b9 01       	movw	r22, r18
     6f0:	0e 94 10 14 	call	0x2820	; 0x2820 <__udivmodhi4>
     6f4:	80 5d       	subi	r24, 0xD0	; 208
     6f6:	80 83       	st	Z, r24
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	2a e0       	ldi	r18, 0x0A	; 10
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	b9 01       	movw	r22, r18
     702:	0e 94 10 14 	call	0x2820	; 0x2820 <__udivmodhi4>
     706:	cb 01       	movw	r24, r22
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	89 83       	std	Y+1, r24	; 0x01
	TEMP_ARR[0]=(t%10)+'0';
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	2a e0       	ldi	r18, 0x0A	; 10
     712:	30 e0       	ldi	r19, 0x00	; 0
     714:	b9 01       	movw	r22, r18
     716:	0e 94 10 14 	call	0x2820	; 0x2820 <__udivmodhi4>
     71a:	80 5d       	subi	r24, 0xD0	; 208
     71c:	ed 81       	ldd	r30, Y+5	; 0x05
     71e:	fe 81       	ldd	r31, Y+6	; 0x06
     720:	80 83       	st	Z, r24

	return temp;
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	9c 81       	ldd	r25, Y+4	; 0x04
}
     726:	26 96       	adiw	r28, 0x06	; 6
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	cf 91       	pop	r28
     734:	df 91       	pop	r29
     736:	08 95       	ret

00000738 <SW_vidFlag>:
static	uint8 PBN[PBN_COUNT] = {PBN_0,PBN_1,PBN_2};
static	uint8 PBN_state[PBN_COUNT] = {SWITCH_STATE_Error};

static uint8 * u8Ptr[PBN_COUNT];
void SW_vidFlag (uint8 PBN_no,uint8 * u8PTRtoFlag)
{
     738:	df 93       	push	r29
     73a:	cf 93       	push	r28
     73c:	00 d0       	rcall	.+0      	; 0x73e <SW_vidFlag+0x6>
     73e:	0f 92       	push	r0
     740:	cd b7       	in	r28, 0x3d	; 61
     742:	de b7       	in	r29, 0x3e	; 62
     744:	89 83       	std	Y+1, r24	; 0x01
     746:	7b 83       	std	Y+3, r23	; 0x03
     748:	6a 83       	std	Y+2, r22	; 0x02
	u8Ptr[PBN_no]=u8PTRtoFlag;
     74a:	89 81       	ldd	r24, Y+1	; 0x01
     74c:	88 2f       	mov	r24, r24
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	fc 01       	movw	r30, r24
     756:	e3 57       	subi	r30, 0x73	; 115
     758:	fe 4f       	sbci	r31, 0xFE	; 254
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	9b 81       	ldd	r25, Y+3	; 0x03
     75e:	91 83       	std	Z+1, r25	; 0x01
     760:	80 83       	st	Z, r24
}
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	cf 91       	pop	r28
     76a:	df 91       	pop	r29
     76c:	08 95       	ret

0000076e <SW_vidInit>:
void SW_vidInit(void)
{
     76e:	df 93       	push	r29
     770:	cf 93       	push	r28
     772:	0f 92       	push	r0
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
	uint8 u8i;

	for (u8i=0 ;u8i<PBN_COUNT;u8i++)
     778:	19 82       	std	Y+1, r1	; 0x01
     77a:	0d c0       	rjmp	.+26     	; 0x796 <SW_vidInit+0x28>
	{
		DIO_u8SetPinDir(PBN[u8i],INPUT_PULLUP);
     77c:	89 81       	ldd	r24, Y+1	; 0x01
     77e:	88 2f       	mov	r24, r24
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	fc 01       	movw	r30, r24
     784:	e8 50       	subi	r30, 0x08	; 8
     786:	ff 4f       	sbci	r31, 0xFF	; 255
     788:	80 81       	ld	r24, Z
     78a:	62 e0       	ldi	r22, 0x02	; 2
     78c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
}
void SW_vidInit(void)
{
	uint8 u8i;

	for (u8i=0 ;u8i<PBN_COUNT;u8i++)
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	8f 5f       	subi	r24, 0xFF	; 255
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	83 30       	cpi	r24, 0x03	; 3
     79a:	80 f3       	brcs	.-32     	; 0x77c <SW_vidInit+0xe>
	{
		DIO_u8SetPinDir(PBN[u8i],INPUT_PULLUP);
	}


}
     79c:	0f 90       	pop	r0
     79e:	cf 91       	pop	r28
     7a0:	df 91       	pop	r29
     7a2:	08 95       	ret

000007a4 <SW_vidTask>:


void SW_vidTask(void)
{
     7a4:	df 93       	push	r29
     7a6:	cf 93       	push	r28
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <SW_vidTask+0x6>
     7aa:	cd b7       	in	r28, 0x3d	; 61
     7ac:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter[PBN_COUNT] = {0},u8i=0;

	if (u8i < PBN_COUNT)
     7ae:	80 91 89 01 	lds	r24, 0x0189
     7b2:	83 30       	cpi	r24, 0x03	; 3
     7b4:	08 f0       	brcs	.+2      	; 0x7b8 <SW_vidTask+0x14>
     7b6:	dc c0       	rjmp	.+440    	; 0x970 <__stack+0x111>
	{
		switch (PBN_state[u8i])
     7b8:	80 91 89 01 	lds	r24, 0x0189
     7bc:	88 2f       	mov	r24, r24
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	fc 01       	movw	r30, r24
     7c2:	e5 50       	subi	r30, 0x05	; 5
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	80 81       	ld	r24, Z
     7c8:	28 2f       	mov	r18, r24
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	3a 83       	std	Y+2, r19	; 0x02
     7ce:	29 83       	std	Y+1, r18	; 0x01
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	9a 81       	ldd	r25, Y+2	; 0x02
     7d4:	81 30       	cpi	r24, 0x01	; 1
     7d6:	91 05       	cpc	r25, r1
     7d8:	09 f4       	brne	.+2      	; 0x7dc <SW_vidTask+0x38>
     7da:	71 c0       	rjmp	.+226    	; 0x8be <__stack+0x5f>
     7dc:	29 81       	ldd	r18, Y+1	; 0x01
     7de:	3a 81       	ldd	r19, Y+2	; 0x02
     7e0:	22 30       	cpi	r18, 0x02	; 2
     7e2:	31 05       	cpc	r19, r1
     7e4:	2c f4       	brge	.+10     	; 0x7f0 <SW_vidTask+0x4c>
     7e6:	89 81       	ldd	r24, Y+1	; 0x01
     7e8:	9a 81       	ldd	r25, Y+2	; 0x02
     7ea:	00 97       	sbiw	r24, 0x00	; 0
     7ec:	69 f0       	breq	.+26     	; 0x808 <SW_vidTask+0x64>
     7ee:	b2 c0       	rjmp	.+356    	; 0x954 <__stack+0xf5>
     7f0:	29 81       	ldd	r18, Y+1	; 0x01
     7f2:	3a 81       	ldd	r19, Y+2	; 0x02
     7f4:	22 30       	cpi	r18, 0x02	; 2
     7f6:	31 05       	cpc	r19, r1
     7f8:	09 f4       	brne	.+2      	; 0x7fc <SW_vidTask+0x58>
     7fa:	78 c0       	rjmp	.+240    	; 0x8ec <__stack+0x8d>
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	9a 81       	ldd	r25, Y+2	; 0x02
     800:	83 30       	cpi	r24, 0x03	; 3
     802:	91 05       	cpc	r25, r1
     804:	c1 f0       	breq	.+48     	; 0x836 <SW_vidTask+0x92>
     806:	a6 c0       	rjmp	.+332    	; 0x954 <__stack+0xf5>
		{
		case Released 	:
			if (DIO_u8ReadPin(PBN[u8i])==LOW)
     808:	80 91 89 01 	lds	r24, 0x0189
     80c:	88 2f       	mov	r24, r24
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	fc 01       	movw	r30, r24
     812:	e8 50       	subi	r30, 0x08	; 8
     814:	ff 4f       	sbci	r31, 0xFF	; 255
     816:	80 81       	ld	r24, Z
     818:	0e 94 cb 10 	call	0x2196	; 0x2196 <DIO_u8ReadPin>
     81c:	88 23       	and	r24, r24
     81e:	09 f0       	breq	.+2      	; 0x822 <SW_vidTask+0x7e>
     820:	a1 c0       	rjmp	.+322    	; 0x964 <__stack+0x105>
				PBN_state[u8i] = PrePushed;
     822:	80 91 89 01 	lds	r24, 0x0189
     826:	88 2f       	mov	r24, r24
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	fc 01       	movw	r30, r24
     82c:	e5 50       	subi	r30, 0x05	; 5
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	83 e0       	ldi	r24, 0x03	; 3
     832:	80 83       	st	Z, r24
     834:	97 c0       	rjmp	.+302    	; 0x964 <__stack+0x105>
			break;
		case PrePushed	:
			if (DIO_u8ReadPin(PBN[u8i])==LOW)
     836:	80 91 89 01 	lds	r24, 0x0189
     83a:	88 2f       	mov	r24, r24
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	fc 01       	movw	r30, r24
     840:	e8 50       	subi	r30, 0x08	; 8
     842:	ff 4f       	sbci	r31, 0xFF	; 255
     844:	80 81       	ld	r24, Z
     846:	0e 94 cb 10 	call	0x2196	; 0x2196 <DIO_u8ReadPin>
     84a:	88 23       	and	r24, r24
     84c:	69 f4       	brne	.+26     	; 0x868 <__stack+0x9>
				counter[u8i]++;
     84e:	80 91 89 01 	lds	r24, 0x0189
     852:	28 2f       	mov	r18, r24
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	f9 01       	movw	r30, r18
     858:	e6 57       	subi	r30, 0x76	; 118
     85a:	fe 4f       	sbci	r31, 0xFE	; 254
     85c:	80 81       	ld	r24, Z
     85e:	8f 5f       	subi	r24, 0xFF	; 255
     860:	f9 01       	movw	r30, r18
     862:	e6 57       	subi	r30, 0x76	; 118
     864:	fe 4f       	sbci	r31, 0xFE	; 254
     866:	80 83       	st	Z, r24
			if (counter[u8i]>=SENS_COUNT)
     868:	80 91 89 01 	lds	r24, 0x0189
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	e6 57       	subi	r30, 0x76	; 118
     874:	fe 4f       	sbci	r31, 0xFE	; 254
     876:	80 81       	ld	r24, Z
     878:	83 30       	cpi	r24, 0x03	; 3
     87a:	08 f4       	brcc	.+2      	; 0x87e <__stack+0x1f>
     87c:	73 c0       	rjmp	.+230    	; 0x964 <__stack+0x105>
			{
				counter[u8i]=0;
     87e:	80 91 89 01 	lds	r24, 0x0189
     882:	88 2f       	mov	r24, r24
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	fc 01       	movw	r30, r24
     888:	e6 57       	subi	r30, 0x76	; 118
     88a:	fe 4f       	sbci	r31, 0xFE	; 254
     88c:	10 82       	st	Z, r1
				PBN_state[u8i] = Pushed;
     88e:	80 91 89 01 	lds	r24, 0x0189
     892:	88 2f       	mov	r24, r24
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	fc 01       	movw	r30, r24
     898:	e5 50       	subi	r30, 0x05	; 5
     89a:	ff 4f       	sbci	r31, 0xFF	; 255
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	80 83       	st	Z, r24
				*u8Ptr[u8i]=1;
     8a0:	80 91 89 01 	lds	r24, 0x0189
     8a4:	88 2f       	mov	r24, r24
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	fc 01       	movw	r30, r24
     8ae:	e3 57       	subi	r30, 0x73	; 115
     8b0:	fe 4f       	sbci	r31, 0xFE	; 254
     8b2:	01 90       	ld	r0, Z+
     8b4:	f0 81       	ld	r31, Z
     8b6:	e0 2d       	mov	r30, r0
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 83       	st	Z, r24
     8bc:	53 c0       	rjmp	.+166    	; 0x964 <__stack+0x105>
			}
			break;
		case Pushed		:
			if (DIO_u8ReadPin(PBN[u8i])==HIGH)
     8be:	80 91 89 01 	lds	r24, 0x0189
     8c2:	88 2f       	mov	r24, r24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	fc 01       	movw	r30, r24
     8c8:	e8 50       	subi	r30, 0x08	; 8
     8ca:	ff 4f       	sbci	r31, 0xFF	; 255
     8cc:	80 81       	ld	r24, Z
     8ce:	0e 94 cb 10 	call	0x2196	; 0x2196 <DIO_u8ReadPin>
     8d2:	81 30       	cpi	r24, 0x01	; 1
     8d4:	09 f0       	breq	.+2      	; 0x8d8 <__stack+0x79>
     8d6:	46 c0       	rjmp	.+140    	; 0x964 <__stack+0x105>
				PBN_state[u8i] = PreReleased;
     8d8:	80 91 89 01 	lds	r24, 0x0189
     8dc:	88 2f       	mov	r24, r24
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	fc 01       	movw	r30, r24
     8e2:	e5 50       	subi	r30, 0x05	; 5
     8e4:	ff 4f       	sbci	r31, 0xFF	; 255
     8e6:	82 e0       	ldi	r24, 0x02	; 2
     8e8:	80 83       	st	Z, r24
     8ea:	3c c0       	rjmp	.+120    	; 0x964 <__stack+0x105>
			break;
		case PreReleased:
			if (DIO_u8ReadPin(PBN[u8i])==HIGH)
     8ec:	80 91 89 01 	lds	r24, 0x0189
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	fc 01       	movw	r30, r24
     8f6:	e8 50       	subi	r30, 0x08	; 8
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	80 81       	ld	r24, Z
     8fc:	0e 94 cb 10 	call	0x2196	; 0x2196 <DIO_u8ReadPin>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	69 f4       	brne	.+26     	; 0x91e <__stack+0xbf>
				counter[u8i]++;
     904:	80 91 89 01 	lds	r24, 0x0189
     908:	28 2f       	mov	r18, r24
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	f9 01       	movw	r30, r18
     90e:	e6 57       	subi	r30, 0x76	; 118
     910:	fe 4f       	sbci	r31, 0xFE	; 254
     912:	80 81       	ld	r24, Z
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	f9 01       	movw	r30, r18
     918:	e6 57       	subi	r30, 0x76	; 118
     91a:	fe 4f       	sbci	r31, 0xFE	; 254
     91c:	80 83       	st	Z, r24
			if (counter[u8i]>=SENS_COUNT)
     91e:	80 91 89 01 	lds	r24, 0x0189
     922:	88 2f       	mov	r24, r24
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	fc 01       	movw	r30, r24
     928:	e6 57       	subi	r30, 0x76	; 118
     92a:	fe 4f       	sbci	r31, 0xFE	; 254
     92c:	80 81       	ld	r24, Z
     92e:	83 30       	cpi	r24, 0x03	; 3
     930:	c8 f0       	brcs	.+50     	; 0x964 <__stack+0x105>
			{
				counter[u8i]=0;
     932:	80 91 89 01 	lds	r24, 0x0189
     936:	88 2f       	mov	r24, r24
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	fc 01       	movw	r30, r24
     93c:	e6 57       	subi	r30, 0x76	; 118
     93e:	fe 4f       	sbci	r31, 0xFE	; 254
     940:	10 82       	st	Z, r1
				PBN_state[u8i] = Released;
     942:	80 91 89 01 	lds	r24, 0x0189
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	fc 01       	movw	r30, r24
     94c:	e5 50       	subi	r30, 0x05	; 5
     94e:	ff 4f       	sbci	r31, 0xFF	; 255
     950:	10 82       	st	Z, r1
     952:	08 c0       	rjmp	.+16     	; 0x964 <__stack+0x105>
			}
			break;
		default:
			PBN_state[u8i] = Released;
     954:	80 91 89 01 	lds	r24, 0x0189
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	fc 01       	movw	r30, r24
     95e:	e5 50       	subi	r30, 0x05	; 5
     960:	ff 4f       	sbci	r31, 0xFF	; 255
     962:	10 82       	st	Z, r1
			break;
		}
		u8i++;
     964:	80 91 89 01 	lds	r24, 0x0189
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	80 93 89 01 	sts	0x0189, r24
     96e:	02 c0       	rjmp	.+4      	; 0x974 <__stack+0x115>
	}
	else
	{
		u8i=0;
     970:	10 92 89 01 	sts	0x0189, r1
	}
}
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	08 95       	ret

0000097e <SW_u8Read>:

uint8 SW_u8Read(uint8 u8PBN)
{
     97e:	df 93       	push	r29
     980:	cf 93       	push	r28
     982:	0f 92       	push	r0
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	89 83       	std	Y+1, r24	; 0x01
	return PBN_state[u8PBN];
     98a:	89 81       	ldd	r24, Y+1	; 0x01
     98c:	88 2f       	mov	r24, r24
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	fc 01       	movw	r30, r24
     992:	e5 50       	subi	r30, 0x05	; 5
     994:	ff 4f       	sbci	r31, 0xFF	; 255
     996:	80 81       	ld	r24, Z
}
     998:	0f 90       	pop	r0
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	08 95       	ret

000009a0 <SCHEDULER_vidInit>:
 */

#include "SCHEDULER_LOCAL.h"
static Task_Holder Task[Task_Count];
void SCHEDULER_vidInit ()
{
     9a0:	df 93       	push	r29
     9a2:	cf 93       	push	r28
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62

	Task[0].status=1;Task[0].periodicity=0;Task[0].fun=LCD_vidTask;
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	80 93 96 01 	sts	0x0196, r24
     9ae:	10 92 93 01 	sts	0x0193, r1
     9b2:	86 e3       	ldi	r24, 0x36	; 54
     9b4:	98 e0       	ldi	r25, 0x08	; 8
     9b6:	90 93 95 01 	sts	0x0195, r25
     9ba:	80 93 94 01 	sts	0x0194, r24
	Task[1].status=1;Task[1].periodicity=0;Task[1].fun=GPS_vidTask;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	80 93 9a 01 	sts	0x019A, r24
     9c4:	10 92 97 01 	sts	0x0197, r1
     9c8:	84 ee       	ldi	r24, 0xE4	; 228
     9ca:	9b e0       	ldi	r25, 0x0B	; 11
     9cc:	90 93 99 01 	sts	0x0199, r25
     9d0:	80 93 98 01 	sts	0x0198, r24

	Enable_Global_Interrupt();
     9d4:	af e5       	ldi	r26, 0x5F	; 95
     9d6:	b0 e0       	ldi	r27, 0x00	; 0
     9d8:	ef e5       	ldi	r30, 0x5F	; 95
     9da:	f0 e0       	ldi	r31, 0x00	; 0
     9dc:	80 81       	ld	r24, Z
     9de:	80 68       	ori	r24, 0x80	; 128
     9e0:	8c 93       	st	X, r24

}
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	08 95       	ret

000009e8 <LCD_u8WriteCommand>:
static int8 LCD_LINE[2][17]={"                ",
							 "                "};
static uint8 u8x =0,u8y=0,u8LCDState=0;

static uint8 LCD_u8WriteCommand(uint8 u8Command)
{
     9e8:	df 93       	push	r29
     9ea:	cf 93       	push	r28
     9ec:	00 d0       	rcall	.+0      	; 0x9ee <LCD_u8WriteCommand+0x6>
     9ee:	00 d0       	rcall	.+0      	; 0x9f0 <LCD_u8WriteCommand+0x8>
     9f0:	cd b7       	in	r28, 0x3d	; 61
     9f2:	de b7       	in	r29, 0x3e	; 62
     9f4:	89 83       	std	Y+1, r24	; 0x01
	static uint8 u8LCDwritetime=0,LCD_Command_State=0;
	switch(LCD_Command_State)
     9f6:	80 91 9e 01 	lds	r24, 0x019E
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	3c 83       	std	Y+4, r19	; 0x04
     a00:	2b 83       	std	Y+3, r18	; 0x03
     a02:	8b 81       	ldd	r24, Y+3	; 0x03
     a04:	9c 81       	ldd	r25, Y+4	; 0x04
     a06:	84 30       	cpi	r24, 0x04	; 4
     a08:	91 05       	cpc	r25, r1
     a0a:	09 f4       	brne	.+2      	; 0xa0e <LCD_u8WriteCommand+0x26>
     a0c:	a4 c0       	rjmp	.+328    	; 0xb56 <LCD_u8WriteCommand+0x16e>
     a0e:	2b 81       	ldd	r18, Y+3	; 0x03
     a10:	3c 81       	ldd	r19, Y+4	; 0x04
     a12:	25 30       	cpi	r18, 0x05	; 5
     a14:	31 05       	cpc	r19, r1
     a16:	ec f4       	brge	.+58     	; 0xa52 <LCD_u8WriteCommand+0x6a>
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	9c 81       	ldd	r25, Y+4	; 0x04
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	91 05       	cpc	r25, r1
     a20:	09 f4       	brne	.+2      	; 0xa24 <LCD_u8WriteCommand+0x3c>
     a22:	6b c0       	rjmp	.+214    	; 0xafa <LCD_u8WriteCommand+0x112>
     a24:	2b 81       	ldd	r18, Y+3	; 0x03
     a26:	3c 81       	ldd	r19, Y+4	; 0x04
     a28:	22 30       	cpi	r18, 0x02	; 2
     a2a:	31 05       	cpc	r19, r1
     a2c:	2c f4       	brge	.+10     	; 0xa38 <LCD_u8WriteCommand+0x50>
     a2e:	8b 81       	ldd	r24, Y+3	; 0x03
     a30:	9c 81       	ldd	r25, Y+4	; 0x04
     a32:	00 97       	sbiw	r24, 0x00	; 0
     a34:	39 f1       	breq	.+78     	; 0xa84 <LCD_u8WriteCommand+0x9c>
     a36:	f4 c0       	rjmp	.+488    	; 0xc20 <LCD_u8WriteCommand+0x238>
     a38:	2b 81       	ldd	r18, Y+3	; 0x03
     a3a:	3c 81       	ldd	r19, Y+4	; 0x04
     a3c:	22 30       	cpi	r18, 0x02	; 2
     a3e:	31 05       	cpc	r19, r1
     a40:	09 f4       	brne	.+2      	; 0xa44 <LCD_u8WriteCommand+0x5c>
     a42:	6d c0       	rjmp	.+218    	; 0xb1e <LCD_u8WriteCommand+0x136>
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	9c 81       	ldd	r25, Y+4	; 0x04
     a48:	83 30       	cpi	r24, 0x03	; 3
     a4a:	91 05       	cpc	r25, r1
     a4c:	09 f4       	brne	.+2      	; 0xa50 <LCD_u8WriteCommand+0x68>
     a4e:	71 c0       	rjmp	.+226    	; 0xb32 <LCD_u8WriteCommand+0x14a>
     a50:	e7 c0       	rjmp	.+462    	; 0xc20 <LCD_u8WriteCommand+0x238>
     a52:	2b 81       	ldd	r18, Y+3	; 0x03
     a54:	3c 81       	ldd	r19, Y+4	; 0x04
     a56:	26 30       	cpi	r18, 0x06	; 6
     a58:	31 05       	cpc	r19, r1
     a5a:	09 f4       	brne	.+2      	; 0xa5e <LCD_u8WriteCommand+0x76>
     a5c:	b5 c0       	rjmp	.+362    	; 0xbc8 <LCD_u8WriteCommand+0x1e0>
     a5e:	8b 81       	ldd	r24, Y+3	; 0x03
     a60:	9c 81       	ldd	r25, Y+4	; 0x04
     a62:	86 30       	cpi	r24, 0x06	; 6
     a64:	91 05       	cpc	r25, r1
     a66:	0c f4       	brge	.+2      	; 0xa6a <LCD_u8WriteCommand+0x82>
     a68:	83 c0       	rjmp	.+262    	; 0xb70 <LCD_u8WriteCommand+0x188>
     a6a:	2b 81       	ldd	r18, Y+3	; 0x03
     a6c:	3c 81       	ldd	r19, Y+4	; 0x04
     a6e:	27 30       	cpi	r18, 0x07	; 7
     a70:	31 05       	cpc	r19, r1
     a72:	09 f4       	brne	.+2      	; 0xa76 <LCD_u8WriteCommand+0x8e>
     a74:	ba c0       	rjmp	.+372    	; 0xbea <LCD_u8WriteCommand+0x202>
     a76:	8b 81       	ldd	r24, Y+3	; 0x03
     a78:	9c 81       	ldd	r25, Y+4	; 0x04
     a7a:	88 30       	cpi	r24, 0x08	; 8
     a7c:	91 05       	cpc	r25, r1
     a7e:	09 f4       	brne	.+2      	; 0xa82 <LCD_u8WriteCommand+0x9a>
     a80:	be c0       	rjmp	.+380    	; 0xbfe <LCD_u8WriteCommand+0x216>
     a82:	ce c0       	rjmp	.+412    	; 0xc20 <LCD_u8WriteCommand+0x238>
	{
	case 0:
		//RS 	= 0
		DIO_u8WritePin(LCD_RS,LOW);
     a84:	89 e0       	ldi	r24, 0x09	; 9
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		//R/W 	= 0
		DIO_u8WritePin(LCD_RW,LOW);
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	60 e0       	ldi	r22, 0x00	; 0
     a90:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		//Send data

		//Write high Niple
		DIO_u8WritePin(LCD_D7,Get_Bit(u8Command,7));
     a94:	89 81       	ldd	r24, Y+1	; 0x01
     a96:	98 2f       	mov	r25, r24
     a98:	99 1f       	adc	r25, r25
     a9a:	99 27       	eor	r25, r25
     a9c:	99 1f       	adc	r25, r25
     a9e:	87 e0       	ldi	r24, 0x07	; 7
     aa0:	69 2f       	mov	r22, r25
     aa2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D6,Get_Bit(u8Command,6));
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	82 95       	swap	r24
     aaa:	86 95       	lsr	r24
     aac:	86 95       	lsr	r24
     aae:	83 70       	andi	r24, 0x03	; 3
     ab0:	98 2f       	mov	r25, r24
     ab2:	91 70       	andi	r25, 0x01	; 1
     ab4:	86 e0       	ldi	r24, 0x06	; 6
     ab6:	69 2f       	mov	r22, r25
     ab8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D5,Get_Bit(u8Command,5));
     abc:	89 81       	ldd	r24, Y+1	; 0x01
     abe:	82 95       	swap	r24
     ac0:	86 95       	lsr	r24
     ac2:	87 70       	andi	r24, 0x07	; 7
     ac4:	98 2f       	mov	r25, r24
     ac6:	91 70       	andi	r25, 0x01	; 1
     ac8:	85 e0       	ldi	r24, 0x05	; 5
     aca:	69 2f       	mov	r22, r25
     acc:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D4,Get_Bit(u8Command,4));
     ad0:	89 81       	ldd	r24, Y+1	; 0x01
     ad2:	82 95       	swap	r24
     ad4:	8f 70       	andi	r24, 0x0F	; 15
     ad6:	98 2f       	mov	r25, r24
     ad8:	91 70       	andi	r25, 0x01	; 1
     ada:	84 e0       	ldi	r24, 0x04	; 4
     adc:	69 2f       	mov	r22, r25
     ade:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

		//set enable
		DIO_u8WritePin(LCD_E,HIGH);
     ae2:	8b e0       	ldi	r24, 0x0B	; 11
     ae4:	61 e0       	ldi	r22, 0x01	; 1
     ae6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		//Next State
		LCD_Command_State++;
     aea:	80 91 9e 01 	lds	r24, 0x019E
     aee:	8f 5f       	subi	r24, 0xFF	; 255
     af0:	80 93 9e 01 	sts	0x019E, r24
		u8LCDwritetime = 0;
     af4:	10 92 9f 01 	sts	0x019F, r1
     af8:	95 c0       	rjmp	.+298    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		break;
	case 1:
		//delay 5 ms
		if(++u8LCDwritetime>5)
     afa:	80 91 9f 01 	lds	r24, 0x019F
     afe:	8f 5f       	subi	r24, 0xFF	; 255
     b00:	80 93 9f 01 	sts	0x019F, r24
     b04:	80 91 9f 01 	lds	r24, 0x019F
     b08:	86 30       	cpi	r24, 0x06	; 6
     b0a:	08 f4       	brcc	.+2      	; 0xb0e <LCD_u8WriteCommand+0x126>
     b0c:	8b c0       	rjmp	.+278    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     b0e:	10 92 9f 01 	sts	0x019F, r1
			LCD_Command_State++;
     b12:	80 91 9e 01 	lds	r24, 0x019E
     b16:	8f 5f       	subi	r24, 0xFF	; 255
     b18:	80 93 9e 01 	sts	0x019E, r24
     b1c:	83 c0       	rjmp	.+262    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 2:
		//clear enable
		DIO_u8WritePin(LCD_E,LOW);
     b1e:	8b e0       	ldi	r24, 0x0B	; 11
     b20:	60 e0       	ldi	r22, 0x00	; 0
     b22:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		//Next State
		LCD_Command_State++;
     b26:	80 91 9e 01 	lds	r24, 0x019E
     b2a:	8f 5f       	subi	r24, 0xFF	; 255
     b2c:	80 93 9e 01 	sts	0x019E, r24
     b30:	79 c0       	rjmp	.+242    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		break;
	case 3:
		//delay 5ms
		if(++u8LCDwritetime>5)
     b32:	80 91 9f 01 	lds	r24, 0x019F
     b36:	8f 5f       	subi	r24, 0xFF	; 255
     b38:	80 93 9f 01 	sts	0x019F, r24
     b3c:	80 91 9f 01 	lds	r24, 0x019F
     b40:	86 30       	cpi	r24, 0x06	; 6
     b42:	08 f4       	brcc	.+2      	; 0xb46 <LCD_u8WriteCommand+0x15e>
     b44:	6f c0       	rjmp	.+222    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     b46:	10 92 9f 01 	sts	0x019F, r1
			LCD_Command_State++;
     b4a:	80 91 9e 01 	lds	r24, 0x019E
     b4e:	8f 5f       	subi	r24, 0xFF	; 255
     b50:	80 93 9e 01 	sts	0x019E, r24
     b54:	67 c0       	rjmp	.+206    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 4:
		if(u8Command!=0x20)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	80 32       	cpi	r24, 0x20	; 32
     b5a:	31 f0       	breq	.+12     	; 0xb68 <LCD_u8WriteCommand+0x180>
		{
			//Next State
			LCD_Command_State++;
     b5c:	80 91 9e 01 	lds	r24, 0x019E
     b60:	8f 5f       	subi	r24, 0xFF	; 255
     b62:	80 93 9e 01 	sts	0x019E, r24
     b66:	5e c0       	rjmp	.+188    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		}
		else
		{
			LCD_Command_State=9;
     b68:	89 e0       	ldi	r24, 0x09	; 9
     b6a:	80 93 9e 01 	sts	0x019E, r24
     b6e:	5a c0       	rjmp	.+180    	; 0xc24 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 5:

		//Write Low Niple
		DIO_u8WritePin(LCD_D7,Get_Bit(u8Command,3));
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	86 95       	lsr	r24
     b74:	86 95       	lsr	r24
     b76:	86 95       	lsr	r24
     b78:	98 2f       	mov	r25, r24
     b7a:	91 70       	andi	r25, 0x01	; 1
     b7c:	87 e0       	ldi	r24, 0x07	; 7
     b7e:	69 2f       	mov	r22, r25
     b80:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D6,Get_Bit(u8Command,2));
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	86 95       	lsr	r24
     b88:	86 95       	lsr	r24
     b8a:	98 2f       	mov	r25, r24
     b8c:	91 70       	andi	r25, 0x01	; 1
     b8e:	86 e0       	ldi	r24, 0x06	; 6
     b90:	69 2f       	mov	r22, r25
     b92:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D5,Get_Bit(u8Command,1));
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	86 95       	lsr	r24
     b9a:	98 2f       	mov	r25, r24
     b9c:	91 70       	andi	r25, 0x01	; 1
     b9e:	85 e0       	ldi	r24, 0x05	; 5
     ba0:	69 2f       	mov	r22, r25
     ba2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D4,Get_Bit(u8Command,0));
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	98 2f       	mov	r25, r24
     baa:	91 70       	andi	r25, 0x01	; 1
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	69 2f       	mov	r22, r25
     bb0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

		//E		: Falling edge
		DIO_u8WritePin(LCD_E,HIGH);
     bb4:	8b e0       	ldi	r24, 0x0B	; 11
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

		LCD_Command_State++;
     bbc:	80 91 9e 01 	lds	r24, 0x019E
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
     bc2:	80 93 9e 01 	sts	0x019E, r24
     bc6:	2e c0       	rjmp	.+92     	; 0xc24 <LCD_u8WriteCommand+0x23c>

		break;

	case 6:
		if(++u8LCDwritetime>5)
     bc8:	80 91 9f 01 	lds	r24, 0x019F
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 93 9f 01 	sts	0x019F, r24
     bd2:	80 91 9f 01 	lds	r24, 0x019F
     bd6:	86 30       	cpi	r24, 0x06	; 6
     bd8:	28 f1       	brcs	.+74     	; 0xc24 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     bda:	10 92 9f 01 	sts	0x019F, r1
			LCD_Command_State++;
     bde:	80 91 9e 01 	lds	r24, 0x019E
     be2:	8f 5f       	subi	r24, 0xFF	; 255
     be4:	80 93 9e 01 	sts	0x019E, r24
     be8:	1d c0       	rjmp	.+58     	; 0xc24 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 7:
		DIO_u8WritePin(LCD_E,LOW);
     bea:	8b e0       	ldi	r24, 0x0B	; 11
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		LCD_Command_State++;
     bf2:	80 91 9e 01 	lds	r24, 0x019E
     bf6:	8f 5f       	subi	r24, 0xFF	; 255
     bf8:	80 93 9e 01 	sts	0x019E, r24
     bfc:	13 c0       	rjmp	.+38     	; 0xc24 <LCD_u8WriteCommand+0x23c>
		break;
	case 8:
		if(++u8LCDwritetime>5)
     bfe:	80 91 9f 01 	lds	r24, 0x019F
     c02:	8f 5f       	subi	r24, 0xFF	; 255
     c04:	80 93 9f 01 	sts	0x019F, r24
     c08:	80 91 9f 01 	lds	r24, 0x019F
     c0c:	86 30       	cpi	r24, 0x06	; 6
     c0e:	50 f0       	brcs	.+20     	; 0xc24 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     c10:	10 92 9f 01 	sts	0x019F, r1
			LCD_Command_State++;
     c14:	80 91 9e 01 	lds	r24, 0x019E
     c18:	8f 5f       	subi	r24, 0xFF	; 255
     c1a:	80 93 9e 01 	sts	0x019E, r24
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <LCD_u8WriteCommand+0x23c>
		}
		break;
	default:
		LCD_Command_State = 0;
     c20:	10 92 9e 01 	sts	0x019E, r1
		break;
	}
	return (LCD_Command_State==0);
     c24:	80 91 9e 01 	lds	r24, 0x019E
     c28:	1a 82       	std	Y+2, r1	; 0x02
     c2a:	88 23       	and	r24, r24
     c2c:	11 f4       	brne	.+4      	; 0xc32 <LCD_u8WriteCommand+0x24a>
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	9a 83       	std	Y+2, r25	; 0x02
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	0f 90       	pop	r0
     c3a:	0f 90       	pop	r0
     c3c:	cf 91       	pop	r28
     c3e:	df 91       	pop	r29
     c40:	08 95       	ret

00000c42 <LCD_u8Init>:


static uint8 LCD_u8Init(void)
{
     c42:	df 93       	push	r29
     c44:	cf 93       	push	r28
     c46:	00 d0       	rcall	.+0      	; 0xc48 <LCD_u8Init+0x6>
     c48:	0f 92       	push	r0
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	static uint8 u8LCD_init_state=0,u8LCDinittime=0;
	switch (u8LCD_init_state)
     c4e:	80 91 a1 01 	lds	r24, 0x01A1
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	3b 83       	std	Y+3, r19	; 0x03
     c58:	2a 83       	std	Y+2, r18	; 0x02
     c5a:	8a 81       	ldd	r24, Y+2	; 0x02
     c5c:	9b 81       	ldd	r25, Y+3	; 0x03
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	91 05       	cpc	r25, r1
     c62:	09 f4       	brne	.+2      	; 0xc66 <LCD_u8Init+0x24>
     c64:	99 c0       	rjmp	.+306    	; 0xd98 <LCD_u8Init+0x156>
     c66:	2a 81       	ldd	r18, Y+2	; 0x02
     c68:	3b 81       	ldd	r19, Y+3	; 0x03
     c6a:	25 30       	cpi	r18, 0x05	; 5
     c6c:	31 05       	cpc	r19, r1
     c6e:	ec f4       	brge	.+58     	; 0xcaa <LCD_u8Init+0x68>
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	9b 81       	ldd	r25, Y+3	; 0x03
     c74:	81 30       	cpi	r24, 0x01	; 1
     c76:	91 05       	cpc	r25, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <LCD_u8Init+0x3a>
     c7a:	5e c0       	rjmp	.+188    	; 0xd38 <LCD_u8Init+0xf6>
     c7c:	2a 81       	ldd	r18, Y+2	; 0x02
     c7e:	3b 81       	ldd	r19, Y+3	; 0x03
     c80:	22 30       	cpi	r18, 0x02	; 2
     c82:	31 05       	cpc	r19, r1
     c84:	2c f4       	brge	.+10     	; 0xc90 <LCD_u8Init+0x4e>
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	9b 81       	ldd	r25, Y+3	; 0x03
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	99 f1       	breq	.+102    	; 0xcf4 <LCD_u8Init+0xb2>
     c8e:	da c0       	rjmp	.+436    	; 0xe44 <LCD_u8Init+0x202>
     c90:	2a 81       	ldd	r18, Y+2	; 0x02
     c92:	3b 81       	ldd	r19, Y+3	; 0x03
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	09 f4       	brne	.+2      	; 0xc9c <LCD_u8Init+0x5a>
     c9a:	60 c0       	rjmp	.+192    	; 0xd5c <LCD_u8Init+0x11a>
     c9c:	8a 81       	ldd	r24, Y+2	; 0x02
     c9e:	9b 81       	ldd	r25, Y+3	; 0x03
     ca0:	83 30       	cpi	r24, 0x03	; 3
     ca2:	91 05       	cpc	r25, r1
     ca4:	09 f4       	brne	.+2      	; 0xca8 <LCD_u8Init+0x66>
     ca6:	66 c0       	rjmp	.+204    	; 0xd74 <LCD_u8Init+0x132>
     ca8:	cd c0       	rjmp	.+410    	; 0xe44 <LCD_u8Init+0x202>
     caa:	2a 81       	ldd	r18, Y+2	; 0x02
     cac:	3b 81       	ldd	r19, Y+3	; 0x03
     cae:	27 30       	cpi	r18, 0x07	; 7
     cb0:	31 05       	cpc	r19, r1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <LCD_u8Init+0x74>
     cb4:	9a c0       	rjmp	.+308    	; 0xdea <LCD_u8Init+0x1a8>
     cb6:	8a 81       	ldd	r24, Y+2	; 0x02
     cb8:	9b 81       	ldd	r25, Y+3	; 0x03
     cba:	88 30       	cpi	r24, 0x08	; 8
     cbc:	91 05       	cpc	r25, r1
     cbe:	6c f4       	brge	.+26     	; 0xcda <LCD_u8Init+0x98>
     cc0:	2a 81       	ldd	r18, Y+2	; 0x02
     cc2:	3b 81       	ldd	r19, Y+3	; 0x03
     cc4:	25 30       	cpi	r18, 0x05	; 5
     cc6:	31 05       	cpc	r19, r1
     cc8:	09 f4       	brne	.+2      	; 0xccc <LCD_u8Init+0x8a>
     cca:	72 c0       	rjmp	.+228    	; 0xdb0 <LCD_u8Init+0x16e>
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	9b 81       	ldd	r25, Y+3	; 0x03
     cd0:	86 30       	cpi	r24, 0x06	; 6
     cd2:	91 05       	cpc	r25, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <LCD_u8Init+0x96>
     cd6:	7e c0       	rjmp	.+252    	; 0xdd4 <LCD_u8Init+0x192>
     cd8:	b5 c0       	rjmp	.+362    	; 0xe44 <LCD_u8Init+0x202>
     cda:	2a 81       	ldd	r18, Y+2	; 0x02
     cdc:	3b 81       	ldd	r19, Y+3	; 0x03
     cde:	28 30       	cpi	r18, 0x08	; 8
     ce0:	31 05       	cpc	r19, r1
     ce2:	09 f4       	brne	.+2      	; 0xce6 <LCD_u8Init+0xa4>
     ce4:	93 c0       	rjmp	.+294    	; 0xe0c <LCD_u8Init+0x1ca>
     ce6:	8a 81       	ldd	r24, Y+2	; 0x02
     ce8:	9b 81       	ldd	r25, Y+3	; 0x03
     cea:	89 30       	cpi	r24, 0x09	; 9
     cec:	91 05       	cpc	r25, r1
     cee:	09 f4       	brne	.+2      	; 0xcf2 <LCD_u8Init+0xb0>
     cf0:	98 c0       	rjmp	.+304    	; 0xe22 <LCD_u8Init+0x1e0>
     cf2:	a8 c0       	rjmp	.+336    	; 0xe44 <LCD_u8Init+0x202>
	{
	case 0:
		DIO_u8SetPinDir(LCD_E ,OUTPUT);
     cf4:	8b e0       	ldi	r24, 0x0B	; 11
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_RW,OUTPUT);
     cfc:	8a e0       	ldi	r24, 0x0A	; 10
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_RS,OUTPUT);
     d04:	89 e0       	ldi	r24, 0x09	; 9
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>

		DIO_u8SetPinDir(LCD_D7,OUTPUT);
     d0c:	87 e0       	ldi	r24, 0x07	; 7
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D6,OUTPUT);
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D5,OUTPUT);
     d1c:	85 e0       	ldi	r24, 0x05	; 5
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D4,OUTPUT);
     d24:	84 e0       	ldi	r24, 0x04	; 4
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
		u8LCD_init_state++;
     d2c:	80 91 a1 01 	lds	r24, 0x01A1
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 a1 01 	sts	0x01A1, r24
     d36:	88 c0       	rjmp	.+272    	; 0xe48 <LCD_u8Init+0x206>

		break;
	case 1:								//Delay 30 ms
		if (++u8LCDinittime > 40)
     d38:	80 91 a0 01 	lds	r24, 0x01A0
     d3c:	8f 5f       	subi	r24, 0xFF	; 255
     d3e:	80 93 a0 01 	sts	0x01A0, r24
     d42:	80 91 a0 01 	lds	r24, 0x01A0
     d46:	89 32       	cpi	r24, 0x29	; 41
     d48:	08 f4       	brcc	.+2      	; 0xd4c <LCD_u8Init+0x10a>
     d4a:	7e c0       	rjmp	.+252    	; 0xe48 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     d4c:	10 92 a0 01 	sts	0x01A0, r1
			u8LCD_init_state++;
     d50:	80 91 a1 01 	lds	r24, 0x01A1
     d54:	8f 5f       	subi	r24, 0xFF	; 255
     d56:	80 93 a1 01 	sts	0x01A1, r24
     d5a:	76 c0       	rjmp	.+236    	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 2:


		if ( LCD_u8WriteCommand(0x20) )
     d5c:	80 e2       	ldi	r24, 0x20	; 32
     d5e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_u8WriteCommand>
     d62:	88 23       	and	r24, r24
     d64:	09 f4       	brne	.+2      	; 0xd68 <LCD_u8Init+0x126>
     d66:	70 c0       	rjmp	.+224    	; 0xe48 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     d68:	80 91 a1 01 	lds	r24, 0x01A1
     d6c:	8f 5f       	subi	r24, 0xFF	; 255
     d6e:	80 93 a1 01 	sts	0x01A1, r24
     d72:	6a c0       	rjmp	.+212    	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 3:								//Delay 5 ms
		if (++u8LCDinittime > 5)
     d74:	80 91 a0 01 	lds	r24, 0x01A0
     d78:	8f 5f       	subi	r24, 0xFF	; 255
     d7a:	80 93 a0 01 	sts	0x01A0, r24
     d7e:	80 91 a0 01 	lds	r24, 0x01A0
     d82:	86 30       	cpi	r24, 0x06	; 6
     d84:	08 f4       	brcc	.+2      	; 0xd88 <LCD_u8Init+0x146>
     d86:	60 c0       	rjmp	.+192    	; 0xe48 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     d88:	10 92 a0 01 	sts	0x01A0, r1
			u8LCD_init_state++;
     d8c:	80 91 a1 01 	lds	r24, 0x01A1
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	80 93 a1 01 	sts	0x01A1, r24
     d96:	58 c0       	rjmp	.+176    	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 4:								//Function Set 		0011NFxx N:number of lines 1/2 F: font 5*8/5*11
		if ( LCD_u8WriteCommand(0x2c) )
     d98:	8c e2       	ldi	r24, 0x2C	; 44
     d9a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_u8WriteCommand>
     d9e:	88 23       	and	r24, r24
     da0:	09 f4       	brne	.+2      	; 0xda4 <LCD_u8Init+0x162>
     da2:	52 c0       	rjmp	.+164    	; 0xe48 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     da4:	80 91 a1 01 	lds	r24, 0x01A1
     da8:	8f 5f       	subi	r24, 0xFF	; 255
     daa:	80 93 a1 01 	sts	0x01A1, r24
     dae:	4c c0       	rjmp	.+152    	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 5:								//Delay 3 ms
		if (++u8LCDinittime > 3)
     db0:	80 91 a0 01 	lds	r24, 0x01A0
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	80 93 a0 01 	sts	0x01A0, r24
     dba:	80 91 a0 01 	lds	r24, 0x01A0
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	08 f4       	brcc	.+2      	; 0xdc4 <LCD_u8Init+0x182>
     dc2:	42 c0       	rjmp	.+132    	; 0xe48 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     dc4:	10 92 a0 01 	sts	0x01A0, r1
			u8LCD_init_state++;
     dc8:	80 91 a1 01 	lds	r24, 0x01A1
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 a1 01 	sts	0x01A1, r24
     dd2:	3a c0       	rjmp	.+116    	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 6:
		if (LCD_u8WriteCommand(0x0c))
     dd4:	8c e0       	ldi	r24, 0x0C	; 12
     dd6:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_u8WriteCommand>
     dda:	88 23       	and	r24, r24
     ddc:	a9 f1       	breq	.+106    	; 0xe48 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     dde:	80 91 a1 01 	lds	r24, 0x01A1
     de2:	8f 5f       	subi	r24, 0xFF	; 255
     de4:	80 93 a1 01 	sts	0x01A1, r24
     de8:	2f c0       	rjmp	.+94     	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 7:								//Delay 3 ms
		if (++u8LCDinittime > 3)
     dea:	80 91 a0 01 	lds	r24, 0x01A0
     dee:	8f 5f       	subi	r24, 0xFF	; 255
     df0:	80 93 a0 01 	sts	0x01A0, r24
     df4:	80 91 a0 01 	lds	r24, 0x01A0
     df8:	84 30       	cpi	r24, 0x04	; 4
     dfa:	30 f1       	brcs	.+76     	; 0xe48 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     dfc:	10 92 a0 01 	sts	0x01A0, r1
			u8LCD_init_state++;
     e00:	80 91 a1 01 	lds	r24, 0x01A1
     e04:	8f 5f       	subi	r24, 0xFF	; 255
     e06:	80 93 a1 01 	sts	0x01A1, r24
     e0a:	1e c0       	rjmp	.+60     	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 8:
		if( LCD_u8WriteCommand(0x01))
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_u8WriteCommand>
     e12:	88 23       	and	r24, r24
     e14:	c9 f0       	breq	.+50     	; 0xe48 <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     e16:	80 91 a1 01 	lds	r24, 0x01A1
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	80 93 a1 01 	sts	0x01A1, r24
     e20:	13 c0       	rjmp	.+38     	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	case 9:								//Delay 40 ms
		if (++u8LCDinittime > 10)
     e22:	80 91 a0 01 	lds	r24, 0x01A0
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 a0 01 	sts	0x01A0, r24
     e2c:	80 91 a0 01 	lds	r24, 0x01A0
     e30:	8b 30       	cpi	r24, 0x0B	; 11
     e32:	50 f0       	brcs	.+20     	; 0xe48 <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     e34:	10 92 a0 01 	sts	0x01A0, r1
			u8LCD_init_state++;
     e38:	80 91 a1 01 	lds	r24, 0x01A1
     e3c:	8f 5f       	subi	r24, 0xFF	; 255
     e3e:	80 93 a1 01 	sts	0x01A1, r24
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <LCD_u8Init+0x206>
		}
		break;
	default:
		u8LCD_init_state=0;
     e44:	10 92 a1 01 	sts	0x01A1, r1
		break;

	}
return (u8LCD_init_state==0);
     e48:	80 91 a1 01 	lds	r24, 0x01A1
     e4c:	19 82       	std	Y+1, r1	; 0x01
     e4e:	88 23       	and	r24, r24
     e50:	11 f4       	brne	.+4      	; 0xe56 <LCD_u8Init+0x214>
     e52:	91 e0       	ldi	r25, 0x01	; 1
     e54:	99 83       	std	Y+1, r25	; 0x01
     e56:	89 81       	ldd	r24, Y+1	; 0x01

}
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	cf 91       	pop	r28
     e60:	df 91       	pop	r29
     e62:	08 95       	ret

00000e64 <LCD_u8WriteData>:

static uint8 LCD_u8WriteData( uint8 u8Data)
{
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	00 d0       	rcall	.+0      	; 0xe6a <LCD_u8WriteData+0x6>
     e6a:	00 d0       	rcall	.+0      	; 0xe6c <LCD_u8WriteData+0x8>
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
     e70:	89 83       	std	Y+1, r24	; 0x01
	static uint8 u8LCDdatatime=0;
	static uint8 LCD_Data_State=0;

	switch(LCD_Data_State){
     e72:	80 91 a2 01 	lds	r24, 0x01A2
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	3c 83       	std	Y+4, r19	; 0x04
     e7c:	2b 83       	std	Y+3, r18	; 0x03
     e7e:	8b 81       	ldd	r24, Y+3	; 0x03
     e80:	9c 81       	ldd	r25, Y+4	; 0x04
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	91 05       	cpc	r25, r1
     e86:	09 f4       	brne	.+2      	; 0xe8a <LCD_u8WriteData+0x26>
     e88:	68 c0       	rjmp	.+208    	; 0xf5a <LCD_u8WriteData+0xf6>
     e8a:	2b 81       	ldd	r18, Y+3	; 0x03
     e8c:	3c 81       	ldd	r19, Y+4	; 0x04
     e8e:	23 30       	cpi	r18, 0x03	; 3
     e90:	31 05       	cpc	r19, r1
     e92:	5c f4       	brge	.+22     	; 0xeaa <LCD_u8WriteData+0x46>
     e94:	8b 81       	ldd	r24, Y+3	; 0x03
     e96:	9c 81       	ldd	r25, Y+4	; 0x04
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	a1 f0       	breq	.+40     	; 0xec4 <LCD_u8WriteData+0x60>
     e9c:	2b 81       	ldd	r18, Y+3	; 0x03
     e9e:	3c 81       	ldd	r19, Y+4	; 0x04
     ea0:	21 30       	cpi	r18, 0x01	; 1
     ea2:	31 05       	cpc	r19, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <LCD_u8WriteData+0x44>
     ea6:	49 c0       	rjmp	.+146    	; 0xf3a <LCD_u8WriteData+0xd6>
     ea8:	a9 c0       	rjmp	.+338    	; 0xffc <LCD_u8WriteData+0x198>
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	83 30       	cpi	r24, 0x03	; 3
     eb0:	91 05       	cpc	r25, r1
     eb2:	09 f4       	brne	.+2      	; 0xeb6 <LCD_u8WriteData+0x52>
     eb4:	84 c0       	rjmp	.+264    	; 0xfbe <LCD_u8WriteData+0x15a>
     eb6:	2b 81       	ldd	r18, Y+3	; 0x03
     eb8:	3c 81       	ldd	r19, Y+4	; 0x04
     eba:	24 30       	cpi	r18, 0x04	; 4
     ebc:	31 05       	cpc	r19, r1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <LCD_u8WriteData+0x5e>
     ec0:	91 c0       	rjmp	.+290    	; 0xfe4 <LCD_u8WriteData+0x180>
     ec2:	9c c0       	rjmp	.+312    	; 0xffc <LCD_u8WriteData+0x198>

	case 0:
		//RS 	= 1
			DIO_u8WritePin(LCD_RS,HIGH);
     ec4:	89 e0       	ldi	r24, 0x09	; 9
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

			//R/W 	= 0
			DIO_u8WritePin(LCD_RW,LOW);
     ecc:	8a e0       	ldi	r24, 0x0A	; 10
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

			//Send data

			//Write High Niple
			DIO_u8WritePin(LCD_D7,Get_Bit(u8Data,7));
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	98 2f       	mov	r25, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	99 27       	eor	r25, r25
     edc:	99 1f       	adc	r25, r25
     ede:	87 e0       	ldi	r24, 0x07	; 7
     ee0:	69 2f       	mov	r22, r25
     ee2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D6,Get_Bit(u8Data,6));
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	82 95       	swap	r24
     eea:	86 95       	lsr	r24
     eec:	86 95       	lsr	r24
     eee:	83 70       	andi	r24, 0x03	; 3
     ef0:	98 2f       	mov	r25, r24
     ef2:	91 70       	andi	r25, 0x01	; 1
     ef4:	86 e0       	ldi	r24, 0x06	; 6
     ef6:	69 2f       	mov	r22, r25
     ef8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D5,Get_Bit(u8Data,5));
     efc:	89 81       	ldd	r24, Y+1	; 0x01
     efe:	82 95       	swap	r24
     f00:	86 95       	lsr	r24
     f02:	87 70       	andi	r24, 0x07	; 7
     f04:	98 2f       	mov	r25, r24
     f06:	91 70       	andi	r25, 0x01	; 1
     f08:	85 e0       	ldi	r24, 0x05	; 5
     f0a:	69 2f       	mov	r22, r25
     f0c:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D4,Get_Bit(u8Data,4));
     f10:	89 81       	ldd	r24, Y+1	; 0x01
     f12:	82 95       	swap	r24
     f14:	8f 70       	andi	r24, 0x0F	; 15
     f16:	98 2f       	mov	r25, r24
     f18:	91 70       	andi	r25, 0x01	; 1
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	69 2f       	mov	r22, r25
     f1e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

			//E		: Falling edge
			DIO_u8WritePin(LCD_E,HIGH);
     f22:	8b e0       	ldi	r24, 0x0B	; 11
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			LCD_Data_State++;
     f2a:	80 91 a2 01 	lds	r24, 0x01A2
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 93 a2 01 	sts	0x01A2, r24
			u8LCDdatatime = 0;
     f34:	10 92 a3 01 	sts	0x01A3, r1
     f38:	66 c0       	rjmp	.+204    	; 0x1006 <LCD_u8WriteData+0x1a2>
		break;

	case 1:
		if(++u8LCDdatatime > 5){
     f3a:	80 91 a3 01 	lds	r24, 0x01A3
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	80 93 a3 01 	sts	0x01A3, r24
     f44:	80 91 a3 01 	lds	r24, 0x01A3
     f48:	86 30       	cpi	r24, 0x06	; 6
     f4a:	08 f4       	brcc	.+2      	; 0xf4e <LCD_u8WriteData+0xea>
     f4c:	5c c0       	rjmp	.+184    	; 0x1006 <LCD_u8WriteData+0x1a2>
			LCD_Data_State++;
     f4e:	80 91 a2 01 	lds	r24, 0x01A2
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 a2 01 	sts	0x01A2, r24
     f58:	56 c0       	rjmp	.+172    	; 0x1006 <LCD_u8WriteData+0x1a2>
		}
		break;
	case 2:
		u8LCDdatatime =0;
     f5a:	10 92 a3 01 	sts	0x01A3, r1
		DIO_u8WritePin(LCD_E,LOW);
     f5e:	8b e0       	ldi	r24, 0x0B	; 11
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

			//Write High Niple
			DIO_u8WritePin(LCD_D7,Get_Bit(u8Data,3));
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	86 95       	lsr	r24
     f6a:	86 95       	lsr	r24
     f6c:	86 95       	lsr	r24
     f6e:	98 2f       	mov	r25, r24
     f70:	91 70       	andi	r25, 0x01	; 1
     f72:	87 e0       	ldi	r24, 0x07	; 7
     f74:	69 2f       	mov	r22, r25
     f76:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D6,Get_Bit(u8Data,2));
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	86 95       	lsr	r24
     f7e:	86 95       	lsr	r24
     f80:	98 2f       	mov	r25, r24
     f82:	91 70       	andi	r25, 0x01	; 1
     f84:	86 e0       	ldi	r24, 0x06	; 6
     f86:	69 2f       	mov	r22, r25
     f88:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D5,Get_Bit(u8Data,1));
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	86 95       	lsr	r24
     f90:	98 2f       	mov	r25, r24
     f92:	91 70       	andi	r25, 0x01	; 1
     f94:	85 e0       	ldi	r24, 0x05	; 5
     f96:	69 2f       	mov	r22, r25
     f98:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D4,Get_Bit(u8Data,0));
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	98 2f       	mov	r25, r24
     fa0:	91 70       	andi	r25, 0x01	; 1
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	69 2f       	mov	r22, r25
     fa6:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>

			//E		: Falling edge
			DIO_u8WritePin(LCD_E,HIGH);
     faa:	8b e0       	ldi	r24, 0x0B	; 11
     fac:	61 e0       	ldi	r22, 0x01	; 1
     fae:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			LCD_Data_State++;
     fb2:	80 91 a2 01 	lds	r24, 0x01A2
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 a2 01 	sts	0x01A2, r24
     fbc:	24 c0       	rjmp	.+72     	; 0x1006 <LCD_u8WriteData+0x1a2>

		break;
	case 3:DIO_u8WritePin(0,LOW);
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
			if(++u8LCDdatatime > 5){
     fc6:	80 91 a3 01 	lds	r24, 0x01A3
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	80 93 a3 01 	sts	0x01A3, r24
     fd0:	80 91 a3 01 	lds	r24, 0x01A3
     fd4:	86 30       	cpi	r24, 0x06	; 6
     fd6:	b8 f0       	brcs	.+46     	; 0x1006 <LCD_u8WriteData+0x1a2>
				LCD_Data_State++;
     fd8:	80 91 a2 01 	lds	r24, 0x01A2
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	80 93 a2 01 	sts	0x01A2, r24
     fe2:	11 c0       	rjmp	.+34     	; 0x1006 <LCD_u8WriteData+0x1a2>
			}
			break;


	case 4:
		u8LCDdatatime = 0;
     fe4:	10 92 a3 01 	sts	0x01A3, r1
		DIO_u8WritePin(LCD_E,LOW);
     fe8:	8b e0       	ldi	r24, 0x0B	; 11
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
		LCD_Data_State++;
     ff0:	80 91 a2 01 	lds	r24, 0x01A2
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
     ff6:	80 93 a2 01 	sts	0x01A2, r24
     ffa:	05 c0       	rjmp	.+10     	; 0x1006 <LCD_u8WriteData+0x1a2>
		break;

	default :
		LCD_Data_State = 0;
     ffc:	10 92 a2 01 	sts	0x01A2, r1
		return 1;
    1000:	31 e0       	ldi	r19, 0x01	; 1
    1002:	3a 83       	std	Y+2, r19	; 0x02
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <LCD_u8WriteData+0x1a4>
		break;
	}

	return 0;
    1006:	1a 82       	std	Y+2, r1	; 0x02
    1008:	8a 81       	ldd	r24, Y+2	; 0x02

}
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <LCD_u8GotoXY>:

static uint8 LCD_u8GotoXY (uint8 x , uint8 y)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	00 d0       	rcall	.+0      	; 0x101e <LCD_u8GotoXY+0x6>
    101e:	0f 92       	push	r0
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
    1026:	6a 83       	std	Y+2, r22	; 0x02
	if (LCD_u8WriteCommand(0x80|(((y)&1)<<6)|((x) & 0x3f)))
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	88 2f       	mov	r24, r24
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	81 70       	andi	r24, 0x01	; 1
    1030:	90 70       	andi	r25, 0x00	; 0
    1032:	00 24       	eor	r0, r0
    1034:	96 95       	lsr	r25
    1036:	87 95       	ror	r24
    1038:	07 94       	ror	r0
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	07 94       	ror	r0
    1040:	98 2f       	mov	r25, r24
    1042:	80 2d       	mov	r24, r0
    1044:	98 2f       	mov	r25, r24
    1046:	90 68       	ori	r25, 0x80	; 128
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	8f 73       	andi	r24, 0x3F	; 63
    104c:	89 2b       	or	r24, r25
    104e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_u8WriteCommand>
    1052:	88 23       	and	r24, r24
    1054:	19 f0       	breq	.+6      	; 0x105c <LCD_u8GotoXY+0x44>
	{
		return 1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	8b 83       	std	Y+3, r24	; 0x03
    105a:	01 c0       	rjmp	.+2      	; 0x105e <LCD_u8GotoXY+0x46>
	}
	return 0;
    105c:	1b 82       	std	Y+3, r1	; 0x03
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <LCD_vidTask>:


void LCD_vidTask (void)
{
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <LCD_vidTask+0x6>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
	static uint8 LCDx=0,LCDy=0;
	switch(u8LCDState)
    1076:	80 91 9d 01 	lds	r24, 0x019D
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	3a 83       	std	Y+2, r19	; 0x02
    1080:	29 83       	std	Y+1, r18	; 0x01
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	39 f1       	breq	.+78     	; 0x10da <LCD_vidTask+0x6e>
    108c:	29 81       	ldd	r18, Y+1	; 0x01
    108e:	3a 81       	ldd	r19, Y+2	; 0x02
    1090:	23 30       	cpi	r18, 0x03	; 3
    1092:	31 05       	cpc	r19, r1
    1094:	5c f4       	brge	.+22     	; 0x10ac <LCD_vidTask+0x40>
    1096:	89 81       	ldd	r24, Y+1	; 0x01
    1098:	9a 81       	ldd	r25, Y+2	; 0x02
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	09 f4       	brne	.+2      	; 0x10a0 <LCD_vidTask+0x34>
    109e:	6c c0       	rjmp	.+216    	; 0x1178 <LCD_vidTask+0x10c>
    10a0:	29 81       	ldd	r18, Y+1	; 0x01
    10a2:	3a 81       	ldd	r19, Y+2	; 0x02
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	69 f0       	breq	.+26     	; 0x10c4 <LCD_vidTask+0x58>
    10aa:	66 c0       	rjmp	.+204    	; 0x1178 <LCD_vidTask+0x10c>
    10ac:	89 81       	ldd	r24, Y+1	; 0x01
    10ae:	9a 81       	ldd	r25, Y+2	; 0x02
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	91 05       	cpc	r25, r1
    10b4:	f1 f0       	breq	.+60     	; 0x10f2 <LCD_vidTask+0x86>
    10b6:	29 81       	ldd	r18, Y+1	; 0x01
    10b8:	3a 81       	ldd	r19, Y+2	; 0x02
    10ba:	24 30       	cpi	r18, 0x04	; 4
    10bc:	31 05       	cpc	r19, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <LCD_vidTask+0x56>
    10c0:	4f c0       	rjmp	.+158    	; 0x1160 <LCD_vidTask+0xf4>
    10c2:	5a c0       	rjmp	.+180    	; 0x1178 <LCD_vidTask+0x10c>
	{
	case 0:
		break;
	case 1:
		if(LCD_u8Init())
    10c4:	0e 94 21 06 	call	0xc42	; 0xc42 <LCD_u8Init>
    10c8:	88 23       	and	r24, r24
    10ca:	09 f4       	brne	.+2      	; 0x10ce <LCD_vidTask+0x62>
    10cc:	55 c0       	rjmp	.+170    	; 0x1178 <LCD_vidTask+0x10c>
		{
			u8LCDState++;
    10ce:	80 91 9d 01 	lds	r24, 0x019D
    10d2:	8f 5f       	subi	r24, 0xFF	; 255
    10d4:	80 93 9d 01 	sts	0x019D, r24
    10d8:	4f c0       	rjmp	.+158    	; 0x1178 <LCD_vidTask+0x10c>
		}
		break;
	case 2:
		if(LCD_u8WriteCommand(1))
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <LCD_u8WriteCommand>
    10e0:	88 23       	and	r24, r24
    10e2:	09 f4       	brne	.+2      	; 0x10e6 <LCD_vidTask+0x7a>
    10e4:	49 c0       	rjmp	.+146    	; 0x1178 <LCD_vidTask+0x10c>
		{
			u8LCDState++;
    10e6:	80 91 9d 01 	lds	r24, 0x019D
    10ea:	8f 5f       	subi	r24, 0xFF	; 255
    10ec:	80 93 9d 01 	sts	0x019D, r24
    10f0:	43 c0       	rjmp	.+134    	; 0x1178 <LCD_vidTask+0x10c>
		}
		break;
	case 3:
		if(LCD_u8WriteData(LCD_LINE[LCDy][LCDx]))
    10f2:	80 91 a4 01 	lds	r24, 0x01A4
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	80 91 a5 01 	lds	r24, 0x01A5
    10fe:	48 2f       	mov	r20, r24
    1100:	50 e0       	ldi	r21, 0x00	; 0
    1102:	c9 01       	movw	r24, r18
    1104:	82 95       	swap	r24
    1106:	92 95       	swap	r25
    1108:	90 7f       	andi	r25, 0xF0	; 240
    110a:	98 27       	eor	r25, r24
    110c:	80 7f       	andi	r24, 0xF0	; 240
    110e:	98 27       	eor	r25, r24
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	84 0f       	add	r24, r20
    1116:	95 1f       	adc	r25, r21
    1118:	fc 01       	movw	r30, r24
    111a:	e2 50       	subi	r30, 0x02	; 2
    111c:	ff 4f       	sbci	r31, 0xFF	; 255
    111e:	80 81       	ld	r24, Z
    1120:	0e 94 32 07 	call	0xe64	; 0xe64 <LCD_u8WriteData>
    1124:	88 23       	and	r24, r24
    1126:	41 f1       	breq	.+80     	; 0x1178 <LCD_vidTask+0x10c>
		{
			if(++LCDx>15)
    1128:	80 91 a5 01 	lds	r24, 0x01A5
    112c:	8f 5f       	subi	r24, 0xFF	; 255
    112e:	80 93 a5 01 	sts	0x01A5, r24
    1132:	80 91 a5 01 	lds	r24, 0x01A5
    1136:	80 31       	cpi	r24, 0x10	; 16
    1138:	f8 f0       	brcs	.+62     	; 0x1178 <LCD_vidTask+0x10c>
			{
				LCDx=0;
    113a:	10 92 a5 01 	sts	0x01A5, r1
				if(++LCDy>1)
    113e:	80 91 a4 01 	lds	r24, 0x01A4
    1142:	8f 5f       	subi	r24, 0xFF	; 255
    1144:	80 93 a4 01 	sts	0x01A4, r24
    1148:	80 91 a4 01 	lds	r24, 0x01A4
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	10 f0       	brcs	.+4      	; 0x1154 <LCD_vidTask+0xe8>
				{
					LCDy=0;
    1150:	10 92 a4 01 	sts	0x01A4, r1
				}
				u8LCDState++;
    1154:	80 91 9d 01 	lds	r24, 0x019D
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	80 93 9d 01 	sts	0x019D, r24
    115e:	0c c0       	rjmp	.+24     	; 0x1178 <LCD_vidTask+0x10c>
			}
		}
		break;
	case 4:
		if(LCD_u8GotoXY(LCDx,LCDy))
    1160:	80 91 a5 01 	lds	r24, 0x01A5
    1164:	90 91 a4 01 	lds	r25, 0x01A4
    1168:	69 2f       	mov	r22, r25
    116a:	0e 94 0c 08 	call	0x1018	; 0x1018 <LCD_u8GotoXY>
    116e:	88 23       	and	r24, r24
    1170:	19 f0       	breq	.+6      	; 0x1178 <LCD_vidTask+0x10c>
		{
			u8LCDState=3;
    1172:	83 e0       	ldi	r24, 0x03	; 3
    1174:	80 93 9d 01 	sts	0x019D, r24
	default:

		break;
	}

}
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <LCD_vidGotoXY>:

void LCD_vidGotoXY(uint8 x,uint8 y)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <LCD_vidGotoXY+0x6>
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	6a 83       	std	Y+2, r22	; 0x02
	u8x =x;u8y=y;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	80 93 9b 01 	sts	0x019B, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	80 93 9c 01 	sts	0x019C, r24
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <LCD_vidWrite>:
void LCD_vidWrite(uint8 u8data)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
	if ((u8data != '\n') /*&& (u8data != '\r')*/ )
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	8a 30       	cpi	r24, 0x0A	; 10
    11b6:	71 f1       	breq	.+92     	; 0x1214 <LCD_vidWrite+0x6e>
	{
		LCD_LINE[u8y][u8x++]=u8data;
    11b8:	80 91 9c 01 	lds	r24, 0x019C
    11bc:	28 2f       	mov	r18, r24
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	60 91 9b 01 	lds	r22, 0x019B
    11c4:	46 2f       	mov	r20, r22
    11c6:	50 e0       	ldi	r21, 0x00	; 0
    11c8:	c9 01       	movw	r24, r18
    11ca:	82 95       	swap	r24
    11cc:	92 95       	swap	r25
    11ce:	90 7f       	andi	r25, 0xF0	; 240
    11d0:	98 27       	eor	r25, r24
    11d2:	80 7f       	andi	r24, 0xF0	; 240
    11d4:	98 27       	eor	r25, r24
    11d6:	82 0f       	add	r24, r18
    11d8:	93 1f       	adc	r25, r19
    11da:	84 0f       	add	r24, r20
    11dc:	95 1f       	adc	r25, r21
    11de:	fc 01       	movw	r30, r24
    11e0:	e2 50       	subi	r30, 0x02	; 2
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	80 83       	st	Z, r24
    11e8:	86 2f       	mov	r24, r22
    11ea:	8f 5f       	subi	r24, 0xFF	; 255
    11ec:	80 93 9b 01 	sts	0x019B, r24
		if(u8x>15)
    11f0:	80 91 9b 01 	lds	r24, 0x019B
    11f4:	80 31       	cpi	r24, 0x10	; 16
    11f6:	d8 f0       	brcs	.+54     	; 0x122e <LCD_vidWrite+0x88>
		{
			u8x=0;
    11f8:	10 92 9b 01 	sts	0x019B, r1
			if(++u8y>1)
    11fc:	80 91 9c 01 	lds	r24, 0x019C
    1200:	8f 5f       	subi	r24, 0xFF	; 255
    1202:	80 93 9c 01 	sts	0x019C, r24
    1206:	80 91 9c 01 	lds	r24, 0x019C
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	80 f0       	brcs	.+32     	; 0x122e <LCD_vidWrite+0x88>
			{
				u8y=0;
    120e:	10 92 9c 01 	sts	0x019C, r1
    1212:	0d c0       	rjmp	.+26     	; 0x122e <LCD_vidWrite+0x88>
			}
		}
	}
	else
	{
		u8x=0;
    1214:	10 92 9b 01 	sts	0x019B, r1
		if(++u8y>1)
    1218:	80 91 9c 01 	lds	r24, 0x019C
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 9c 01 	sts	0x019C, r24
    1222:	80 91 9c 01 	lds	r24, 0x019C
    1226:	82 30       	cpi	r24, 0x02	; 2
    1228:	10 f0       	brcs	.+4      	; 0x122e <LCD_vidWrite+0x88>
		{
			u8y=0;
    122a:	10 92 9c 01 	sts	0x019C, r1
		}
	}

}
    122e:	0f 90       	pop	r0
    1230:	cf 91       	pop	r28
    1232:	df 91       	pop	r29
    1234:	08 95       	ret

00001236 <LCD_vidInit>:
void LCD_vidInit(void)
{
    1236:	df 93       	push	r29
    1238:	cf 93       	push	r28
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
	u8LCDState=1;
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	80 93 9d 01 	sts	0x019D, r24
}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <LCD_vidString>:

void LCD_vidString (int8 I8String[])
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <LCD_vidString+0x6>
    1250:	0f 92       	push	r0
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	9b 83       	std	Y+3, r25	; 0x03
    1258:	8a 83       	std	Y+2, r24	; 0x02

	uint8 u8i =0;
    125a:	19 82       	std	Y+1, r1	; 0x01
    125c:	0e c0       	rjmp	.+28     	; 0x127a <LCD_vidString+0x30>
	while (I8String[u8i]&&I8String[u8i]!='.')
	{
		LCD_vidWrite( I8String[u8i]);
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	fc 01       	movw	r30, r24
    126a:	e2 0f       	add	r30, r18
    126c:	f3 1f       	adc	r31, r19
    126e:	80 81       	ld	r24, Z
    1270:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_vidWrite>
		u8i++;
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidString (int8 I8String[])
{

	uint8 u8i =0;
	while (I8String[u8i]&&I8String[u8i]!='.')
    127a:	89 81       	ldd	r24, Y+1	; 0x01
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	9b 81       	ldd	r25, Y+3	; 0x03
    1284:	fc 01       	movw	r30, r24
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	80 81       	ld	r24, Z
    128c:	88 23       	and	r24, r24
    128e:	59 f0       	breq	.+22     	; 0x12a6 <LCD_vidString+0x5c>
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	28 2f       	mov	r18, r24
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	9b 81       	ldd	r25, Y+3	; 0x03
    129a:	fc 01       	movw	r30, r24
    129c:	e2 0f       	add	r30, r18
    129e:	f3 1f       	adc	r31, r19
    12a0:	80 81       	ld	r24, Z
    12a2:	8e 32       	cpi	r24, 0x2E	; 46
    12a4:	e1 f6       	brne	.-72     	; 0x125e <LCD_vidString+0x14>
	{
		LCD_vidWrite( I8String[u8i]);
		u8i++;
	}
}
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <LCD_vidClear>:
void LCD_vidClear ()
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <LCD_vidClear+0x6>
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
	for (uint8 y =0;y<2;y++)
    12bc:	1a 82       	std	Y+2, r1	; 0x02
    12be:	21 c0       	rjmp	.+66     	; 0x1302 <LCD_vidClear+0x50>
	{
		for(uint8 x =0 ;x<16;x++)
    12c0:	19 82       	std	Y+1, r1	; 0x01
    12c2:	19 c0       	rjmp	.+50     	; 0x12f6 <LCD_vidClear+0x44>
		{
			LCD_LINE[y][x]=' ';
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	48 2f       	mov	r20, r24
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	c9 01       	movw	r24, r18
    12d2:	82 95       	swap	r24
    12d4:	92 95       	swap	r25
    12d6:	90 7f       	andi	r25, 0xF0	; 240
    12d8:	98 27       	eor	r25, r24
    12da:	80 7f       	andi	r24, 0xF0	; 240
    12dc:	98 27       	eor	r25, r24
    12de:	82 0f       	add	r24, r18
    12e0:	93 1f       	adc	r25, r19
    12e2:	84 0f       	add	r24, r20
    12e4:	95 1f       	adc	r25, r21
    12e6:	fc 01       	movw	r30, r24
    12e8:	e2 50       	subi	r30, 0x02	; 2
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 e2       	ldi	r24, 0x20	; 32
    12ee:	80 83       	st	Z, r24
}
void LCD_vidClear ()
{
	for (uint8 y =0;y<2;y++)
	{
		for(uint8 x =0 ;x<16;x++)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	8f 5f       	subi	r24, 0xFF	; 255
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	80 31       	cpi	r24, 0x10	; 16
    12fa:	20 f3       	brcs	.-56     	; 0x12c4 <LCD_vidClear+0x12>
		u8i++;
	}
}
void LCD_vidClear ()
{
	for (uint8 y =0;y<2;y++)
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	8f 5f       	subi	r24, 0xFF	; 255
    1300:	8a 83       	std	Y+2, r24	; 0x02
    1302:	8a 81       	ldd	r24, Y+2	; 0x02
    1304:	82 30       	cpi	r24, 0x02	; 2
    1306:	e0 f2       	brcs	.-72     	; 0x12c0 <LCD_vidClear+0xe>
		for(uint8 x =0 ;x<16;x++)
		{
			LCD_LINE[y][x]=' ';
		}
	}
	u8x=0;
    1308:	10 92 9b 01 	sts	0x019B, r1
	u8y=0;
    130c:	10 92 9c 01 	sts	0x019C, r1
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <Str_Compare>:
static int8  Text_Mode[]="AT+CMGF=1\r";   // to set text mode
static uint8 Terminator=0x1A;     // uint8tacter form of control + z terminator uint8acter


static uint8 Str_Compare(int8 Str1[],int8 Str2[])
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	27 97       	sbiw	r28, 0x07	; 7
    1324:	0f b6       	in	r0, 0x3f	; 63
    1326:	f8 94       	cli
    1328:	de bf       	out	0x3e, r29	; 62
    132a:	0f be       	out	0x3f, r0	; 63
    132c:	cd bf       	out	0x3d, r28	; 61
    132e:	9b 83       	std	Y+3, r25	; 0x03
    1330:	8a 83       	std	Y+2, r24	; 0x02
    1332:	7d 83       	std	Y+5, r23	; 0x05
    1334:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    1336:	19 82       	std	Y+1, r1	; 0x01
    1338:	03 c0       	rjmp	.+6      	; 0x1340 <Str_Compare+0x26>
	while(Str1[i]==Str2[i]&&Str2[i])
	{
		i++;
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	8f 5f       	subi	r24, 0xFF	; 255
    133e:	89 83       	std	Y+1, r24	; 0x01


static uint8 Str_Compare(int8 Str1[],int8 Str2[])
{
	uint8 i=0;
	while(Str1[i]==Str2[i]&&Str2[i])
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	9b 81       	ldd	r25, Y+3	; 0x03
    134a:	fc 01       	movw	r30, r24
    134c:	e2 0f       	add	r30, r18
    134e:	f3 1f       	adc	r31, r19
    1350:	40 81       	ld	r20, Z
    1352:	89 81       	ldd	r24, Y+1	; 0x01
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	8c 81       	ldd	r24, Y+4	; 0x04
    135a:	9d 81       	ldd	r25, Y+5	; 0x05
    135c:	fc 01       	movw	r30, r24
    135e:	e2 0f       	add	r30, r18
    1360:	f3 1f       	adc	r31, r19
    1362:	80 81       	ld	r24, Z
    1364:	48 17       	cp	r20, r24
    1366:	59 f4       	brne	.+22     	; 0x137e <Str_Compare+0x64>
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	fc 01       	movw	r30, r24
    1374:	e2 0f       	add	r30, r18
    1376:	f3 1f       	adc	r31, r19
    1378:	80 81       	ld	r24, Z
    137a:	88 23       	and	r24, r24
    137c:	f1 f6       	brne	.-68     	; 0x133a <Str_Compare+0x20>
	{
		i++;
	}
	return(!(Str1[i]||Str2[i]));
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	fc 01       	movw	r30, r24
    138a:	e2 0f       	add	r30, r18
    138c:	f3 1f       	adc	r31, r19
    138e:	80 81       	ld	r24, Z
    1390:	88 23       	and	r24, r24
    1392:	81 f4       	brne	.+32     	; 0x13b4 <Str_Compare+0x9a>
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	8c 81       	ldd	r24, Y+4	; 0x04
    139c:	9d 81       	ldd	r25, Y+5	; 0x05
    139e:	fc 01       	movw	r30, r24
    13a0:	e2 0f       	add	r30, r18
    13a2:	f3 1f       	adc	r31, r19
    13a4:	80 81       	ld	r24, Z
    13a6:	88 23       	and	r24, r24
    13a8:	29 f4       	brne	.+10     	; 0x13b4 <Str_Compare+0x9a>
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	9f 83       	std	Y+7, r25	; 0x07
    13b0:	8e 83       	std	Y+6, r24	; 0x06
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <Str_Compare+0x9e>
    13b4:	1f 82       	std	Y+7, r1	; 0x07
    13b6:	1e 82       	std	Y+6, r1	; 0x06
    13b8:	8e 81       	ldd	r24, Y+6	; 0x06
}
    13ba:	27 96       	adiw	r28, 0x07	; 7
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <GSM_vidRecieveString>:

static void GSM_vidRecieveString(int8 uint8Data[], uint8* length)
{
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	00 d0       	rcall	.+0      	; 0x13d8 <GSM_vidRecieveString+0xc>
    13d8:	00 d0       	rcall	.+0      	; 0x13da <GSM_vidRecieveString+0xe>
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	9a 83       	std	Y+2, r25	; 0x02
    13e0:	89 83       	std	Y+1, r24	; 0x01
    13e2:	7c 83       	std	Y+4, r23	; 0x04
    13e4:	6b 83       	std	Y+3, r22	; 0x03
	*length=0;
    13e6:	eb 81       	ldd	r30, Y+3	; 0x03
    13e8:	fc 81       	ldd	r31, Y+4	; 0x04
    13ea:	10 82       	st	Z, r1
	do
	{
		uint8Data[(*length)++]=UART_u8RecieveChar();
    13ec:	eb 81       	ldd	r30, Y+3	; 0x03
    13ee:	fc 81       	ldd	r31, Y+4	; 0x04
    13f0:	f0 80       	ld	r15, Z
    13f2:	2f 2d       	mov	r18, r15
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	8c 01       	movw	r16, r24
    13fc:	02 0f       	add	r16, r18
    13fe:	13 1f       	adc	r17, r19
    1400:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
    1404:	f8 01       	movw	r30, r16
    1406:	80 83       	st	Z, r24
    1408:	8f 2d       	mov	r24, r15
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	eb 81       	ldd	r30, Y+3	; 0x03
    140e:	fc 81       	ldd	r31, Y+4	; 0x04
    1410:	80 83       	st	Z, r24
	}
	while((uint8Data[(*length)-1])&&(uint8Data[(*length)-1]!='\n')&&(uint8Data[(*length)-1]!='>'));
    1412:	eb 81       	ldd	r30, Y+3	; 0x03
    1414:	fc 81       	ldd	r31, Y+4	; 0x04
    1416:	80 81       	ld	r24, Z
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 01       	movw	r18, r24
    141e:	21 50       	subi	r18, 0x01	; 1
    1420:	30 40       	sbci	r19, 0x00	; 0
    1422:	89 81       	ldd	r24, Y+1	; 0x01
    1424:	9a 81       	ldd	r25, Y+2	; 0x02
    1426:	fc 01       	movw	r30, r24
    1428:	e2 0f       	add	r30, r18
    142a:	f3 1f       	adc	r31, r19
    142c:	80 81       	ld	r24, Z
    142e:	88 23       	and	r24, r24
    1430:	09 f1       	breq	.+66     	; 0x1474 <GSM_vidRecieveString+0xa8>
    1432:	eb 81       	ldd	r30, Y+3	; 0x03
    1434:	fc 81       	ldd	r31, Y+4	; 0x04
    1436:	80 81       	ld	r24, Z
    1438:	88 2f       	mov	r24, r24
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9c 01       	movw	r18, r24
    143e:	21 50       	subi	r18, 0x01	; 1
    1440:	30 40       	sbci	r19, 0x00	; 0
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	fc 01       	movw	r30, r24
    1448:	e2 0f       	add	r30, r18
    144a:	f3 1f       	adc	r31, r19
    144c:	80 81       	ld	r24, Z
    144e:	8a 30       	cpi	r24, 0x0A	; 10
    1450:	89 f0       	breq	.+34     	; 0x1474 <GSM_vidRecieveString+0xa8>
    1452:	eb 81       	ldd	r30, Y+3	; 0x03
    1454:	fc 81       	ldd	r31, Y+4	; 0x04
    1456:	80 81       	ld	r24, Z
    1458:	88 2f       	mov	r24, r24
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	9c 01       	movw	r18, r24
    145e:	21 50       	subi	r18, 0x01	; 1
    1460:	30 40       	sbci	r19, 0x00	; 0
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	9a 81       	ldd	r25, Y+2	; 0x02
    1466:	fc 01       	movw	r30, r24
    1468:	e2 0f       	add	r30, r18
    146a:	f3 1f       	adc	r31, r19
    146c:	80 81       	ld	r24, Z
    146e:	8e 33       	cpi	r24, 0x3E	; 62
    1470:	09 f0       	breq	.+2      	; 0x1474 <GSM_vidRecieveString+0xa8>
    1472:	bc cf       	rjmp	.-136    	; 0x13ec <GSM_vidRecieveString+0x20>
	uint8Data[(*length)]=0;
    1474:	eb 81       	ldd	r30, Y+3	; 0x03
    1476:	fc 81       	ldd	r31, Y+4	; 0x04
    1478:	80 81       	ld	r24, Z
    147a:	28 2f       	mov	r18, r24
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	fc 01       	movw	r30, r24
    1484:	e2 0f       	add	r30, r18
    1486:	f3 1f       	adc	r31, r19
    1488:	10 82       	st	Z, r1
}
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	0f 90       	pop	r0
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	1f 91       	pop	r17
    1498:	0f 91       	pop	r16
    149a:	ff 90       	pop	r15
    149c:	08 95       	ret

0000149e <GSMsend_to_modem>:


uint8 GSMsend_to_modem(int8 sa[])   //function to write anything serially
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <GSMsend_to_modem+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <GSMsend_to_modem+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03

	uint8 f=1 ;
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0 ;
    14b2:	19 82       	std	Y+1, r1	; 0x01
    14b4:	34 c0       	rjmp	.+104    	; 0x151e <GSMsend_to_modem+0x80>
//	UART_u8GetUdr();


	while(f&&sa[i])
	{
		UART_vidSendChar(sa[i]);
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	9c 81       	ldd	r25, Y+4	; 0x04
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	80 81       	ld	r24, Z
    14c8:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
		if (sa[i]!=Terminator)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	fc 01       	movw	r30, r24
    14d8:	e2 0f       	add	r30, r18
    14da:	f3 1f       	adc	r31, r19
    14dc:	90 81       	ld	r25, Z
    14de:	80 91 34 01 	lds	r24, 0x0134
    14e2:	98 17       	cp	r25, r24
    14e4:	a9 f0       	breq	.+42     	; 0x1510 <GSMsend_to_modem+0x72>
			f = (UART_u8RecieveChar()==sa[i++]);
    14e6:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
    14ea:	48 2f       	mov	r20, r24
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	fc 01       	movw	r30, r24
    14f8:	e2 0f       	add	r30, r18
    14fa:	f3 1f       	adc	r31, r19
    14fc:	80 81       	ld	r24, Z
    14fe:	1a 82       	std	Y+2, r1	; 0x02
    1500:	48 17       	cp	r20, r24
    1502:	11 f4       	brne	.+4      	; 0x1508 <GSMsend_to_modem+0x6a>
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	07 c0       	rjmp	.+14     	; 0x151e <GSMsend_to_modem+0x80>
		else
			f = (UART_u8RecieveChar()=='\r');
    1510:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
    1514:	1a 82       	std	Y+2, r1	; 0x02
    1516:	8d 30       	cpi	r24, 0x0D	; 13
    1518:	11 f4       	brne	.+4      	; 0x151e <GSMsend_to_modem+0x80>
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 f=1 ;
	uint8 i=0 ;
//	UART_u8GetUdr();


	while(f&&sa[i])
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 23       	and	r24, r24
    1522:	61 f0       	breq	.+24     	; 0x153c <GSMsend_to_modem+0x9e>
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	fc 01       	movw	r30, r24
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	80 81       	ld	r24, Z
    1536:	88 23       	and	r24, r24
    1538:	09 f0       	breq	.+2      	; 0x153c <GSMsend_to_modem+0x9e>
    153a:	bd cf       	rjmp	.-134    	; 0x14b6 <GSMsend_to_modem+0x18>
			f = (UART_u8RecieveChar()==sa[i++]);
		else
			f = (UART_u8RecieveChar()=='\r');
	}

	return f;
    153c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	cf 91       	pop	r28
    1548:	df 91       	pop	r29
    154a:	08 95       	ret

0000154c <GSM_vidInit>:

void GSM_vidInit()
{
    154c:	df 93       	push	r29
    154e:	cf 93       	push	r28
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    1554:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <DIO_vidInit>
	DIO_u8SetPinDir(Selector,OUTPUT);
    1558:	80 e1       	ldi	r24, 0x10	; 16
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
	UART_vidInit();
    1560:	0e 94 49 00 	call	0x92	; 0x92 <UART_vidInit>
	DIO_u8SetPinDir(RXD,OUTPUT);
    1564:	88 e1       	ldi	r24, 0x18	; 24
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(TXD,INPUT_PULLUP);
    156c:	89 e1       	ldi	r24, 0x19	; 25
    156e:	62 e0       	ldi	r22, 0x02	; 2
    1570:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>

}
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <GSM_u8Startup>:

uint8 GSM_u8Startup()
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	2b 97       	sbiw	r28, 0x0b	; 11
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
	int8 Buffer[10]={0};
    158e:	8a e0       	ldi	r24, 0x0A	; 10
    1590:	fe 01       	movw	r30, r28
    1592:	31 96       	adiw	r30, 0x01	; 1
    1594:	df 01       	movw	r26, r30
    1596:	98 2f       	mov	r25, r24
    1598:	1d 92       	st	X+, r1
    159a:	9a 95       	dec	r25
    159c:	e9 f7       	brne	.-6      	; 0x1598 <GSM_u8Startup+0x1e>
	uint8  Len=0;
    159e:	1b 86       	std	Y+11, r1	; 0x0b

	while(! GSMsend_to_modem(AT));
    15a0:	80 e2       	ldi	r24, 0x20	; 32
    15a2:	91 e0       	ldi	r25, 0x01	; 1
    15a4:	0e 94 4f 0a 	call	0x149e	; 0x149e <GSMsend_to_modem>
    15a8:	88 23       	and	r24, r24
    15aa:	d1 f3       	breq	.-12     	; 0x15a0 <GSM_u8Startup+0x26>
	GSM_vidRecieveString(Buffer,&Len);
    15ac:	9e 01       	movw	r18, r28
    15ae:	25 5f       	subi	r18, 0xF5	; 245
    15b0:	3f 4f       	sbci	r19, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	b9 01       	movw	r22, r18
    15b8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GSM_vidRecieveString>

	//compare between recieved and ok
	return Str_Compare(OK,Buffer);
    15bc:	84 e2       	ldi	r24, 0x24	; 36
    15be:	91 e0       	ldi	r25, 0x01	; 1
    15c0:	9e 01       	movw	r18, r28
    15c2:	2f 5f       	subi	r18, 0xFF	; 255
    15c4:	3f 4f       	sbci	r19, 0xFF	; 255
    15c6:	b9 01       	movw	r22, r18
    15c8:	0e 94 8d 09 	call	0x131a	; 0x131a <Str_Compare>



}
    15cc:	2b 96       	adiw	r28, 0x0b	; 11
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	de bf       	out	0x3e, r29	; 62
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	cf 91       	pop	r28
    15da:	df 91       	pop	r29
    15dc:	08 95       	ret

000015de <GSM_vidSendSMS>:
uint8 GSM_vidSendSMS(int8  SMS[],int8  Num[] )
{
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	cd b7       	in	r28, 0x3d	; 61
    15e4:	de b7       	in	r29, 0x3e	; 62
    15e6:	a7 97       	sbiw	r28, 0x27	; 39
    15e8:	0f b6       	in	r0, 0x3f	; 63
    15ea:	f8 94       	cli
    15ec:	de bf       	out	0x3e, r29	; 62
    15ee:	0f be       	out	0x3f, r0	; 63
    15f0:	cd bf       	out	0x3d, r28	; 61
    15f2:	9b 8f       	std	Y+27, r25	; 0x1b
    15f4:	8a 8f       	std	Y+26, r24	; 0x1a
    15f6:	7d 8f       	std	Y+29, r23	; 0x1d
    15f8:	6c 8f       	std	Y+28, r22	; 0x1c

	uint8 u8Flag=1,LEN;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
	int8 Buffer[10]={0};
    15fe:	8a e0       	ldi	r24, 0x0A	; 10
    1600:	fe 01       	movw	r30, r28
    1602:	33 96       	adiw	r30, 0x03	; 3
    1604:	df 01       	movw	r26, r30
    1606:	98 2f       	mov	r25, r24
    1608:	1d 92       	st	X+, r1
    160a:	9a 95       	dec	r25
    160c:	e9 f7       	brne	.-6      	; 0x1608 <GSM_vidSendSMS+0x2a>
	u8Flag=GSMsend_to_modem(Text_Mode);
    160e:	89 e2       	ldi	r24, 0x29	; 41
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	0e 94 4f 0a 	call	0x149e	; 0x149e <GSMsend_to_modem>
    1616:	89 83       	std	Y+1, r24	; 0x01
	GSM_vidRecieveString(Buffer,&LEN);
    1618:	ce 01       	movw	r24, r28
    161a:	03 96       	adiw	r24, 0x03	; 3
    161c:	9e 01       	movw	r18, r28
    161e:	2e 5f       	subi	r18, 0xFE	; 254
    1620:	3f 4f       	sbci	r19, 0xFF	; 255
    1622:	b9 01       	movw	r22, r18
    1624:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GSM_vidRecieveString>

	int8 Message_Command1[] = "AT+CMGS=\"";
    1628:	de 01       	movw	r26, r28
    162a:	1d 96       	adiw	r26, 0x0d	; 13
    162c:	bf 8f       	std	Y+31, r27	; 0x1f
    162e:	ae 8f       	std	Y+30, r26	; 0x1e
    1630:	e7 e6       	ldi	r30, 0x67	; 103
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	f9 a3       	std	Y+33, r31	; 0x21
    1636:	e8 a3       	std	Y+32, r30	; 0x20
    1638:	fa e0       	ldi	r31, 0x0A	; 10
    163a:	fa a3       	std	Y+34, r31	; 0x22
    163c:	a8 a1       	ldd	r26, Y+32	; 0x20
    163e:	b9 a1       	ldd	r27, Y+33	; 0x21
    1640:	0c 90       	ld	r0, X
    1642:	e8 a1       	ldd	r30, Y+32	; 0x20
    1644:	f9 a1       	ldd	r31, Y+33	; 0x21
    1646:	31 96       	adiw	r30, 0x01	; 1
    1648:	f9 a3       	std	Y+33, r31	; 0x21
    164a:	e8 a3       	std	Y+32, r30	; 0x20
    164c:	ae 8d       	ldd	r26, Y+30	; 0x1e
    164e:	bf 8d       	ldd	r27, Y+31	; 0x1f
    1650:	0c 92       	st	X, r0
    1652:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1654:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1656:	31 96       	adiw	r30, 0x01	; 1
    1658:	ff 8f       	std	Y+31, r31	; 0x1f
    165a:	ee 8f       	std	Y+30, r30	; 0x1e
    165c:	fa a1       	ldd	r31, Y+34	; 0x22
    165e:	f1 50       	subi	r31, 0x01	; 1
    1660:	fa a3       	std	Y+34, r31	; 0x22
    1662:	8a a1       	ldd	r24, Y+34	; 0x22
    1664:	88 23       	and	r24, r24
    1666:	51 f7       	brne	.-44     	; 0x163c <GSM_vidSendSMS+0x5e>
	int8 Message_Command2[] = "\"\r";
    1668:	de 01       	movw	r26, r28
    166a:	57 96       	adiw	r26, 0x17	; 23
    166c:	bc a3       	std	Y+36, r27	; 0x24
    166e:	ab a3       	std	Y+35, r26	; 0x23
    1670:	e1 e7       	ldi	r30, 0x71	; 113
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	fe a3       	std	Y+38, r31	; 0x26
    1676:	ed a3       	std	Y+37, r30	; 0x25
    1678:	f3 e0       	ldi	r31, 0x03	; 3
    167a:	ff a3       	std	Y+39, r31	; 0x27
    167c:	ad a1       	ldd	r26, Y+37	; 0x25
    167e:	be a1       	ldd	r27, Y+38	; 0x26
    1680:	0c 90       	ld	r0, X
    1682:	ed a1       	ldd	r30, Y+37	; 0x25
    1684:	fe a1       	ldd	r31, Y+38	; 0x26
    1686:	31 96       	adiw	r30, 0x01	; 1
    1688:	fe a3       	std	Y+38, r31	; 0x26
    168a:	ed a3       	std	Y+37, r30	; 0x25
    168c:	ab a1       	ldd	r26, Y+35	; 0x23
    168e:	bc a1       	ldd	r27, Y+36	; 0x24
    1690:	0c 92       	st	X, r0
    1692:	eb a1       	ldd	r30, Y+35	; 0x23
    1694:	fc a1       	ldd	r31, Y+36	; 0x24
    1696:	31 96       	adiw	r30, 0x01	; 1
    1698:	fc a3       	std	Y+36, r31	; 0x24
    169a:	eb a3       	std	Y+35, r30	; 0x23
    169c:	ff a1       	ldd	r31, Y+39	; 0x27
    169e:	f1 50       	subi	r31, 0x01	; 1
    16a0:	ff a3       	std	Y+39, r31	; 0x27
    16a2:	8f a1       	ldd	r24, Y+39	; 0x27
    16a4:	88 23       	and	r24, r24
    16a6:	51 f7       	brne	.-44     	; 0x167c <GSM_vidSendSMS+0x9e>
	u8Flag = Str_Compare(Buffer,OK);
    16a8:	ce 01       	movw	r24, r28
    16aa:	03 96       	adiw	r24, 0x03	; 3
    16ac:	24 e2       	ldi	r18, 0x24	; 36
    16ae:	31 e0       	ldi	r19, 0x01	; 1
    16b0:	b9 01       	movw	r22, r18
    16b2:	0e 94 8d 09 	call	0x131a	; 0x131a <Str_Compare>
    16b6:	89 83       	std	Y+1, r24	; 0x01

	if(u8Flag)
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	88 23       	and	r24, r24
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <GSM_vidSendSMS+0xe2>
    16be:	5a c0       	rjmp	.+180    	; 0x1774 <GSM_vidSendSMS+0x196>
	{
		u8Flag&=GSMsend_to_modem(Message_Command1);
    16c0:	ce 01       	movw	r24, r28
    16c2:	0d 96       	adiw	r24, 0x0d	; 13
    16c4:	0e 94 4f 0a 	call	0x149e	; 0x149e <GSMsend_to_modem>
    16c8:	98 2f       	mov	r25, r24
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	89 23       	and	r24, r25
    16ce:	89 83       	std	Y+1, r24	; 0x01
		u8Flag&=GSMsend_to_modem(Num);
    16d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16d4:	0e 94 4f 0a 	call	0x149e	; 0x149e <GSMsend_to_modem>
    16d8:	98 2f       	mov	r25, r24
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	89 23       	and	r24, r25
    16de:	89 83       	std	Y+1, r24	; 0x01
		u8Flag&=GSMsend_to_modem(Message_Command2);
    16e0:	ce 01       	movw	r24, r28
    16e2:	47 96       	adiw	r24, 0x17	; 23
    16e4:	0e 94 4f 0a 	call	0x149e	; 0x149e <GSMsend_to_modem>
    16e8:	98 2f       	mov	r25, r24
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	89 23       	and	r24, r25
    16ee:	89 83       	std	Y+1, r24	; 0x01
		GSM_vidRecieveString(Buffer,&LEN);
    16f0:	ce 01       	movw	r24, r28
    16f2:	03 96       	adiw	r24, 0x03	; 3
    16f4:	9e 01       	movw	r18, r28
    16f6:	2e 5f       	subi	r18, 0xFE	; 254
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	b9 01       	movw	r22, r18
    16fc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GSM_vidRecieveString>
		u8Flag&= Str_Compare(Buffer,">");
    1700:	ce 01       	movw	r24, r28
    1702:	03 96       	adiw	r24, 0x03	; 3
    1704:	20 e6       	ldi	r18, 0x60	; 96
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	b9 01       	movw	r22, r18
    170a:	0e 94 8d 09 	call	0x131a	; 0x131a <Str_Compare>
    170e:	98 2f       	mov	r25, r24
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	89 23       	and	r24, r25
    1714:	89 83       	std	Y+1, r24	; 0x01

		u8Flag&= GSMsend_to_modem(SMS);
    1716:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1718:	9b 8d       	ldd	r25, Y+27	; 0x1b
    171a:	0e 94 4f 0a 	call	0x149e	; 0x149e <GSMsend_to_modem>
    171e:	98 2f       	mov	r25, r24
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	89 23       	and	r24, r25
    1724:	89 83       	std	Y+1, r24	; 0x01
		UART_vidSendChar(Terminator);
    1726:	80 91 34 01 	lds	r24, 0x0134
    172a:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>

		GSM_vidRecieveString(Buffer,&LEN); // \r of terminator
    172e:	ce 01       	movw	r24, r28
    1730:	03 96       	adiw	r24, 0x03	; 3
    1732:	9e 01       	movw	r18, r28
    1734:	2e 5f       	subi	r18, 0xFE	; 254
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	b9 01       	movw	r22, r18
    173a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GSM_vidRecieveString>
		GSM_vidRecieveString(Buffer,&LEN); // +cmgs:xx
    173e:	ce 01       	movw	r24, r28
    1740:	03 96       	adiw	r24, 0x03	; 3
    1742:	9e 01       	movw	r18, r28
    1744:	2e 5f       	subi	r18, 0xFE	; 254
    1746:	3f 4f       	sbci	r19, 0xFF	; 255
    1748:	b9 01       	movw	r22, r18
    174a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GSM_vidRecieveString>
		GSM_vidRecieveString(Buffer,&LEN); // ok
    174e:	ce 01       	movw	r24, r28
    1750:	03 96       	adiw	r24, 0x03	; 3
    1752:	9e 01       	movw	r18, r28
    1754:	2e 5f       	subi	r18, 0xFE	; 254
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	b9 01       	movw	r22, r18
    175a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <GSM_vidRecieveString>
		u8Flag&= Str_Compare(Buffer,"OK\r\n");
    175e:	ce 01       	movw	r24, r28
    1760:	03 96       	adiw	r24, 0x03	; 3
    1762:	22 e6       	ldi	r18, 0x62	; 98
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	b9 01       	movw	r22, r18
    1768:	0e 94 8d 09 	call	0x131a	; 0x131a <Str_Compare>
    176c:	98 2f       	mov	r25, r24
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	89 23       	and	r24, r25
    1772:	89 83       	std	Y+1, r24	; 0x01

	}
	return u8Flag;
    1774:	89 81       	ldd	r24, Y+1	; 0x01
}
    1776:	a7 96       	adiw	r28, 0x27	; 39
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	f8 94       	cli
    177c:	de bf       	out	0x3e, r29	; 62
    177e:	0f be       	out	0x3f, r0	; 63
    1780:	cd bf       	out	0x3d, r28	; 61
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <GSM_vidSelect>:

void GSM_vidSelect()
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8WritePin(Selector,Select_GSM);
    1790:	80 e1       	ldi	r24, 0x10	; 16
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
}
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <GPS_vidInit>:
static GPS   Data;
static uint8 GPS_Status=GPS_OutDated;


void GPS_vidInit ()
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(Selector,OUTPUT);
    17a6:	80 e1       	ldi	r24, 0x10	; 16
    17a8:	61 e0       	ldi	r22, 0x01	; 1
    17aa:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(RXD,OUTPUT);
    17ae:	88 e1       	ldi	r24, 0x18	; 24
    17b0:	61 e0       	ldi	r22, 0x01	; 1
    17b2:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
	DIO_u8SetPinDir(TXD,INPUT_PULLUP);
    17b6:	89 e1       	ldi	r24, 0x19	; 25
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <DIO_u8SetPinDir>
	UART_vidInit();
    17be:	0e 94 49 00 	call	0x92	; 0x92 <UART_vidInit>
}
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <GPS_vidTask>:
void GPS_vidTask ()
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	27 97       	sbiw	r28, 0x07	; 7
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
	static  uint8 u8State=0,	u8Counter=0,	GPGGA[8]="$GPGGA,";
	if (UART_u8DataReady())
    17dc:	0e 94 9b 00 	call	0x136	; 0x136 <UART_u8DataReady>
    17e0:	88 23       	and	r24, r24
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <GPS_vidTask+0x1e>
    17e4:	1e c1       	rjmp	.+572    	; 0x1a22 <GPS_vidTask+0x25a>
	{
		uint8 u8RxData=UART_u8GetUdr();
    17e6:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_u8GetUdr>
    17ea:	89 83       	std	Y+1, r24	; 0x01

		if (GPS_Status<GPS_UpToDate)
    17ec:	80 91 a6 01 	lds	r24, 0x01A6
    17f0:	82 30       	cpi	r24, 0x02	; 2
    17f2:	08 f0       	brcs	.+2      	; 0x17f6 <GPS_vidTask+0x2e>
    17f4:	16 c1       	rjmp	.+556    	; 0x1a22 <GPS_vidTask+0x25a>
		{
			switch (u8State)
    17f6:	80 91 a8 01 	lds	r24, 0x01A8
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	3f 83       	std	Y+7, r19	; 0x07
    1800:	2e 83       	std	Y+6, r18	; 0x06
    1802:	8e 81       	ldd	r24, Y+6	; 0x06
    1804:	9f 81       	ldd	r25, Y+7	; 0x07
    1806:	83 30       	cpi	r24, 0x03	; 3
    1808:	91 05       	cpc	r25, r1
    180a:	09 f4       	brne	.+2      	; 0x180e <GPS_vidTask+0x46>
    180c:	67 c0       	rjmp	.+206    	; 0x18dc <GPS_vidTask+0x114>
    180e:	2e 81       	ldd	r18, Y+6	; 0x06
    1810:	3f 81       	ldd	r19, Y+7	; 0x07
    1812:	24 30       	cpi	r18, 0x04	; 4
    1814:	31 05       	cpc	r19, r1
    1816:	5c f4       	brge	.+22     	; 0x182e <GPS_vidTask+0x66>
    1818:	8e 81       	ldd	r24, Y+6	; 0x06
    181a:	9f 81       	ldd	r25, Y+7	; 0x07
    181c:	81 30       	cpi	r24, 0x01	; 1
    181e:	91 05       	cpc	r25, r1
    1820:	c9 f0       	breq	.+50     	; 0x1854 <GPS_vidTask+0x8c>
    1822:	2e 81       	ldd	r18, Y+6	; 0x06
    1824:	3f 81       	ldd	r19, Y+7	; 0x07
    1826:	22 30       	cpi	r18, 0x02	; 2
    1828:	31 05       	cpc	r19, r1
    182a:	b1 f1       	breq	.+108    	; 0x1898 <GPS_vidTask+0xd0>
    182c:	d3 c0       	rjmp	.+422    	; 0x19d4 <GPS_vidTask+0x20c>
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	9f 81       	ldd	r25, Y+7	; 0x07
    1832:	85 30       	cpi	r24, 0x05	; 5
    1834:	91 05       	cpc	r25, r1
    1836:	09 f4       	brne	.+2      	; 0x183a <GPS_vidTask+0x72>
    1838:	92 c0       	rjmp	.+292    	; 0x195e <GPS_vidTask+0x196>
    183a:	2e 81       	ldd	r18, Y+6	; 0x06
    183c:	3f 81       	ldd	r19, Y+7	; 0x07
    183e:	25 30       	cpi	r18, 0x05	; 5
    1840:	31 05       	cpc	r19, r1
    1842:	0c f4       	brge	.+2      	; 0x1846 <GPS_vidTask+0x7e>
    1844:	6a c0       	rjmp	.+212    	; 0x191a <GPS_vidTask+0x152>
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	86 30       	cpi	r24, 0x06	; 6
    184c:	91 05       	cpc	r25, r1
    184e:	09 f4       	brne	.+2      	; 0x1852 <GPS_vidTask+0x8a>
    1850:	a5 c0       	rjmp	.+330    	; 0x199c <GPS_vidTask+0x1d4>
    1852:	c0 c0       	rjmp	.+384    	; 0x19d4 <GPS_vidTask+0x20c>
			{
			case 1:
				if (u8RxData==',')
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	8c 32       	cpi	r24, 0x2C	; 44
    1858:	89 f4       	brne	.+34     	; 0x187c <GPS_vidTask+0xb4>
				{
					Data.UTC[u8Counter]=0;
    185a:	80 91 a7 01 	lds	r24, 0x01A7
    185e:	88 2f       	mov	r24, r24
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	fc 01       	movw	r30, r24
    1864:	e7 55       	subi	r30, 0x57	; 87
    1866:	fe 4f       	sbci	r31, 0xFE	; 254
    1868:	10 82       	st	Z, r1
					u8State=2;
    186a:	82 e0       	ldi	r24, 0x02	; 2
    186c:	80 93 a8 01 	sts	0x01A8, r24
					u8Counter=0;
    1870:	10 92 a7 01 	sts	0x01A7, r1
					GPS_Status = GPS_UpDating;
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	80 93 a6 01 	sts	0x01A6, r24
    187a:	d3 c0       	rjmp	.+422    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.UTC[u8Counter++]=u8RxData;
    187c:	20 91 a7 01 	lds	r18, 0x01A7
    1880:	82 2f       	mov	r24, r18
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	fc 01       	movw	r30, r24
    1886:	e7 55       	subi	r30, 0x57	; 87
    1888:	fe 4f       	sbci	r31, 0xFE	; 254
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	80 83       	st	Z, r24
    188e:	82 2f       	mov	r24, r18
    1890:	8f 5f       	subi	r24, 0xFF	; 255
    1892:	80 93 a7 01 	sts	0x01A7, r24
    1896:	c5 c0       	rjmp	.+394    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				break;
			case 2:
				if (u8RxData==',')
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	8c 32       	cpi	r24, 0x2C	; 44
    189c:	89 f4       	brne	.+34     	; 0x18c0 <GPS_vidTask+0xf8>
				{
					Data.LAT[u8Counter++]=',';
    189e:	20 91 a7 01 	lds	r18, 0x01A7
    18a2:	82 2f       	mov	r24, r18
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	fc 01       	movw	r30, r24
    18a8:	e8 54       	subi	r30, 0x48	; 72
    18aa:	fe 4f       	sbci	r31, 0xFE	; 254
    18ac:	8c e2       	ldi	r24, 0x2C	; 44
    18ae:	80 83       	st	Z, r24
    18b0:	82 2f       	mov	r24, r18
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	80 93 a7 01 	sts	0x01A7, r24
					u8State=3;
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	80 93 a8 01 	sts	0x01A8, r24
    18be:	b1 c0       	rjmp	.+354    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LAT[u8Counter++]=u8RxData;
    18c0:	20 91 a7 01 	lds	r18, 0x01A7
    18c4:	82 2f       	mov	r24, r18
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	fc 01       	movw	r30, r24
    18ca:	e8 54       	subi	r30, 0x48	; 72
    18cc:	fe 4f       	sbci	r31, 0xFE	; 254
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	80 83       	st	Z, r24
    18d2:	82 2f       	mov	r24, r18
    18d4:	8f 5f       	subi	r24, 0xFF	; 255
    18d6:	80 93 a7 01 	sts	0x01A7, r24
    18da:	a3 c0       	rjmp	.+326    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				break;
			case 3:
				if (u8RxData==',')
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8c 32       	cpi	r24, 0x2C	; 44
    18e0:	71 f4       	brne	.+28     	; 0x18fe <GPS_vidTask+0x136>
				{
					Data.LAT[u8Counter]=0;
    18e2:	80 91 a7 01 	lds	r24, 0x01A7
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	fc 01       	movw	r30, r24
    18ec:	e8 54       	subi	r30, 0x48	; 72
    18ee:	fe 4f       	sbci	r31, 0xFE	; 254
    18f0:	10 82       	st	Z, r1
					u8State=4;
    18f2:	84 e0       	ldi	r24, 0x04	; 4
    18f4:	80 93 a8 01 	sts	0x01A8, r24
					u8Counter=0;
    18f8:	10 92 a7 01 	sts	0x01A7, r1
    18fc:	92 c0       	rjmp	.+292    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LAT[u8Counter++]=u8RxData;
    18fe:	20 91 a7 01 	lds	r18, 0x01A7
    1902:	82 2f       	mov	r24, r18
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	fc 01       	movw	r30, r24
    1908:	e8 54       	subi	r30, 0x48	; 72
    190a:	fe 4f       	sbci	r31, 0xFE	; 254
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	80 83       	st	Z, r24
    1910:	82 2f       	mov	r24, r18
    1912:	8f 5f       	subi	r24, 0xFF	; 255
    1914:	80 93 a7 01 	sts	0x01A7, r24
    1918:	84 c0       	rjmp	.+264    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				break;
			case 4:
				if (u8RxData==',')
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	8c 32       	cpi	r24, 0x2C	; 44
    191e:	89 f4       	brne	.+34     	; 0x1942 <GPS_vidTask+0x17a>
				{
					Data.LON[u8Counter++]=',';
    1920:	20 91 a7 01 	lds	r18, 0x01A7
    1924:	82 2f       	mov	r24, r18
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	fc 01       	movw	r30, r24
    192a:	eb 53       	subi	r30, 0x3B	; 59
    192c:	fe 4f       	sbci	r31, 0xFE	; 254
    192e:	8c e2       	ldi	r24, 0x2C	; 44
    1930:	80 83       	st	Z, r24
    1932:	82 2f       	mov	r24, r18
    1934:	8f 5f       	subi	r24, 0xFF	; 255
    1936:	80 93 a7 01 	sts	0x01A7, r24
					u8State=5;
    193a:	85 e0       	ldi	r24, 0x05	; 5
    193c:	80 93 a8 01 	sts	0x01A8, r24
    1940:	70 c0       	rjmp	.+224    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LON[u8Counter++]=u8RxData;
    1942:	20 91 a7 01 	lds	r18, 0x01A7
    1946:	82 2f       	mov	r24, r18
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	fc 01       	movw	r30, r24
    194c:	eb 53       	subi	r30, 0x3B	; 59
    194e:	fe 4f       	sbci	r31, 0xFE	; 254
    1950:	89 81       	ldd	r24, Y+1	; 0x01
    1952:	80 83       	st	Z, r24
    1954:	82 2f       	mov	r24, r18
    1956:	8f 5f       	subi	r24, 0xFF	; 255
    1958:	80 93 a7 01 	sts	0x01A7, r24
    195c:	62 c0       	rjmp	.+196    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				break;
			case 5:
				if (u8RxData==',')
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	8c 32       	cpi	r24, 0x2C	; 44
    1962:	71 f4       	brne	.+28     	; 0x1980 <GPS_vidTask+0x1b8>
				{
					Data.LON[u8Counter]=0;
    1964:	80 91 a7 01 	lds	r24, 0x01A7
    1968:	88 2f       	mov	r24, r24
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	fc 01       	movw	r30, r24
    196e:	eb 53       	subi	r30, 0x3B	; 59
    1970:	fe 4f       	sbci	r31, 0xFE	; 254
    1972:	10 82       	st	Z, r1
					u8State=6;
    1974:	86 e0       	ldi	r24, 0x06	; 6
    1976:	80 93 a8 01 	sts	0x01A8, r24
					u8Counter=0;
    197a:	10 92 a7 01 	sts	0x01A7, r1
    197e:	51 c0       	rjmp	.+162    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LON[u8Counter++]=u8RxData;
    1980:	20 91 a7 01 	lds	r18, 0x01A7
    1984:	82 2f       	mov	r24, r18
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	fc 01       	movw	r30, r24
    198a:	eb 53       	subi	r30, 0x3B	; 59
    198c:	fe 4f       	sbci	r31, 0xFE	; 254
    198e:	89 81       	ldd	r24, Y+1	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	82 2f       	mov	r24, r18
    1994:	8f 5f       	subi	r24, 0xFF	; 255
    1996:	80 93 a7 01 	sts	0x01A7, r24
    199a:	43 c0       	rjmp	.+134    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				break;
			case 6:
				if (u8RxData==',')
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	8c 32       	cpi	r24, 0x2C	; 44
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <GPS_vidTask+0x1ea>
				{
					u8State=0;
    19a2:	10 92 a8 01 	sts	0x01A8, r1
					GPS_Status=GPS_FreshData;
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	80 93 a6 01 	sts	0x01A6, r24
					u8Counter=0;
    19ac:	10 92 a7 01 	sts	0x01A7, r1
    19b0:	38 c0       	rjmp	.+112    	; 0x1a22 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.FIX=(u8RxData=='1'||u8RxData=='2');
    19b2:	89 81       	ldd	r24, Y+1	; 0x01
    19b4:	81 33       	cpi	r24, 0x31	; 49
    19b6:	19 f0       	breq	.+6      	; 0x19be <GPS_vidTask+0x1f6>
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	82 33       	cpi	r24, 0x32	; 50
    19bc:	29 f4       	brne	.+10     	; 0x19c8 <GPS_vidTask+0x200>
    19be:	21 e0       	ldi	r18, 0x01	; 1
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	3d 83       	std	Y+5, r19	; 0x05
    19c4:	2c 83       	std	Y+4, r18	; 0x04
    19c6:	02 c0       	rjmp	.+4      	; 0x19cc <GPS_vidTask+0x204>
    19c8:	1d 82       	std	Y+5, r1	; 0x05
    19ca:	1c 82       	std	Y+4, r1	; 0x04
    19cc:	8c 81       	ldd	r24, Y+4	; 0x04
    19ce:	80 93 d3 01 	sts	0x01D3, r24
    19d2:	27 c0       	rjmp	.+78     	; 0x1a22 <GPS_vidTask+0x25a>
				}
				break;
			default:
				if (u8Counter<7 )
    19d4:	80 91 a7 01 	lds	r24, 0x01A7
    19d8:	87 30       	cpi	r24, 0x07	; 7
    19da:	d0 f4       	brcc	.+52     	; 0x1a10 <GPS_vidTask+0x248>
				{
					if (u8RxData!=GPGGA[u8Counter++])
    19dc:	30 91 a7 01 	lds	r19, 0x01A7
    19e0:	3b 83       	std	Y+3, r19	; 0x03
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	82 2f       	mov	r24, r18
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	fc 01       	movw	r30, r24
    19ea:	eb 5c       	subi	r30, 0xCB	; 203
    19ec:	fe 4f       	sbci	r31, 0xFE	; 254
    19ee:	90 81       	ld	r25, Z
    19f0:	1a 82       	std	Y+2, r1	; 0x02
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	98 17       	cp	r25, r24
    19f6:	11 f0       	breq	.+4      	; 0x19fc <GPS_vidTask+0x234>
    19f8:	31 e0       	ldi	r19, 0x01	; 1
    19fa:	3a 83       	std	Y+2, r19	; 0x02
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	80 93 a7 01 	sts	0x01A7, r24
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	88 23       	and	r24, r24
    1a08:	61 f0       	breq	.+24     	; 0x1a22 <GPS_vidTask+0x25a>
					{
						u8Counter=0;
    1a0a:	10 92 a7 01 	sts	0x01A7, r1
    1a0e:	09 c0       	rjmp	.+18     	; 0x1a22 <GPS_vidTask+0x25a>
					}

				}
				else
				{
					Data.UTC[0]=u8RxData;
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	80 93 a9 01 	sts	0x01A9, r24
					u8Counter=1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	80 93 a7 01 	sts	0x01A7, r24
					u8State = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	80 93 a8 01 	sts	0x01A8, r24
				}
				break;
			}
		}
	}
}
    1a22:	27 96       	adiw	r28, 0x07	; 7
    1a24:	0f b6       	in	r0, 0x3f	; 63
    1a26:	f8 94       	cli
    1a28:	de bf       	out	0x3e, r29	; 62
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	cd bf       	out	0x3d, r28	; 61
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <GPS_u8GetData>:
GPS   GPS_u8GetData()
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	cd b7       	in	r28, 0x3d	; 61
    1a3a:	de b7       	in	r29, 0x3e	; 62
    1a3c:	27 97       	sbiw	r28, 0x07	; 7
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	9a 83       	std	Y+2, r25	; 0x02
    1a4a:	89 83       	std	Y+1, r24	; 0x01
	if (GPS_Status==GPS_FreshData)
    1a4c:	80 91 a6 01 	lds	r24, 0x01A6
    1a50:	83 30       	cpi	r24, 0x03	; 3
    1a52:	19 f4       	brne	.+6      	; 0x1a5a <GPS_u8GetData+0x26>
	{
		GPS_Status=GPS_UpToDate;
    1a54:	82 e0       	ldi	r24, 0x02	; 2
    1a56:	80 93 a6 01 	sts	0x01A6, r24
	}
	return Data;
    1a5a:	89 81       	ldd	r24, Y+1	; 0x01
    1a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
    1a62:	e9 ea       	ldi	r30, 0xA9	; 169
    1a64:	f1 e0       	ldi	r31, 0x01	; 1
    1a66:	fe 83       	std	Y+6, r31	; 0x06
    1a68:	ed 83       	std	Y+5, r30	; 0x05
    1a6a:	fb e2       	ldi	r31, 0x2B	; 43
    1a6c:	ff 83       	std	Y+7, r31	; 0x07
    1a6e:	ed 81       	ldd	r30, Y+5	; 0x05
    1a70:	fe 81       	ldd	r31, Y+6	; 0x06
    1a72:	00 80       	ld	r0, Z
    1a74:	8d 81       	ldd	r24, Y+5	; 0x05
    1a76:	9e 81       	ldd	r25, Y+6	; 0x06
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	9e 83       	std	Y+6, r25	; 0x06
    1a7c:	8d 83       	std	Y+5, r24	; 0x05
    1a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a80:	fc 81       	ldd	r31, Y+4	; 0x04
    1a82:	00 82       	st	Z, r0
    1a84:	8b 81       	ldd	r24, Y+3	; 0x03
    1a86:	9c 81       	ldd	r25, Y+4	; 0x04
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	9c 83       	std	Y+4, r25	; 0x04
    1a8c:	8b 83       	std	Y+3, r24	; 0x03
    1a8e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a90:	91 50       	subi	r25, 0x01	; 1
    1a92:	9f 83       	std	Y+7, r25	; 0x07
    1a94:	ef 81       	ldd	r30, Y+7	; 0x07
    1a96:	ee 23       	and	r30, r30
    1a98:	51 f7       	brne	.-44     	; 0x1a6e <GPS_u8GetData+0x3a>
}
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	27 96       	adiw	r28, 0x07	; 7
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	cf 91       	pop	r28
    1aac:	df 91       	pop	r29
    1aae:	08 95       	ret

00001ab0 <GPS_u8GetTime>:
uint8 GPS_u8GetTime(int8 UTC[])
{
    1ab0:	df 93       	push	r29
    1ab2:	cf 93       	push	r28
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <GPS_u8GetTime+0x6>
    1ab6:	0f 92       	push	r0
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	9b 83       	std	Y+3, r25	; 0x03
    1abe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8i;
	for (u8i=0;u8i<UTC_LENGTH;u8i++)
    1ac0:	19 82       	std	Y+1, r1	; 0x01
    1ac2:	13 c0       	rjmp	.+38     	; 0x1aea <GPS_u8GetTime+0x3a>
	{
		UTC[u8i]=Data.UTC[u8i];
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ace:	dc 01       	movw	r26, r24
    1ad0:	a2 0f       	add	r26, r18
    1ad2:	b3 1f       	adc	r27, r19
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	88 2f       	mov	r24, r24
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	fc 01       	movw	r30, r24
    1adc:	e7 55       	subi	r30, 0x57	; 87
    1ade:	fe 4f       	sbci	r31, 0xFE	; 254
    1ae0:	80 81       	ld	r24, Z
    1ae2:	8c 93       	st	X, r24
	return Data;
}
uint8 GPS_u8GetTime(int8 UTC[])
{
	uint8 u8i;
	for (u8i=0;u8i<UTC_LENGTH;u8i++)
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
    1ae6:	8f 5f       	subi	r24, 0xFF	; 255
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	8f 30       	cpi	r24, 0x0F	; 15
    1aee:	50 f3       	brcs	.-44     	; 0x1ac4 <GPS_u8GetTime+0x14>
	{
		UTC[u8i]=Data.UTC[u8i];
	}
	return Data.FIX;
    1af0:	80 91 d3 01 	lds	r24, 0x01D3
}
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <GPS_u8GetLat>:
uint8 GPS_u8GetLat(int8 LAT[])
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <GPS_u8GetLat+0x6>
    1b06:	0f 92       	push	r0
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	9b 83       	std	Y+3, r25	; 0x03
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8i;
	for (u8i=0;u8i<LAT_LENGTH;u8i++)
    1b10:	19 82       	std	Y+1, r1	; 0x01
    1b12:	13 c0       	rjmp	.+38     	; 0x1b3a <GPS_u8GetLat+0x3a>
	{
		LAT[u8i]=Data.LAT[u8i];
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b1e:	dc 01       	movw	r26, r24
    1b20:	a2 0f       	add	r26, r18
    1b22:	b3 1f       	adc	r27, r19
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e8 54       	subi	r30, 0x48	; 72
    1b2e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b30:	80 81       	ld	r24, Z
    1b32:	8c 93       	st	X, r24
	return Data.FIX;
}
uint8 GPS_u8GetLat(int8 LAT[])
{
	uint8 u8i;
	for (u8i=0;u8i<LAT_LENGTH;u8i++)
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	89 81       	ldd	r24, Y+1	; 0x01
    1b3c:	8d 30       	cpi	r24, 0x0D	; 13
    1b3e:	50 f3       	brcs	.-44     	; 0x1b14 <GPS_u8GetLat+0x14>
	{
		LAT[u8i]=Data.LAT[u8i];
	}
	return Data.FIX;
    1b40:	80 91 d3 01 	lds	r24, 0x01D3
}
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <GPS_u8GetLon>:
uint8 GPS_u8GetLon(int8 LON[])
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <GPS_u8GetLon+0x6>
    1b56:	0f 92       	push	r0
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	9b 83       	std	Y+3, r25	; 0x03
    1b5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8i;
	for (u8i=0;u8i<LON_LENGTH;u8i++)
    1b60:	19 82       	std	Y+1, r1	; 0x01
    1b62:	13 c0       	rjmp	.+38     	; 0x1b8a <GPS_u8GetLon+0x3a>
	{
		LON[u8i]=Data.LON[u8i];
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	28 2f       	mov	r18, r24
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6e:	dc 01       	movw	r26, r24
    1b70:	a2 0f       	add	r26, r18
    1b72:	b3 1f       	adc	r27, r19
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	88 2f       	mov	r24, r24
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	eb 53       	subi	r30, 0x3B	; 59
    1b7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1b80:	80 81       	ld	r24, Z
    1b82:	8c 93       	st	X, r24
	return Data.FIX;
}
uint8 GPS_u8GetLon(int8 LON[])
{
	uint8 u8i;
	for (u8i=0;u8i<LON_LENGTH;u8i++)
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	8f 5f       	subi	r24, 0xFF	; 255
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	8e 30       	cpi	r24, 0x0E	; 14
    1b8e:	50 f3       	brcs	.-44     	; 0x1b64 <GPS_u8GetLon+0x14>
	{
		LON[u8i]=Data.LON[u8i];
	}
	return Data.FIX;
    1b90:	80 91 d3 01 	lds	r24, 0x01D3
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <GPS_GetStatus>:
uint8 GPS_GetStatus()
{
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	return GPS_Status;
    1ba8:	80 91 a6 01 	lds	r24, 0x01A6
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <GPS_vidUpdate>:
void GPS_vidUpdate()
{
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
	GPS_Status = GPS_OutDated;
    1bba:	10 92 a6 01 	sts	0x01A6, r1
}
    1bbe:	cf 91       	pop	r28
    1bc0:	df 91       	pop	r29
    1bc2:	08 95       	ret

00001bc4 <GPS_READ>:



GPS GPS_READ ()
{
    1bc4:	df 93       	push	r29
    1bc6:	cf 93       	push	r28
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	29 97       	sbiw	r28, 0x09	; 9
    1bce:	0f b6       	in	r0, 0x3f	; 63
    1bd0:	f8 94       	cli
    1bd2:	de bf       	out	0x3e, r29	; 62
    1bd4:	0f be       	out	0x3f, r0	; 63
    1bd6:	cd bf       	out	0x3d, r28	; 61
    1bd8:	9c 83       	std	Y+4, r25	; 0x04
    1bda:	8b 83       	std	Y+3, r24	; 0x03
	uint16 dummy;
	GPS_Status = GPS_OutDated;
    1bdc:	10 92 a6 01 	sts	0x01A6, r1
    1be0:	04 c0       	rjmp	.+8      	; 0x1bea <GPS_READ+0x26>
	while(GPS_Status!=GPS_FreshData)
	{
		GPS_vidTask();
    1be2:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <GPS_vidTask>
		dummy=0;
    1be6:	1a 82       	std	Y+2, r1	; 0x02
    1be8:	19 82       	std	Y+1, r1	; 0x01

GPS GPS_READ ()
{
	uint16 dummy;
	GPS_Status = GPS_OutDated;
	while(GPS_Status!=GPS_FreshData)
    1bea:	80 91 a6 01 	lds	r24, 0x01A6
    1bee:	83 30       	cpi	r24, 0x03	; 3
    1bf0:	c1 f7       	brne	.-16     	; 0x1be2 <GPS_READ+0x1e>
		GPS_vidTask();
		dummy=0;

	}

	return Data;
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	9e 83       	std	Y+6, r25	; 0x06
    1bf8:	8d 83       	std	Y+5, r24	; 0x05
    1bfa:	e9 ea       	ldi	r30, 0xA9	; 169
    1bfc:	f1 e0       	ldi	r31, 0x01	; 1
    1bfe:	f8 87       	std	Y+8, r31	; 0x08
    1c00:	ef 83       	std	Y+7, r30	; 0x07
    1c02:	fb e2       	ldi	r31, 0x2B	; 43
    1c04:	f9 87       	std	Y+9, r31	; 0x09
    1c06:	ef 81       	ldd	r30, Y+7	; 0x07
    1c08:	f8 85       	ldd	r31, Y+8	; 0x08
    1c0a:	00 80       	ld	r0, Z
    1c0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0e:	98 85       	ldd	r25, Y+8	; 0x08
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	98 87       	std	Y+8, r25	; 0x08
    1c14:	8f 83       	std	Y+7, r24	; 0x07
    1c16:	ed 81       	ldd	r30, Y+5	; 0x05
    1c18:	fe 81       	ldd	r31, Y+6	; 0x06
    1c1a:	00 82       	st	Z, r0
    1c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	9e 83       	std	Y+6, r25	; 0x06
    1c24:	8d 83       	std	Y+5, r24	; 0x05
    1c26:	99 85       	ldd	r25, Y+9	; 0x09
    1c28:	91 50       	subi	r25, 0x01	; 1
    1c2a:	99 87       	std	Y+9, r25	; 0x09
    1c2c:	e9 85       	ldd	r30, Y+9	; 0x09
    1c2e:	ee 23       	and	r30, r30
    1c30:	51 f7       	brne	.-44     	; 0x1c06 <GPS_READ+0x42>

}
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	29 96       	adiw	r28, 0x09	; 9
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <GPS_vidDisAttach>:
void GPS_vidDisAttach ()
{
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	UART_u8RecieveChar();
    1c50:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
}
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <GPS_vidSelect>:
void GPS_vidSelect()
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
	DIO_u8WritePin(Selector,Select_GPS);
    1c62:	80 e1       	ldi	r24, 0x10	; 16
    1c64:	61 e0       	ldi	r22, 0x01	; 1
    1c66:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <DIO_u8WritePin>
}
    1c6a:	cf 91       	pop	r28
    1c6c:	df 91       	pop	r29
    1c6e:	08 95       	ret

00001c70 <DIO_vidInit>:


#include "DIO_LOCAL.h"

void DIO_vidInit (void)
{
    1c70:	df 93       	push	r29
    1c72:	cf 93       	push	r28
    1c74:	cd b7       	in	r28, 0x3d	; 61
    1c76:	de b7       	in	r29, 0x3e	; 62
	//DIO Initialization function

}
    1c78:	cf 91       	pop	r28
    1c7a:	df 91       	pop	r29
    1c7c:	08 95       	ret

00001c7e <DIO_u8SetPinDir>:

uint8 DIO_u8SetPinDir (uint8 u8PinNum , uint8 u8Dir)
{
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <DIO_u8SetPinDir+0x6>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <DIO_u8SetPinDir+0x8>
    1c86:	0f 92       	push	r0
    1c88:	cd b7       	in	r28, 0x3d	; 61
    1c8a:	de b7       	in	r29, 0x3e	; 62
    1c8c:	8a 83       	std	Y+2, r24	; 0x02
    1c8e:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Direction	:	OUTPUT	/	INPUT 	/ INPUT_PULLUP
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
    1c90:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Dir<DIO_PIN_DIR_MAX))
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	80 32       	cpi	r24, 0x20	; 32
    1c96:	08 f0       	brcs	.+2      	; 0x1c9a <DIO_u8SetPinDir+0x1c>
    1c98:	85 c1       	rjmp	.+778    	; 0x1fa4 <DIO_u8SetPinDir+0x326>
    1c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	08 f0       	brcs	.+2      	; 0x1ca2 <DIO_u8SetPinDir+0x24>
    1ca0:	81 c1       	rjmp	.+770    	; 0x1fa4 <DIO_u8SetPinDir+0x326>
	{
		u8Status = SUCCESS;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	86 95       	lsr	r24
    1caa:	86 95       	lsr	r24
    1cac:	86 95       	lsr	r24
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	3d 83       	std	Y+5, r19	; 0x05
    1cb4:	2c 83       	std	Y+4, r18	; 0x04
    1cb6:	6c 81       	ldd	r22, Y+4	; 0x04
    1cb8:	7d 81       	ldd	r23, Y+5	; 0x05
    1cba:	61 30       	cpi	r22, 0x01	; 1
    1cbc:	71 05       	cpc	r23, r1
    1cbe:	09 f4       	brne	.+2      	; 0x1cc2 <DIO_u8SetPinDir+0x44>
    1cc0:	6e c0       	rjmp	.+220    	; 0x1d9e <DIO_u8SetPinDir+0x120>
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cc6:	82 30       	cpi	r24, 0x02	; 2
    1cc8:	91 05       	cpc	r25, r1
    1cca:	34 f4       	brge	.+12     	; 0x1cd8 <DIO_u8SetPinDir+0x5a>
    1ccc:	2c 81       	ldd	r18, Y+4	; 0x04
    1cce:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd0:	21 15       	cp	r18, r1
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	71 f0       	breq	.+28     	; 0x1cf2 <DIO_u8SetPinDir+0x74>
    1cd6:	65 c1       	rjmp	.+714    	; 0x1fa2 <DIO_u8SetPinDir+0x324>
    1cd8:	6c 81       	ldd	r22, Y+4	; 0x04
    1cda:	7d 81       	ldd	r23, Y+5	; 0x05
    1cdc:	62 30       	cpi	r22, 0x02	; 2
    1cde:	71 05       	cpc	r23, r1
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <DIO_u8SetPinDir+0x66>
    1ce2:	b3 c0       	rjmp	.+358    	; 0x1e4a <DIO_u8SetPinDir+0x1cc>
    1ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce8:	83 30       	cpi	r24, 0x03	; 3
    1cea:	91 05       	cpc	r25, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <DIO_u8SetPinDir+0x72>
    1cee:	03 c1       	rjmp	.+518    	; 0x1ef6 <DIO_u8SetPinDir+0x278>
    1cf0:	58 c1       	rjmp	.+688    	; 0x1fa2 <DIO_u8SetPinDir+0x324>
		{
		case PORT_A : //PORTA
			// Write pin direction
			Assign_Bit(DDRA ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1cf2:	aa e3       	ldi	r26, 0x3A	; 58
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf8:	88 2f       	mov	r24, r24
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	9c 01       	movw	r18, r24
    1cfe:	27 70       	andi	r18, 0x07	; 7
    1d00:	30 70       	andi	r19, 0x00	; 0
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <DIO_u8SetPinDir+0x8e>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	2a 95       	dec	r18
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <DIO_u8SetPinDir+0x8a>
    1d10:	98 2f       	mov	r25, r24
    1d12:	90 95       	com	r25
    1d14:	ea e3       	ldi	r30, 0x3A	; 58
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	49 2f       	mov	r20, r25
    1d1c:	48 23       	and	r20, r24
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	88 2f       	mov	r24, r24
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 01       	movw	r18, r24
    1d26:	21 70       	andi	r18, 0x01	; 1
    1d28:	30 70       	andi	r19, 0x00	; 0
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	87 70       	andi	r24, 0x07	; 7
    1d32:	90 70       	andi	r25, 0x00	; 0
    1d34:	b9 01       	movw	r22, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_u8SetPinDir+0xbe>
    1d38:	66 0f       	add	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	8a 95       	dec	r24
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_u8SetPinDir+0xba>
    1d40:	cb 01       	movw	r24, r22
    1d42:	84 2b       	or	r24, r20
    1d44:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTA,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1d46:	ab e3       	ldi	r26, 0x3B	; 59
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	88 2f       	mov	r24, r24
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	9c 01       	movw	r18, r24
    1d52:	27 70       	andi	r18, 0x07	; 7
    1d54:	30 70       	andi	r19, 0x00	; 0
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	02 c0       	rjmp	.+4      	; 0x1d60 <DIO_u8SetPinDir+0xe2>
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	2a 95       	dec	r18
    1d62:	e2 f7       	brpl	.-8      	; 0x1d5c <DIO_u8SetPinDir+0xde>
    1d64:	98 2f       	mov	r25, r24
    1d66:	90 95       	com	r25
    1d68:	eb e3       	ldi	r30, 0x3B	; 59
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	49 2f       	mov	r20, r25
    1d70:	48 23       	and	r20, r24
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	86 95       	lsr	r24
    1d76:	88 2f       	mov	r24, r24
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9c 01       	movw	r18, r24
    1d7c:	21 70       	andi	r18, 0x01	; 1
    1d7e:	30 70       	andi	r19, 0x00	; 0
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	88 2f       	mov	r24, r24
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	87 70       	andi	r24, 0x07	; 7
    1d88:	90 70       	andi	r25, 0x00	; 0
    1d8a:	b9 01       	movw	r22, r18
    1d8c:	02 c0       	rjmp	.+4      	; 0x1d92 <DIO_u8SetPinDir+0x114>
    1d8e:	66 0f       	add	r22, r22
    1d90:	77 1f       	adc	r23, r23
    1d92:	8a 95       	dec	r24
    1d94:	e2 f7       	brpl	.-8      	; 0x1d8e <DIO_u8SetPinDir+0x110>
    1d96:	cb 01       	movw	r24, r22
    1d98:	84 2b       	or	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	03 c1       	rjmp	.+518    	; 0x1fa4 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_B : //PORTB
			// Write pin direction
			Assign_Bit(DDRB ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1d9e:	a7 e3       	ldi	r26, 0x37	; 55
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	8a 81       	ldd	r24, Y+2	; 0x02
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 01       	movw	r18, r24
    1daa:	27 70       	andi	r18, 0x07	; 7
    1dac:	30 70       	andi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_u8SetPinDir+0x13a>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	2a 95       	dec	r18
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_u8SetPinDir+0x136>
    1dbc:	98 2f       	mov	r25, r24
    1dbe:	90 95       	com	r25
    1dc0:	e7 e3       	ldi	r30, 0x37	; 55
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	49 2f       	mov	r20, r25
    1dc8:	48 23       	and	r20, r24
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	88 2f       	mov	r24, r24
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9c 01       	movw	r18, r24
    1dd2:	21 70       	andi	r18, 0x01	; 1
    1dd4:	30 70       	andi	r19, 0x00	; 0
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	88 2f       	mov	r24, r24
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	87 70       	andi	r24, 0x07	; 7
    1dde:	90 70       	andi	r25, 0x00	; 0
    1de0:	b9 01       	movw	r22, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_u8SetPinDir+0x16a>
    1de4:	66 0f       	add	r22, r22
    1de6:	77 1f       	adc	r23, r23
    1de8:	8a 95       	dec	r24
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <DIO_u8SetPinDir+0x166>
    1dec:	cb 01       	movw	r24, r22
    1dee:	84 2b       	or	r24, r20
    1df0:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTB,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1df2:	a8 e3       	ldi	r26, 0x38	; 56
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	88 2f       	mov	r24, r24
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9c 01       	movw	r18, r24
    1dfe:	27 70       	andi	r18, 0x07	; 7
    1e00:	30 70       	andi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 c0       	rjmp	.+4      	; 0x1e0c <DIO_u8SetPinDir+0x18e>
    1e08:	88 0f       	add	r24, r24
    1e0a:	99 1f       	adc	r25, r25
    1e0c:	2a 95       	dec	r18
    1e0e:	e2 f7       	brpl	.-8      	; 0x1e08 <DIO_u8SetPinDir+0x18a>
    1e10:	98 2f       	mov	r25, r24
    1e12:	90 95       	com	r25
    1e14:	e8 e3       	ldi	r30, 0x38	; 56
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	49 2f       	mov	r20, r25
    1e1c:	48 23       	and	r20, r24
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	86 95       	lsr	r24
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9c 01       	movw	r18, r24
    1e28:	21 70       	andi	r18, 0x01	; 1
    1e2a:	30 70       	andi	r19, 0x00	; 0
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	88 2f       	mov	r24, r24
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	87 70       	andi	r24, 0x07	; 7
    1e34:	90 70       	andi	r25, 0x00	; 0
    1e36:	b9 01       	movw	r22, r18
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <DIO_u8SetPinDir+0x1c0>
    1e3a:	66 0f       	add	r22, r22
    1e3c:	77 1f       	adc	r23, r23
    1e3e:	8a 95       	dec	r24
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <DIO_u8SetPinDir+0x1bc>
    1e42:	cb 01       	movw	r24, r22
    1e44:	84 2b       	or	r24, r20
    1e46:	8c 93       	st	X, r24
    1e48:	ad c0       	rjmp	.+346    	; 0x1fa4 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_C : //PORTC
			// Write pin direction
			Assign_Bit(DDRC ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1e4a:	a4 e3       	ldi	r26, 0x34	; 52
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9c 01       	movw	r18, r24
    1e56:	27 70       	andi	r18, 0x07	; 7
    1e58:	30 70       	andi	r19, 0x00	; 0
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	02 c0       	rjmp	.+4      	; 0x1e64 <DIO_u8SetPinDir+0x1e6>
    1e60:	88 0f       	add	r24, r24
    1e62:	99 1f       	adc	r25, r25
    1e64:	2a 95       	dec	r18
    1e66:	e2 f7       	brpl	.-8      	; 0x1e60 <DIO_u8SetPinDir+0x1e2>
    1e68:	98 2f       	mov	r25, r24
    1e6a:	90 95       	com	r25
    1e6c:	e4 e3       	ldi	r30, 0x34	; 52
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	49 2f       	mov	r20, r25
    1e74:	48 23       	and	r20, r24
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	88 2f       	mov	r24, r24
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9c 01       	movw	r18, r24
    1e7e:	21 70       	andi	r18, 0x01	; 1
    1e80:	30 70       	andi	r19, 0x00	; 0
    1e82:	8a 81       	ldd	r24, Y+2	; 0x02
    1e84:	88 2f       	mov	r24, r24
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	87 70       	andi	r24, 0x07	; 7
    1e8a:	90 70       	andi	r25, 0x00	; 0
    1e8c:	b9 01       	movw	r22, r18
    1e8e:	02 c0       	rjmp	.+4      	; 0x1e94 <DIO_u8SetPinDir+0x216>
    1e90:	66 0f       	add	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	8a 95       	dec	r24
    1e96:	e2 f7       	brpl	.-8      	; 0x1e90 <DIO_u8SetPinDir+0x212>
    1e98:	cb 01       	movw	r24, r22
    1e9a:	84 2b       	or	r24, r20
    1e9c:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTC,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1e9e:	a5 e3       	ldi	r26, 0x35	; 53
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	88 2f       	mov	r24, r24
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	9c 01       	movw	r18, r24
    1eaa:	27 70       	andi	r18, 0x07	; 7
    1eac:	30 70       	andi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 c0       	rjmp	.+4      	; 0x1eb8 <DIO_u8SetPinDir+0x23a>
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	2a 95       	dec	r18
    1eba:	e2 f7       	brpl	.-8      	; 0x1eb4 <DIO_u8SetPinDir+0x236>
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	90 95       	com	r25
    1ec0:	e5 e3       	ldi	r30, 0x35	; 53
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	49 2f       	mov	r20, r25
    1ec8:	48 23       	and	r20, r24
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	86 95       	lsr	r24
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	9c 01       	movw	r18, r24
    1ed4:	21 70       	andi	r18, 0x01	; 1
    1ed6:	30 70       	andi	r19, 0x00	; 0
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	87 70       	andi	r24, 0x07	; 7
    1ee0:	90 70       	andi	r25, 0x00	; 0
    1ee2:	b9 01       	movw	r22, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <DIO_u8SetPinDir+0x26c>
    1ee6:	66 0f       	add	r22, r22
    1ee8:	77 1f       	adc	r23, r23
    1eea:	8a 95       	dec	r24
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <DIO_u8SetPinDir+0x268>
    1eee:	cb 01       	movw	r24, r22
    1ef0:	84 2b       	or	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	57 c0       	rjmp	.+174    	; 0x1fa4 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_D : //PORTD
			// Write pin direction
			Assign_Bit(DDRD ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1ef6:	a1 e3       	ldi	r26, 0x31	; 49
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	8a 81       	ldd	r24, Y+2	; 0x02
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 01       	movw	r18, r24
    1f02:	27 70       	andi	r18, 0x07	; 7
    1f04:	30 70       	andi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <DIO_u8SetPinDir+0x292>
    1f0c:	88 0f       	add	r24, r24
    1f0e:	99 1f       	adc	r25, r25
    1f10:	2a 95       	dec	r18
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <DIO_u8SetPinDir+0x28e>
    1f14:	98 2f       	mov	r25, r24
    1f16:	90 95       	com	r25
    1f18:	e1 e3       	ldi	r30, 0x31	; 49
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	49 2f       	mov	r20, r25
    1f20:	48 23       	and	r20, r24
    1f22:	8b 81       	ldd	r24, Y+3	; 0x03
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9c 01       	movw	r18, r24
    1f2a:	21 70       	andi	r18, 0x01	; 1
    1f2c:	30 70       	andi	r19, 0x00	; 0
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	87 70       	andi	r24, 0x07	; 7
    1f36:	90 70       	andi	r25, 0x00	; 0
    1f38:	b9 01       	movw	r22, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <DIO_u8SetPinDir+0x2c2>
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	8a 95       	dec	r24
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <DIO_u8SetPinDir+0x2be>
    1f44:	cb 01       	movw	r24, r22
    1f46:	84 2b       	or	r24, r20
    1f48:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTD,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1f4a:	a2 e3       	ldi	r26, 0x32	; 50
    1f4c:	b0 e0       	ldi	r27, 0x00	; 0
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	88 2f       	mov	r24, r24
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9c 01       	movw	r18, r24
    1f56:	27 70       	andi	r18, 0x07	; 7
    1f58:	30 70       	andi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <DIO_u8SetPinDir+0x2e6>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	2a 95       	dec	r18
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <DIO_u8SetPinDir+0x2e2>
    1f68:	98 2f       	mov	r25, r24
    1f6a:	90 95       	com	r25
    1f6c:	e2 e3       	ldi	r30, 0x32	; 50
    1f6e:	f0 e0       	ldi	r31, 0x00	; 0
    1f70:	80 81       	ld	r24, Z
    1f72:	49 2f       	mov	r20, r25
    1f74:	48 23       	and	r20, r24
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	86 95       	lsr	r24
    1f7a:	88 2f       	mov	r24, r24
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9c 01       	movw	r18, r24
    1f80:	21 70       	andi	r18, 0x01	; 1
    1f82:	30 70       	andi	r19, 0x00	; 0
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	88 2f       	mov	r24, r24
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	87 70       	andi	r24, 0x07	; 7
    1f8c:	90 70       	andi	r25, 0x00	; 0
    1f8e:	b9 01       	movw	r22, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <DIO_u8SetPinDir+0x318>
    1f92:	66 0f       	add	r22, r22
    1f94:	77 1f       	adc	r23, r23
    1f96:	8a 95       	dec	r24
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <DIO_u8SetPinDir+0x314>
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	84 2b       	or	r24, r20
    1f9e:	8c 93       	st	X, r24
    1fa0:	01 c0       	rjmp	.+2      	; 0x1fa4 <DIO_u8SetPinDir+0x326>
			break;
		default:
			u8Status=ERROR;
    1fa2:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <DIO_u8WritePin>:

uint8 DIO_u8WritePin (uint8 u8PinNum , uint8 u8Data)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <DIO_u8WritePin+0x6>
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <DIO_u8WritePin+0x8>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	8a 83       	std	Y+2, r24	; 0x02
    1fc6:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Data		:	HIGH	/	LOW
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Data<DIO_DATA_ERROR))
    1fca:	8a 81       	ldd	r24, Y+2	; 0x02
    1fcc:	80 32       	cpi	r24, 0x20	; 32
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <DIO_u8WritePin+0x1c>
    1fd0:	d9 c0       	rjmp	.+434    	; 0x2184 <DIO_u8WritePin+0x1ce>
    1fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <DIO_u8WritePin+0x24>
    1fd8:	d5 c0       	rjmp	.+426    	; 0x2184 <DIO_u8WritePin+0x1ce>
	{
		u8Status=SUCCESS;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	86 95       	lsr	r24
    1fe2:	86 95       	lsr	r24
    1fe4:	86 95       	lsr	r24
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	3d 83       	std	Y+5, r19	; 0x05
    1fec:	2c 83       	std	Y+4, r18	; 0x04
    1fee:	6c 81       	ldd	r22, Y+4	; 0x04
    1ff0:	7d 81       	ldd	r23, Y+5	; 0x05
    1ff2:	61 30       	cpi	r22, 0x01	; 1
    1ff4:	71 05       	cpc	r23, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <DIO_u8WritePin+0x44>
    1ff8:	43 c0       	rjmp	.+134    	; 0x2080 <DIO_u8WritePin+0xca>
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	91 05       	cpc	r25, r1
    2002:	34 f4       	brge	.+12     	; 0x2010 <DIO_u8WritePin+0x5a>
    2004:	2c 81       	ldd	r18, Y+4	; 0x04
    2006:	3d 81       	ldd	r19, Y+5	; 0x05
    2008:	21 15       	cp	r18, r1
    200a:	31 05       	cpc	r19, r1
    200c:	71 f0       	breq	.+28     	; 0x202a <DIO_u8WritePin+0x74>
    200e:	b9 c0       	rjmp	.+370    	; 0x2182 <DIO_u8WritePin+0x1cc>
    2010:	6c 81       	ldd	r22, Y+4	; 0x04
    2012:	7d 81       	ldd	r23, Y+5	; 0x05
    2014:	62 30       	cpi	r22, 0x02	; 2
    2016:	71 05       	cpc	r23, r1
    2018:	09 f4       	brne	.+2      	; 0x201c <DIO_u8WritePin+0x66>
    201a:	5d c0       	rjmp	.+186    	; 0x20d6 <DIO_u8WritePin+0x120>
    201c:	8c 81       	ldd	r24, Y+4	; 0x04
    201e:	9d 81       	ldd	r25, Y+5	; 0x05
    2020:	83 30       	cpi	r24, 0x03	; 3
    2022:	91 05       	cpc	r25, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <DIO_u8WritePin+0x72>
    2026:	82 c0       	rjmp	.+260    	; 0x212c <DIO_u8WritePin+0x176>
    2028:	ac c0       	rjmp	.+344    	; 0x2182 <DIO_u8WritePin+0x1cc>
		{
		case PORT_A : //PORTA
			// Write pin values
			Assign_Bit(PORTA ,u8PinNum % 8, u8Data );
    202a:	ab e3       	ldi	r26, 0x3B	; 59
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	9c 01       	movw	r18, r24
    2036:	27 70       	andi	r18, 0x07	; 7
    2038:	30 70       	andi	r19, 0x00	; 0
    203a:	81 e0       	ldi	r24, 0x01	; 1
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	02 c0       	rjmp	.+4      	; 0x2044 <DIO_u8WritePin+0x8e>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	2a 95       	dec	r18
    2046:	e2 f7       	brpl	.-8      	; 0x2040 <DIO_u8WritePin+0x8a>
    2048:	98 2f       	mov	r25, r24
    204a:	90 95       	com	r25
    204c:	eb e3       	ldi	r30, 0x3B	; 59
    204e:	f0 e0       	ldi	r31, 0x00	; 0
    2050:	80 81       	ld	r24, Z
    2052:	49 2f       	mov	r20, r25
    2054:	48 23       	and	r20, r24
    2056:	8b 81       	ldd	r24, Y+3	; 0x03
    2058:	88 2f       	mov	r24, r24
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	9c 01       	movw	r18, r24
    205e:	21 70       	andi	r18, 0x01	; 1
    2060:	30 70       	andi	r19, 0x00	; 0
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	87 70       	andi	r24, 0x07	; 7
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	b9 01       	movw	r22, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <DIO_u8WritePin+0xbe>
    2070:	66 0f       	add	r22, r22
    2072:	77 1f       	adc	r23, r23
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <DIO_u8WritePin+0xba>
    2078:	cb 01       	movw	r24, r22
    207a:	84 2b       	or	r24, r20
    207c:	8c 93       	st	X, r24
    207e:	82 c0       	rjmp	.+260    	; 0x2184 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_B : //PORTB
			// Write pin values
			Assign_Bit(PORTB ,u8PinNum % 8, u8Data );
    2080:	a8 e3       	ldi	r26, 0x38	; 56
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	8a 81       	ldd	r24, Y+2	; 0x02
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9c 01       	movw	r18, r24
    208c:	27 70       	andi	r18, 0x07	; 7
    208e:	30 70       	andi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 c0       	rjmp	.+4      	; 0x209a <DIO_u8WritePin+0xe4>
    2096:	88 0f       	add	r24, r24
    2098:	99 1f       	adc	r25, r25
    209a:	2a 95       	dec	r18
    209c:	e2 f7       	brpl	.-8      	; 0x2096 <DIO_u8WritePin+0xe0>
    209e:	98 2f       	mov	r25, r24
    20a0:	90 95       	com	r25
    20a2:	e8 e3       	ldi	r30, 0x38	; 56
    20a4:	f0 e0       	ldi	r31, 0x00	; 0
    20a6:	80 81       	ld	r24, Z
    20a8:	49 2f       	mov	r20, r25
    20aa:	48 23       	and	r20, r24
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	88 2f       	mov	r24, r24
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	9c 01       	movw	r18, r24
    20b4:	21 70       	andi	r18, 0x01	; 1
    20b6:	30 70       	andi	r19, 0x00	; 0
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	88 2f       	mov	r24, r24
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	87 70       	andi	r24, 0x07	; 7
    20c0:	90 70       	andi	r25, 0x00	; 0
    20c2:	b9 01       	movw	r22, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <DIO_u8WritePin+0x114>
    20c6:	66 0f       	add	r22, r22
    20c8:	77 1f       	adc	r23, r23
    20ca:	8a 95       	dec	r24
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <DIO_u8WritePin+0x110>
    20ce:	cb 01       	movw	r24, r22
    20d0:	84 2b       	or	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	57 c0       	rjmp	.+174    	; 0x2184 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_C : //PORTC
			// Write pin values
			Assign_Bit(PORTC ,u8PinNum % 8, u8Data );
    20d6:	a5 e3       	ldi	r26, 0x35	; 53
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 01       	movw	r18, r24
    20e2:	27 70       	andi	r18, 0x07	; 7
    20e4:	30 70       	andi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <DIO_u8WritePin+0x13a>
    20ec:	88 0f       	add	r24, r24
    20ee:	99 1f       	adc	r25, r25
    20f0:	2a 95       	dec	r18
    20f2:	e2 f7       	brpl	.-8      	; 0x20ec <DIO_u8WritePin+0x136>
    20f4:	98 2f       	mov	r25, r24
    20f6:	90 95       	com	r25
    20f8:	e5 e3       	ldi	r30, 0x35	; 53
    20fa:	f0 e0       	ldi	r31, 0x00	; 0
    20fc:	80 81       	ld	r24, Z
    20fe:	49 2f       	mov	r20, r25
    2100:	48 23       	and	r20, r24
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	88 2f       	mov	r24, r24
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9c 01       	movw	r18, r24
    210a:	21 70       	andi	r18, 0x01	; 1
    210c:	30 70       	andi	r19, 0x00	; 0
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	87 70       	andi	r24, 0x07	; 7
    2116:	90 70       	andi	r25, 0x00	; 0
    2118:	b9 01       	movw	r22, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <DIO_u8WritePin+0x16a>
    211c:	66 0f       	add	r22, r22
    211e:	77 1f       	adc	r23, r23
    2120:	8a 95       	dec	r24
    2122:	e2 f7       	brpl	.-8      	; 0x211c <DIO_u8WritePin+0x166>
    2124:	cb 01       	movw	r24, r22
    2126:	84 2b       	or	r24, r20
    2128:	8c 93       	st	X, r24
    212a:	2c c0       	rjmp	.+88     	; 0x2184 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_D : //PORTD
			// Write pin values
			Assign_Bit(PORTD ,u8PinNum % 8, u8Data );
    212c:	a2 e3       	ldi	r26, 0x32	; 50
    212e:	b0 e0       	ldi	r27, 0x00	; 0
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 01       	movw	r18, r24
    2138:	27 70       	andi	r18, 0x07	; 7
    213a:	30 70       	andi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <DIO_u8WritePin+0x190>
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	2a 95       	dec	r18
    2148:	e2 f7       	brpl	.-8      	; 0x2142 <DIO_u8WritePin+0x18c>
    214a:	98 2f       	mov	r25, r24
    214c:	90 95       	com	r25
    214e:	e2 e3       	ldi	r30, 0x32	; 50
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 81       	ld	r24, Z
    2154:	49 2f       	mov	r20, r25
    2156:	48 23       	and	r20, r24
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9c 01       	movw	r18, r24
    2160:	21 70       	andi	r18, 0x01	; 1
    2162:	30 70       	andi	r19, 0x00	; 0
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	87 70       	andi	r24, 0x07	; 7
    216c:	90 70       	andi	r25, 0x00	; 0
    216e:	b9 01       	movw	r22, r18
    2170:	02 c0       	rjmp	.+4      	; 0x2176 <DIO_u8WritePin+0x1c0>
    2172:	66 0f       	add	r22, r22
    2174:	77 1f       	adc	r23, r23
    2176:	8a 95       	dec	r24
    2178:	e2 f7       	brpl	.-8      	; 0x2172 <DIO_u8WritePin+0x1bc>
    217a:	cb 01       	movw	r24, r22
    217c:	84 2b       	or	r24, r20
    217e:	8c 93       	st	X, r24
    2180:	01 c0       	rjmp	.+2      	; 0x2184 <DIO_u8WritePin+0x1ce>
			break;
		default:
			u8Status=ERROR;
    2182:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
    2184:	89 81       	ldd	r24, Y+1	; 0x01
}
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <DIO_u8ReadPin>:

uint8 DIO_u8ReadPin (uint8 u8PinNum )
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <DIO_u8ReadPin+0x6>
    219c:	00 d0       	rcall	.+0      	; 0x219e <DIO_u8ReadPin+0x8>
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Reading from pin
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 */
	// initializing the status of the functions
	uint8 u8Data=DIO_DATA_ERROR;
    21a4:	82 e0       	ldi	r24, 0x02	; 2
    21a6:	89 83       	std	Y+1, r24	; 0x01
	// checking the inputs of the functions
	if (u8PinNum<DIO_PINS_MAX)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	80 32       	cpi	r24, 0x20	; 32
    21ac:	08 f0       	brcs	.+2      	; 0x21b0 <DIO_u8ReadPin+0x1a>
    21ae:	76 c0       	rjmp	.+236    	; 0x229c <DIO_u8ReadPin+0x106>
	{
		// calculating the port no.
		switch(u8PinNum/8)
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	86 95       	lsr	r24
    21b4:	86 95       	lsr	r24
    21b6:	86 95       	lsr	r24
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	3c 83       	std	Y+4, r19	; 0x04
    21be:	2b 83       	std	Y+3, r18	; 0x03
    21c0:	4b 81       	ldd	r20, Y+3	; 0x03
    21c2:	5c 81       	ldd	r21, Y+4	; 0x04
    21c4:	41 30       	cpi	r20, 0x01	; 1
    21c6:	51 05       	cpc	r21, r1
    21c8:	59 f1       	breq	.+86     	; 0x2220 <DIO_u8ReadPin+0x8a>
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	9c 81       	ldd	r25, Y+4	; 0x04
    21ce:	82 30       	cpi	r24, 0x02	; 2
    21d0:	91 05       	cpc	r25, r1
    21d2:	34 f4       	brge	.+12     	; 0x21e0 <DIO_u8ReadPin+0x4a>
    21d4:	2b 81       	ldd	r18, Y+3	; 0x03
    21d6:	3c 81       	ldd	r19, Y+4	; 0x04
    21d8:	21 15       	cp	r18, r1
    21da:	31 05       	cpc	r19, r1
    21dc:	69 f0       	breq	.+26     	; 0x21f8 <DIO_u8ReadPin+0x62>
    21de:	5c c0       	rjmp	.+184    	; 0x2298 <DIO_u8ReadPin+0x102>
    21e0:	4b 81       	ldd	r20, Y+3	; 0x03
    21e2:	5c 81       	ldd	r21, Y+4	; 0x04
    21e4:	42 30       	cpi	r20, 0x02	; 2
    21e6:	51 05       	cpc	r21, r1
    21e8:	79 f1       	breq	.+94     	; 0x2248 <DIO_u8ReadPin+0xb2>
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	91 05       	cpc	r25, r1
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <DIO_u8ReadPin+0x60>
    21f4:	3d c0       	rjmp	.+122    	; 0x2270 <DIO_u8ReadPin+0xda>
    21f6:	50 c0       	rjmp	.+160    	; 0x2298 <DIO_u8ReadPin+0x102>
		{
		case PORT_A : //PORTA
			//Read from pin
			u8Data= Get_Bit(PINA ,u8PinNum % 8);
    21f8:	e9 e3       	ldi	r30, 0x39	; 57
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	87 70       	andi	r24, 0x07	; 7
    220a:	90 70       	andi	r25, 0x00	; 0
    220c:	a9 01       	movw	r20, r18
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <DIO_u8ReadPin+0x7e>
    2210:	55 95       	asr	r21
    2212:	47 95       	ror	r20
    2214:	8a 95       	dec	r24
    2216:	e2 f7       	brpl	.-8      	; 0x2210 <DIO_u8ReadPin+0x7a>
    2218:	ca 01       	movw	r24, r20
    221a:	81 70       	andi	r24, 0x01	; 1
    221c:	89 83       	std	Y+1, r24	; 0x01
    221e:	3e c0       	rjmp	.+124    	; 0x229c <DIO_u8ReadPin+0x106>
			break;
		case PORT_B : //PORTB
			//Read from pin
			u8Data= Get_Bit(PINB ,u8PinNum % 8);
    2220:	e6 e3       	ldi	r30, 0x36	; 54
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	28 2f       	mov	r18, r24
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	87 70       	andi	r24, 0x07	; 7
    2232:	90 70       	andi	r25, 0x00	; 0
    2234:	a9 01       	movw	r20, r18
    2236:	02 c0       	rjmp	.+4      	; 0x223c <DIO_u8ReadPin+0xa6>
    2238:	55 95       	asr	r21
    223a:	47 95       	ror	r20
    223c:	8a 95       	dec	r24
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <DIO_u8ReadPin+0xa2>
    2240:	ca 01       	movw	r24, r20
    2242:	81 70       	andi	r24, 0x01	; 1
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	2a c0       	rjmp	.+84     	; 0x229c <DIO_u8ReadPin+0x106>
			break;
		case PORT_C : //PORTC
			//Read from pin
			u8Data= Get_Bit(PINC ,u8PinNum % 8);
    2248:	e3 e3       	ldi	r30, 0x33	; 51
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	80 81       	ld	r24, Z
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	8a 81       	ldd	r24, Y+2	; 0x02
    2254:	88 2f       	mov	r24, r24
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	87 70       	andi	r24, 0x07	; 7
    225a:	90 70       	andi	r25, 0x00	; 0
    225c:	a9 01       	movw	r20, r18
    225e:	02 c0       	rjmp	.+4      	; 0x2264 <DIO_u8ReadPin+0xce>
    2260:	55 95       	asr	r21
    2262:	47 95       	ror	r20
    2264:	8a 95       	dec	r24
    2266:	e2 f7       	brpl	.-8      	; 0x2260 <DIO_u8ReadPin+0xca>
    2268:	ca 01       	movw	r24, r20
    226a:	81 70       	andi	r24, 0x01	; 1
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	16 c0       	rjmp	.+44     	; 0x229c <DIO_u8ReadPin+0x106>
			break;
		case PORT_D : //PORTD
			//Read from pin
			u8Data= Get_Bit(PIND ,u8PinNum % 8);
    2270:	e0 e3       	ldi	r30, 0x30	; 48
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	80 81       	ld	r24, Z
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	88 2f       	mov	r24, r24
    227e:	90 e0       	ldi	r25, 0x00	; 0
    2280:	87 70       	andi	r24, 0x07	; 7
    2282:	90 70       	andi	r25, 0x00	; 0
    2284:	a9 01       	movw	r20, r18
    2286:	02 c0       	rjmp	.+4      	; 0x228c <DIO_u8ReadPin+0xf6>
    2288:	55 95       	asr	r21
    228a:	47 95       	ror	r20
    228c:	8a 95       	dec	r24
    228e:	e2 f7       	brpl	.-8      	; 0x2288 <DIO_u8ReadPin+0xf2>
    2290:	ca 01       	movw	r24, r20
    2292:	81 70       	andi	r24, 0x01	; 1
    2294:	89 83       	std	Y+1, r24	; 0x01
    2296:	02 c0       	rjmp	.+4      	; 0x229c <DIO_u8ReadPin+0x106>
			break;
		default:
			u8Data= DIO_DATA_ERROR;
    2298:	82 e0       	ldi	r24, 0x02	; 2
    229a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return u8Data;
    229c:	89 81       	ldd	r24, Y+1	; 0x01
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	cf 91       	pop	r28
    22a8:	df 91       	pop	r29
    22aa:	08 95       	ret

000022ac <str_concat>:
//#define APP_update 0
//#define APP_uptodate 1
//uint8 APP_state=APP_update;

static uint8 str_concat (int8 str1[],int8 str2[])
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <str_concat+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <str_concat+0x8>
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <str_concat+0xa>
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	9c 83       	std	Y+4, r25	; 0x04
    22bc:	8b 83       	std	Y+3, r24	; 0x03
    22be:	7e 83       	std	Y+6, r23	; 0x06
    22c0:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i=0,j=0;
    22c2:	1a 82       	std	Y+2, r1	; 0x02
    22c4:	19 82       	std	Y+1, r1	; 0x01
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <str_concat+0x22>
	while (str1[i])
	{
		i++;
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	8f 5f       	subi	r24, 0xFF	; 255
    22cc:	8a 83       	std	Y+2, r24	; 0x02
//uint8 APP_state=APP_update;

static uint8 str_concat (int8 str1[],int8 str2[])
{
	uint8 i=0,j=0;
	while (str1[i])
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	28 2f       	mov	r18, r24
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	9c 81       	ldd	r25, Y+4	; 0x04
    22d8:	fc 01       	movw	r30, r24
    22da:	e2 0f       	add	r30, r18
    22dc:	f3 1f       	adc	r31, r19
    22de:	80 81       	ld	r24, Z
    22e0:	88 23       	and	r24, r24
    22e2:	91 f7       	brne	.-28     	; 0x22c8 <str_concat+0x1c>
    22e4:	18 c0       	rjmp	.+48     	; 0x2316 <str_concat+0x6a>
	{
		i++;
	}
	while (str2[j])
	{
		str1[i++]=str2[j++];
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	dc 01       	movw	r26, r24
    22f2:	a2 0f       	add	r26, r18
    22f4:	b3 1f       	adc	r27, r19
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	28 2f       	mov	r18, r24
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	8d 81       	ldd	r24, Y+5	; 0x05
    22fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2300:	fc 01       	movw	r30, r24
    2302:	e2 0f       	add	r30, r18
    2304:	f3 1f       	adc	r31, r19
    2306:	80 81       	ld	r24, Z
    2308:	8c 93       	st	X, r24
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8a 83       	std	Y+2, r24	; 0x02
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	8f 5f       	subi	r24, 0xFF	; 255
    2314:	89 83       	std	Y+1, r24	; 0x01
	uint8 i=0,j=0;
	while (str1[i])
	{
		i++;
	}
	while (str2[j])
    2316:	89 81       	ldd	r24, Y+1	; 0x01
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	fc 01       	movw	r30, r24
    2322:	e2 0f       	add	r30, r18
    2324:	f3 1f       	adc	r31, r19
    2326:	80 81       	ld	r24, Z
    2328:	88 23       	and	r24, r24
    232a:	e9 f6       	brne	.-70     	; 0x22e6 <str_concat+0x3a>
	{
		str1[i++]=str2[j++];
	}
	str1[i]=0;
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	fc 01       	movw	r30, r24
    2338:	e2 0f       	add	r30, r18
    233a:	f3 1f       	adc	r31, r19
    233c:	10 82       	st	Z, r1
	return i;
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2340:	26 96       	adiw	r28, 0x06	; 6
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <APP_send>:
int8 mobile_number[15]="+0201553130804";

SOLDIER x={"Mr. XYZ","XXX","NOT Valid","NOT Valid",0};
int8 message[50]={0};
static void APP_send (uint8 i)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <APP_send+0x6>
    2358:	0f 92       	push	r0
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
	GSM_vidSelect();
    2360:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GSM_vidSelect>
	GPS_vidDisAttach();
    2364:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <GPS_vidDisAttach>
	message[0]=0;
    2368:	10 92 d4 01 	sts	0x01D4, r1
	str_concat(message,"Name: ");
    236c:	84 ed       	ldi	r24, 0xD4	; 212
    236e:	91 e0       	ldi	r25, 0x01	; 1
    2370:	24 e7       	ldi	r18, 0x74	; 116
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	b9 01       	movw	r22, r18
    2376:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
	str_concat(message,x.Name);
    237a:	84 ed       	ldi	r24, 0xD4	; 212
    237c:	91 e0       	ldi	r25, 0x01	; 1
    237e:	2c e4       	ldi	r18, 0x4C	; 76
    2380:	31 e0       	ldi	r19, 0x01	; 1
    2382:	b9 01       	movw	r22, r18
    2384:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
	str_concat(message,"\r");
    2388:	84 ed       	ldi	r24, 0xD4	; 212
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	2b e7       	ldi	r18, 0x7B	; 123
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	b9 01       	movw	r22, r18
    2392:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
	switch (i)
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	3b 83       	std	Y+3, r19	; 0x03
    239e:	2a 83       	std	Y+2, r18	; 0x02
    23a0:	8a 81       	ldd	r24, Y+2	; 0x02
    23a2:	9b 81       	ldd	r25, Y+3	; 0x03
    23a4:	81 30       	cpi	r24, 0x01	; 1
    23a6:	91 05       	cpc	r25, r1
    23a8:	09 f4       	brne	.+2      	; 0x23ac <APP_send+0x5a>
    23aa:	4f c0       	rjmp	.+158    	; 0x244a <APP_send+0xf8>
    23ac:	2a 81       	ldd	r18, Y+2	; 0x02
    23ae:	3b 81       	ldd	r19, Y+3	; 0x03
    23b0:	22 30       	cpi	r18, 0x02	; 2
    23b2:	31 05       	cpc	r19, r1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <APP_send+0x66>
    23b6:	55 c0       	rjmp	.+170    	; 0x2462 <APP_send+0x110>
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	9b 81       	ldd	r25, Y+3	; 0x03
    23bc:	00 97       	sbiw	r24, 0x00	; 0
    23be:	09 f0       	breq	.+2      	; 0x23c2 <APP_send+0x70>
    23c0:	5b c0       	rjmp	.+182    	; 0x2478 <APP_send+0x126>
	{
	case 0:
		LCD_vidString(" DATA\n");
    23c2:	8d e7       	ldi	r24, 0x7D	; 125
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		str_concat(message,"Temp:");
    23ca:	84 ed       	ldi	r24, 0xD4	; 212
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	24 e8       	ldi	r18, 0x84	; 132
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	b9 01       	movw	r22, r18
    23d4:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,x.TEMP);
    23d8:	84 ed       	ldi	r24, 0xD4	; 212
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	2b e5       	ldi	r18, 0x5B	; 91
    23de:	31 e0       	ldi	r19, 0x01	; 1
    23e0:	b9 01       	movw	r22, r18
    23e2:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,"\r");
    23e6:	84 ed       	ldi	r24, 0xD4	; 212
    23e8:	91 e0       	ldi	r25, 0x01	; 1
    23ea:	2b e7       	ldi	r18, 0x7B	; 123
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	b9 01       	movw	r22, r18
    23f0:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,"LAT: ");
    23f4:	84 ed       	ldi	r24, 0xD4	; 212
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	2a e8       	ldi	r18, 0x8A	; 138
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	b9 01       	movw	r22, r18
    23fe:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,x.LAT);
    2402:	84 ed       	ldi	r24, 0xD4	; 212
    2404:	91 e0       	ldi	r25, 0x01	; 1
    2406:	2d e6       	ldi	r18, 0x6D	; 109
    2408:	31 e0       	ldi	r19, 0x01	; 1
    240a:	b9 01       	movw	r22, r18
    240c:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,"\r");
    2410:	84 ed       	ldi	r24, 0xD4	; 212
    2412:	91 e0       	ldi	r25, 0x01	; 1
    2414:	2b e7       	ldi	r18, 0x7B	; 123
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	b9 01       	movw	r22, r18
    241a:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,"LON: ");
    241e:	84 ed       	ldi	r24, 0xD4	; 212
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	20 e9       	ldi	r18, 0x90	; 144
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	b9 01       	movw	r22, r18
    2428:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,x.LON);
    242c:	84 ed       	ldi	r24, 0xD4	; 212
    242e:	91 e0       	ldi	r25, 0x01	; 1
    2430:	2f e5       	ldi	r18, 0x5F	; 95
    2432:	31 e0       	ldi	r19, 0x01	; 1
    2434:	b9 01       	movw	r22, r18
    2436:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		str_concat(message,"\r");
    243a:	84 ed       	ldi	r24, 0xD4	; 212
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	2b e7       	ldi	r18, 0x7B	; 123
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	b9 01       	movw	r22, r18
    2444:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
    2448:	17 c0       	rjmp	.+46     	; 0x2478 <APP_send+0x126>

		break;
	case 1:
		LCD_vidString(" HELP\n");
    244a:	86 e9       	ldi	r24, 0x96	; 150
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		str_concat(message,"Need more TROOPS\r");
    2452:	84 ed       	ldi	r24, 0xD4	; 212
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	2d e9       	ldi	r18, 0x9D	; 157
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	b9 01       	movw	r22, r18
    245c:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
    2460:	0b c0       	rjmp	.+22     	; 0x2478 <APP_send+0x126>
		break;
	case 2:
		LCD_vidString(" ABORTING\n");
    2462:	8f ea       	ldi	r24, 0xAF	; 175
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		str_concat(message,"Aborting The Mission\r");
    246a:	84 ed       	ldi	r24, 0xD4	; 212
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	2a eb       	ldi	r18, 0xBA	; 186
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	b9 01       	movw	r22, r18
    2474:	0e 94 56 11 	call	0x22ac	; 0x22ac <str_concat>
		break;
	default:
		break;
	}

	GSM_vidSendSMS(message,mobile_number);
    2478:	84 ed       	ldi	r24, 0xD4	; 212
    247a:	91 e0       	ldi	r25, 0x01	; 1
    247c:	2d e3       	ldi	r18, 0x3D	; 61
    247e:	31 e0       	ldi	r19, 0x01	; 1
    2480:	b9 01       	movw	r22, r18
    2482:	0e 94 ef 0a 	call	0x15de	; 0x15de <GSM_vidSendSMS>
	GPS_vidSelect();
    2486:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <GPS_vidSelect>
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <main>:




int main(void)
{
    2496:	1f 93       	push	r17
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	c0 56       	subi	r28, 0x60	; 96
    24a2:	d0 40       	sbci	r29, 0x00	; 0
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
	//	int8 message[50]={0};
	GPS Data ;

	_delay_ms(100);
    24ae:	84 e6       	ldi	r24, 0x64	; 100
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 bc 02 	call	0x578	; 0x578 <_delay_ms>
	LCD_vidInit();
    24b6:	0e 94 1b 09 	call	0x1236	; 0x1236 <LCD_vidInit>

	TIMER_vidInit();
    24ba:	0e 94 a9 02 	call	0x552	; 0x552 <TIMER_vidInit>
	Enable_Global_Interrupt();
    24be:	af e5       	ldi	r26, 0x5F	; 95
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	ef e5       	ldi	r30, 0x5F	; 95
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	80 68       	ori	r24, 0x80	; 128
    24ca:	8c 93       	st	X, r24
	TEMP_SENSOR_vidInit();
    24cc:	0e 94 20 03 	call	0x640	; 0x640 <TEMP_SENSOR_vidInit>
	GPS_vidInit();
    24d0:	0e 94 cf 0b 	call	0x179e	; 0x179e <GPS_vidInit>
	GSM_vidInit();
    24d4:	0e 94 a6 0a 	call	0x154c	; 0x154c <GSM_vidInit>

	GSM_vidSelect();
    24d8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GSM_vidSelect>
	while(!GSM_u8Startup());
    24dc:	0e 94 bd 0a 	call	0x157a	; 0x157a <GSM_u8Startup>
    24e0:	88 23       	and	r24, r24
    24e2:	e1 f3       	breq	.-8      	; 0x24dc <main+0x46>


	GPS_vidSelect();
    24e4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <GPS_vidSelect>
	Data = GPS_READ();
    24e8:	ce 01       	movw	r24, r28
    24ea:	03 96       	adiw	r24, 0x03	; 3
    24ec:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <GPS_READ>

	GSM_vidSelect();
    24f0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <GSM_vidSelect>
	GPS_vidDisAttach();
    24f4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <GPS_vidDisAttach>


	x.FIX=1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	80 93 7a 01 	sts	0x017A, r24
	x.FIX&=GPS_u8GetLat(x.LAT);
    24fe:	10 91 7a 01 	lds	r17, 0x017A
    2502:	8d e6       	ldi	r24, 0x6D	; 109
    2504:	91 e0       	ldi	r25, 0x01	; 1
    2506:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <GPS_u8GetLat>
    250a:	81 23       	and	r24, r17
    250c:	80 93 7a 01 	sts	0x017A, r24
	x.FIX&=GPS_u8GetLon(x.LON);
    2510:	10 91 7a 01 	lds	r17, 0x017A
    2514:	8f e5       	ldi	r24, 0x5F	; 95
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <GPS_u8GetLon>
    251c:	81 23       	and	r24, r17
    251e:	80 93 7a 01 	sts	0x017A, r24
	TEMP_SENSOR_u16GetData(x.TEMP);
    2522:	8b e5       	ldi	r24, 0x5B	; 91
    2524:	91 e0       	ldi	r25, 0x01	; 1
    2526:	0e 94 2f 03 	call	0x65e	; 0x65e <TEMP_SENSOR_u16GetData>



	//	DIO_u8SetPinDir(PORTB_5,INPUT_PULLUP);
	SW_vidInit();
    252a:	0e 94 b7 03 	call	0x76e	; 0x76e <SW_vidInit>
	uint8 arr[3]={0};
    252e:	83 e0       	ldi	r24, 0x03	; 3
    2530:	fe 01       	movw	r30, r28
    2532:	be 96       	adiw	r30, 0x2e	; 46
    2534:	df 01       	movw	r26, r30
    2536:	98 2f       	mov	r25, r24
    2538:	1d 92       	st	X+, r1
    253a:	9a 95       	dec	r25
    253c:	e9 f7       	brne	.-6      	; 0x2538 <main+0xa2>
	for(uint8 j=0;j<3;j++)
    253e:	1a 82       	std	Y+2, r1	; 0x02
    2540:	0f c0       	rjmp	.+30     	; 0x2560 <main+0xca>
		SW_vidFlag(j,arr+j);
    2542:	8a 81       	ldd	r24, Y+2	; 0x02
    2544:	88 2f       	mov	r24, r24
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9e 01       	movw	r18, r28
    254a:	22 5d       	subi	r18, 0xD2	; 210
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	28 0f       	add	r18, r24
    2550:	39 1f       	adc	r19, r25
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	b9 01       	movw	r22, r18
    2556:	0e 94 9c 03 	call	0x738	; 0x738 <SW_vidFlag>


	//	DIO_u8SetPinDir(PORTB_5,INPUT_PULLUP);
	SW_vidInit();
	uint8 arr[3]={0};
	for(uint8 j=0;j<3;j++)
    255a:	8a 81       	ldd	r24, Y+2	; 0x02
    255c:	8f 5f       	subi	r24, 0xFF	; 255
    255e:	8a 83       	std	Y+2, r24	; 0x02
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	83 30       	cpi	r24, 0x03	; 3
    2564:	70 f3       	brcs	.-36     	; 0x2542 <main+0xac>
		SW_vidFlag(j,arr+j);
	GPS_vidSelect();
    2566:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <GPS_vidSelect>
	while(1)
	{
		LCD_vidString("LAT:");
    256a:	80 ed       	ldi	r24, 0xD0	; 208
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		LCD_vidString(x.LAT);
    2572:	8d e6       	ldi	r24, 0x6D	; 109
    2574:	91 e0       	ldi	r25, 0x01	; 1
    2576:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		LCD_vidString("LON:");
    257a:	85 ed       	ldi	r24, 0xD5	; 213
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		LCD_vidString(x.LON+1);
    2582:	80 e6       	ldi	r24, 0x60	; 96
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		LCD_vidString("TEMPERATURE: ");
    258a:	8a ed       	ldi	r24, 0xDA	; 218
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		LCD_vidString(x.TEMP);
    2592:	8b e5       	ldi	r24, 0x5B	; 91
    2594:	91 e0       	ldi	r25, 0x01	; 1
    2596:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>
		Data = GPS_READ();
    259a:	ce 01       	movw	r24, r28
    259c:	c1 96       	adiw	r24, 0x31	; 49
    259e:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <GPS_READ>
    25a2:	de 01       	movw	r26, r28
    25a4:	13 96       	adiw	r26, 0x03	; 3
    25a6:	6e 96       	adiw	r28, 0x1e	; 30
    25a8:	bf af       	std	Y+63, r27	; 0x3f
    25aa:	ae af       	std	Y+62, r26	; 0x3e
    25ac:	6e 97       	sbiw	r28, 0x1e	; 30
    25ae:	fe 01       	movw	r30, r28
    25b0:	f1 96       	adiw	r30, 0x31	; 49
    25b2:	a0 96       	adiw	r28, 0x20	; 32
    25b4:	ff af       	std	Y+63, r31	; 0x3f
    25b6:	ee af       	std	Y+62, r30	; 0x3e
    25b8:	a0 97       	sbiw	r28, 0x20	; 32
    25ba:	fb e2       	ldi	r31, 0x2B	; 43
    25bc:	a1 96       	adiw	r28, 0x21	; 33
    25be:	ff af       	std	Y+63, r31	; 0x3f
    25c0:	a1 97       	sbiw	r28, 0x21	; 33
    25c2:	a0 96       	adiw	r28, 0x20	; 32
    25c4:	ae ad       	ldd	r26, Y+62	; 0x3e
    25c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    25c8:	a0 97       	sbiw	r28, 0x20	; 32
    25ca:	0c 90       	ld	r0, X
    25cc:	a0 96       	adiw	r28, 0x20	; 32
    25ce:	ee ad       	ldd	r30, Y+62	; 0x3e
    25d0:	ff ad       	ldd	r31, Y+63	; 0x3f
    25d2:	a0 97       	sbiw	r28, 0x20	; 32
    25d4:	31 96       	adiw	r30, 0x01	; 1
    25d6:	a0 96       	adiw	r28, 0x20	; 32
    25d8:	ff af       	std	Y+63, r31	; 0x3f
    25da:	ee af       	std	Y+62, r30	; 0x3e
    25dc:	a0 97       	sbiw	r28, 0x20	; 32
    25de:	6e 96       	adiw	r28, 0x1e	; 30
    25e0:	ae ad       	ldd	r26, Y+62	; 0x3e
    25e2:	bf ad       	ldd	r27, Y+63	; 0x3f
    25e4:	6e 97       	sbiw	r28, 0x1e	; 30
    25e6:	0c 92       	st	X, r0
    25e8:	6e 96       	adiw	r28, 0x1e	; 30
    25ea:	ee ad       	ldd	r30, Y+62	; 0x3e
    25ec:	ff ad       	ldd	r31, Y+63	; 0x3f
    25ee:	6e 97       	sbiw	r28, 0x1e	; 30
    25f0:	31 96       	adiw	r30, 0x01	; 1
    25f2:	6e 96       	adiw	r28, 0x1e	; 30
    25f4:	ff af       	std	Y+63, r31	; 0x3f
    25f6:	ee af       	std	Y+62, r30	; 0x3e
    25f8:	6e 97       	sbiw	r28, 0x1e	; 30
    25fa:	a1 96       	adiw	r28, 0x21	; 33
    25fc:	ff ad       	ldd	r31, Y+63	; 0x3f
    25fe:	a1 97       	sbiw	r28, 0x21	; 33
    2600:	f1 50       	subi	r31, 0x01	; 1
    2602:	a1 96       	adiw	r28, 0x21	; 33
    2604:	ff af       	std	Y+63, r31	; 0x3f
    2606:	a1 97       	sbiw	r28, 0x21	; 33
    2608:	a1 96       	adiw	r28, 0x21	; 33
    260a:	8f ad       	ldd	r24, Y+63	; 0x3f
    260c:	a1 97       	sbiw	r28, 0x21	; 33
    260e:	88 23       	and	r24, r24
    2610:	c1 f6       	brne	.-80     	; 0x25c2 <main+0x12c>
		GPS_u8GetLat(x.LAT);
    2612:	8d e6       	ldi	r24, 0x6D	; 109
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <GPS_u8GetLat>
		GPS_u8GetLon(x.LON);
    261a:	8f e5       	ldi	r24, 0x5F	; 95
    261c:	91 e0       	ldi	r25, 0x01	; 1
    261e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <GPS_u8GetLon>
		TEMP_SENSOR_u16GetData(x.TEMP);
    2622:	8b e5       	ldi	r24, 0x5B	; 91
    2624:	91 e0       	ldi	r25, 0x01	; 1
    2626:	0e 94 2f 03 	call	0x65e	; 0x65e <TEMP_SENSOR_u16GetData>
		x.FIX=Data.FIX;
    262a:	8d a5       	ldd	r24, Y+45	; 0x2d
    262c:	80 93 7a 01 	sts	0x017A, r24
		LCD_vidClear();
    2630:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_vidClear>

		for(uint8 j=0;j<3;j++)
    2634:	19 82       	std	Y+1, r1	; 0x01
    2636:	1e c0       	rjmp	.+60     	; 0x2674 <main+0x1de>
			if (arr[j]) // active low
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	28 2f       	mov	r18, r24
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	ce 01       	movw	r24, r28
    2640:	8e 96       	adiw	r24, 0x2e	; 46
    2642:	fc 01       	movw	r30, r24
    2644:	e2 0f       	add	r30, r18
    2646:	f3 1f       	adc	r31, r19
    2648:	80 81       	ld	r24, Z
    264a:	88 23       	and	r24, r24
    264c:	81 f0       	breq	.+32     	; 0x266e <main+0x1d8>
			{
//				LCD_vidClear();
				LCD_vidString("SENDING MESSAGE");
    264e:	88 ee       	ldi	r24, 0xE8	; 232
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	0e 94 25 09 	call	0x124a	; 0x124a <LCD_vidString>

				arr[j]=0;
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	28 2f       	mov	r18, r24
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	ce 01       	movw	r24, r28
    265e:	8e 96       	adiw	r24, 0x2e	; 46
    2660:	fc 01       	movw	r30, r24
    2662:	e2 0f       	add	r30, r18
    2664:	f3 1f       	adc	r31, r19
    2666:	10 82       	st	Z, r1
				APP_send(j);
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	0e 94 a9 11 	call	0x2352	; 0x2352 <APP_send>
		GPS_u8GetLon(x.LON);
		TEMP_SENSOR_u16GetData(x.TEMP);
		x.FIX=Data.FIX;
		LCD_vidClear();

		for(uint8 j=0;j<3;j++)
    266e:	89 81       	ldd	r24, Y+1	; 0x01
    2670:	8f 5f       	subi	r24, 0xFF	; 255
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	89 81       	ldd	r24, Y+1	; 0x01
    2676:	83 30       	cpi	r24, 0x03	; 3
    2678:	f8 f2       	brcs	.-66     	; 0x2638 <main+0x1a2>
    267a:	77 cf       	rjmp	.-274    	; 0x256a <main+0xd4>

0000267c <__vector_10>:
}

void (*fun[])()={LCD_vidTask,SW_vidTask};
//uint32 update_time=0;
ISR(TIMER0_COMP_VECTOR_NUM )
{
    267c:	1f 92       	push	r1
    267e:	0f 92       	push	r0
    2680:	0f b6       	in	r0, 0x3f	; 63
    2682:	0f 92       	push	r0
    2684:	11 24       	eor	r1, r1
    2686:	2f 93       	push	r18
    2688:	3f 93       	push	r19
    268a:	4f 93       	push	r20
    268c:	5f 93       	push	r21
    268e:	6f 93       	push	r22
    2690:	7f 93       	push	r23
    2692:	8f 93       	push	r24
    2694:	9f 93       	push	r25
    2696:	af 93       	push	r26
    2698:	bf 93       	push	r27
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
    269e:	df 93       	push	r29
    26a0:	cf 93       	push	r28
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
	//	if((update_time++)>20000)
	//	{
	//		update_time=0;
	//		APP_state=APP_update;
	//	}
	LCD_vidTask();
    26a6:	0e 94 36 08 	call	0x106c	; 0x106c <LCD_vidTask>
	SW_vidTask();
    26aa:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <SW_vidTask>
//	fun[(updatetime())%2]();

}
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	ff 91       	pop	r31
    26b4:	ef 91       	pop	r30
    26b6:	bf 91       	pop	r27
    26b8:	af 91       	pop	r26
    26ba:	9f 91       	pop	r25
    26bc:	8f 91       	pop	r24
    26be:	7f 91       	pop	r23
    26c0:	6f 91       	pop	r22
    26c2:	5f 91       	pop	r21
    26c4:	4f 91       	pop	r20
    26c6:	3f 91       	pop	r19
    26c8:	2f 91       	pop	r18
    26ca:	0f 90       	pop	r0
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	0f 90       	pop	r0
    26d0:	1f 90       	pop	r1
    26d2:	18 95       	reti

000026d4 <ADC_vidInit>:

#include "ADC_LOCAL.h"


void ADC_vidInit()
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
	ADMUX_R =((ADC_REFRENCE		<< ADMUX_REFS_S 	)& ADMUX_REFS_M)
    26dc:	e7 e2       	ldi	r30, 0x27	; 39
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 e6       	ldi	r24, 0x60	; 96
    26e2:	80 83       	st	Z, r24
			|( ADC_ADLAR		<< ADMUX_ADLAR	);
//	ADMUX_R=0x60;
	ADCSRA_R=(1					<< ADCSRA_ADEN)
    26e4:	e6 e2       	ldi	r30, 0x26	; 38
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	87 e8       	ldi	r24, 0x87	; 135
    26ea:	80 83       	st	Z, r24
			|( ADC_AUTO_TRIGGER	<< ADCSRA_ADATE)
			|( ADC_INTERRUPT 	<< ADCSRA_ADIE)
			|((ADC_PRESCALAR 	<< ADCSRA_ADPS_S)&ADCSRA_ADPS_M);
	SFIOR_R|=((ADC_TRIGGER << SFIOR_ADTS_S)&SFIOR_ADTS_M);
    26ec:	a0 e5       	ldi	r26, 0x50	; 80
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e0 e5       	ldi	r30, 0x50	; 80
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8c 93       	st	X, r24
}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <ADC_Select>:
void ADC_Select(uint8 ADC)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	0f 92       	push	r0
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_R |= (ADC<<ADMUX_MUX_S)&ADMUX_MUX_M;
    270a:	a7 e2       	ldi	r26, 0x27	; 39
    270c:	b0 e0       	ldi	r27, 0x00	; 0
    270e:	e7 e2       	ldi	r30, 0x27	; 39
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	80 81       	ld	r24, Z
    2714:	98 2f       	mov	r25, r24
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	8f 71       	andi	r24, 0x1F	; 31
    271a:	89 2b       	or	r24, r25
    271c:	8c 93       	st	X, r24
}
    271e:	0f 90       	pop	r0
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <ADC_vidStartConversion>:
void ADC_vidStartConversion ()
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA_R,ADCSRA_ADSC);
    272e:	a6 e2       	ldi	r26, 0x26	; 38
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e6 e2       	ldi	r30, 0x26	; 38
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	80 64       	ori	r24, 0x40	; 64
    273a:	8c 93       	st	X, r24
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <ADC_u8ConvFinshed>:
uint8 ADC_u8ConvFinshed()
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	cd b7       	in	r28, 0x3d	; 61
    2748:	de b7       	in	r29, 0x3e	; 62
	return Get_Bit(ADCSRA_R,ADCSRA_ADIF);
    274a:	e6 e2       	ldi	r30, 0x26	; 38
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 81       	ld	r24, Z
    2750:	82 95       	swap	r24
    2752:	8f 70       	andi	r24, 0x0F	; 15
    2754:	81 70       	andi	r24, 0x01	; 1
}
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <ADC_u16GetData>:
uint16 ADC_u16GetData(void)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	00 d0       	rcall	.+0      	; 0x2762 <ADC_u16GetData+0x6>
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
	uint16 u16Data;

	u16Data =ADCL_R>>ADCL_S;
    2766:	e4 e2       	ldi	r30, 0x24	; 36
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	80 81       	ld	r24, Z
    276c:	82 95       	swap	r24
    276e:	86 95       	lsr	r24
    2770:	86 95       	lsr	r24
    2772:	83 70       	andi	r24, 0x03	; 3
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01
	u16Data|=ADCH_R<<ADCH_S;
    277c:	e5 e2       	ldi	r30, 0x25	; 37
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	88 2f       	mov	r24, r24
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	9c 01       	movw	r18, r24
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	82 2b       	or	r24, r18
    2796:	93 2b       	or	r25, r19
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(ADCSRA_R,ADCSRA_ADIF);
    279c:	a6 e2       	ldi	r26, 0x26	; 38
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e6 e2       	ldi	r30, 0x26	; 38
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	80 61       	ori	r24, 0x10	; 16
    27a8:	8c 93       	st	X, r24

	return (u16Data);
    27aa:	89 81       	ldd	r24, Y+1	; 0x01
    27ac:	9a 81       	ldd	r25, Y+2	; 0x02
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <ADC_u16Read>:


uint16 ADC_u16Read( uint8 ADC)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	0f 92       	push	r0
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	89 83       	std	Y+1, r24	; 0x01
	ADC_Select(ADC);
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	0e 94 7f 13 	call	0x26fe	; 0x26fe <ADC_Select>
	ADC_vidStartConversion();
    27ca:	0e 94 93 13 	call	0x2726	; 0x2726 <ADC_vidStartConversion>
	while(!ADC_u8ConvFinshed());
    27ce:	0e 94 a1 13 	call	0x2742	; 0x2742 <ADC_u8ConvFinshed>
    27d2:	88 23       	and	r24, r24
    27d4:	e1 f3       	breq	.-8      	; 0x27ce <ADC_u16Read+0x16>
	return (ADC_u16GetData());
    27d6:	0e 94 ae 13 	call	0x275c	; 0x275c <ADC_u16GetData>
}
    27da:	0f 90       	pop	r0
    27dc:	cf 91       	pop	r28
    27de:	df 91       	pop	r29
    27e0:	08 95       	ret

000027e2 <__mulsi3>:
    27e2:	62 9f       	mul	r22, r18
    27e4:	d0 01       	movw	r26, r0
    27e6:	73 9f       	mul	r23, r19
    27e8:	f0 01       	movw	r30, r0
    27ea:	82 9f       	mul	r24, r18
    27ec:	e0 0d       	add	r30, r0
    27ee:	f1 1d       	adc	r31, r1
    27f0:	64 9f       	mul	r22, r20
    27f2:	e0 0d       	add	r30, r0
    27f4:	f1 1d       	adc	r31, r1
    27f6:	92 9f       	mul	r25, r18
    27f8:	f0 0d       	add	r31, r0
    27fa:	83 9f       	mul	r24, r19
    27fc:	f0 0d       	add	r31, r0
    27fe:	74 9f       	mul	r23, r20
    2800:	f0 0d       	add	r31, r0
    2802:	65 9f       	mul	r22, r21
    2804:	f0 0d       	add	r31, r0
    2806:	99 27       	eor	r25, r25
    2808:	72 9f       	mul	r23, r18
    280a:	b0 0d       	add	r27, r0
    280c:	e1 1d       	adc	r30, r1
    280e:	f9 1f       	adc	r31, r25
    2810:	63 9f       	mul	r22, r19
    2812:	b0 0d       	add	r27, r0
    2814:	e1 1d       	adc	r30, r1
    2816:	f9 1f       	adc	r31, r25
    2818:	bd 01       	movw	r22, r26
    281a:	cf 01       	movw	r24, r30
    281c:	11 24       	eor	r1, r1
    281e:	08 95       	ret

00002820 <__udivmodhi4>:
    2820:	aa 1b       	sub	r26, r26
    2822:	bb 1b       	sub	r27, r27
    2824:	51 e1       	ldi	r21, 0x11	; 17
    2826:	07 c0       	rjmp	.+14     	; 0x2836 <__udivmodhi4_ep>

00002828 <__udivmodhi4_loop>:
    2828:	aa 1f       	adc	r26, r26
    282a:	bb 1f       	adc	r27, r27
    282c:	a6 17       	cp	r26, r22
    282e:	b7 07       	cpc	r27, r23
    2830:	10 f0       	brcs	.+4      	; 0x2836 <__udivmodhi4_ep>
    2832:	a6 1b       	sub	r26, r22
    2834:	b7 0b       	sbc	r27, r23

00002836 <__udivmodhi4_ep>:
    2836:	88 1f       	adc	r24, r24
    2838:	99 1f       	adc	r25, r25
    283a:	5a 95       	dec	r21
    283c:	a9 f7       	brne	.-22     	; 0x2828 <__udivmodhi4_loop>
    283e:	80 95       	com	r24
    2840:	90 95       	com	r25
    2842:	bc 01       	movw	r22, r24
    2844:	cd 01       	movw	r24, r26
    2846:	08 95       	ret

00002848 <__udivmodsi4>:
    2848:	a1 e2       	ldi	r26, 0x21	; 33
    284a:	1a 2e       	mov	r1, r26
    284c:	aa 1b       	sub	r26, r26
    284e:	bb 1b       	sub	r27, r27
    2850:	fd 01       	movw	r30, r26
    2852:	0d c0       	rjmp	.+26     	; 0x286e <__udivmodsi4_ep>

00002854 <__udivmodsi4_loop>:
    2854:	aa 1f       	adc	r26, r26
    2856:	bb 1f       	adc	r27, r27
    2858:	ee 1f       	adc	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	a2 17       	cp	r26, r18
    285e:	b3 07       	cpc	r27, r19
    2860:	e4 07       	cpc	r30, r20
    2862:	f5 07       	cpc	r31, r21
    2864:	20 f0       	brcs	.+8      	; 0x286e <__udivmodsi4_ep>
    2866:	a2 1b       	sub	r26, r18
    2868:	b3 0b       	sbc	r27, r19
    286a:	e4 0b       	sbc	r30, r20
    286c:	f5 0b       	sbc	r31, r21

0000286e <__udivmodsi4_ep>:
    286e:	66 1f       	adc	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	88 1f       	adc	r24, r24
    2874:	99 1f       	adc	r25, r25
    2876:	1a 94       	dec	r1
    2878:	69 f7       	brne	.-38     	; 0x2854 <__udivmodsi4_loop>
    287a:	60 95       	com	r22
    287c:	70 95       	com	r23
    287e:	80 95       	com	r24
    2880:	90 95       	com	r25
    2882:	9b 01       	movw	r18, r22
    2884:	ac 01       	movw	r20, r24
    2886:	bd 01       	movw	r22, r26
    2888:	cf 01       	movw	r24, r30
    288a:	08 95       	ret

0000288c <_exit>:
    288c:	f8 94       	cli

0000288e <__stop_program>:
    288e:	ff cf       	rjmp	.-2      	; 0x288e <__stop_program>
