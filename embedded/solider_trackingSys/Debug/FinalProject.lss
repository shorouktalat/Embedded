
FinalProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  00002b7e  00002c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000067  00800136  00800136  00002ce8  2**0
                  ALLOC
  3 .stab         00003dec  00000000  00000000  00002ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000025da  00000000  00000000  00006ad4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 11 	call	0x2380	; 0x2380 <main>
      8a:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_vidInit>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_vidInit+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	80 91 36 01 	lds	r24, 0x0136
      a0:	88 23       	and	r24, r24
      a2:	f1 f4       	brne	.+60     	; 0xe0 <UART_vidInit+0x4e>
      a4:	81 e0       	ldi	r24, 0x01	; 1
      a6:	80 93 36 01 	sts	0x0136, r24
      aa:	87 e6       	ldi	r24, 0x67	; 103
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	9a 83       	std	Y+2, r25	; 0x02
      b0:	89 83       	std	Y+1, r24	; 0x01
      b2:	eb e2       	ldi	r30, 0x2B	; 43
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	10 82       	st	Z, r1
      b8:	ea e2       	ldi	r30, 0x2A	; 42
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	88 e1       	ldi	r24, 0x18	; 24
      be:	80 83       	st	Z, r24
      c0:	e0 e4       	ldi	r30, 0x40	; 64
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	86 e8       	ldi	r24, 0x86	; 134
      c6:	80 83       	st	Z, r24
      c8:	e9 e2       	ldi	r30, 0x29	; 41
      ca:	f0 e0       	ldi	r31, 0x00	; 0
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	80 83       	st	Z, r24
      d0:	e0 e4       	ldi	r30, 0x40	; 64
      d2:	f0 e0       	ldi	r31, 0x00	; 0
      d4:	89 81       	ldd	r24, Y+1	; 0x01
      d6:	9a 81       	ldd	r25, Y+2	; 0x02
      d8:	89 2f       	mov	r24, r25
      da:	99 27       	eor	r25, r25
      dc:	8f 70       	andi	r24, 0x0F	; 15
      de:	80 83       	st	Z, r24
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <UART_vidSendChar>:
		UBRRL_R	=( u16Baud 	&0xff);
		UBRRH_R	=((u16Baud	>> 8 )& UBRRH_M);
	}
}
void UART_vidSendChar(uint8 u8Data)
{
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	0f 92       	push	r0
      f0:	cd b7       	in	r28, 0x3d	; 61
      f2:	de b7       	in	r29, 0x3e	; 62
      f4:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSRA_R&(1<<UCSRA_UDRE)));
      f6:	eb e2       	ldi	r30, 0x2B	; 43
      f8:	f0 e0       	ldi	r31, 0x00	; 0
      fa:	80 81       	ld	r24, Z
      fc:	88 2f       	mov	r24, r24
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	80 72       	andi	r24, 0x20	; 32
     102:	90 70       	andi	r25, 0x00	; 0
     104:	00 97       	sbiw	r24, 0x00	; 0
     106:	b9 f3       	breq	.-18     	; 0xf6 <UART_vidSendChar+0xc>
	UDR_R = u8Data;
     108:	ec e2       	ldi	r30, 0x2C	; 44
     10a:	f0 e0       	ldi	r31, 0x00	; 0
     10c:	89 81       	ldd	r24, Y+1	; 0x01
     10e:	80 83       	st	Z, r24
}
     110:	0f 90       	pop	r0
     112:	cf 91       	pop	r28
     114:	df 91       	pop	r29
     116:	08 95       	ret

00000118 <UART_u8RecieveChar>:

uint8 UART_u8RecieveChar(void)
{
     118:	df 93       	push	r29
     11a:	cf 93       	push	r28
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
	while (!(UCSRA_R&(1<<UCSRA_RXC)));
     120:	eb e2       	ldi	r30, 0x2B	; 43
     122:	f0 e0       	ldi	r31, 0x00	; 0
     124:	80 81       	ld	r24, Z
     126:	88 23       	and	r24, r24
     128:	dc f7       	brge	.-10     	; 0x120 <UART_u8RecieveChar+0x8>
	return UDR_R ;
     12a:	ec e2       	ldi	r30, 0x2C	; 44
     12c:	f0 e0       	ldi	r31, 0x00	; 0
     12e:	80 81       	ld	r24, Z
}
     130:	cf 91       	pop	r28
     132:	df 91       	pop	r29
     134:	08 95       	ret

00000136 <UART_u8DataReady>:
uint8 UART_u8DataReady()
{
     136:	df 93       	push	r29
     138:	cf 93       	push	r28
     13a:	cd b7       	in	r28, 0x3d	; 61
     13c:	de b7       	in	r29, 0x3e	; 62
	return (UCSRA_R&(1<<UCSRA_RXC));
     13e:	eb e2       	ldi	r30, 0x2B	; 43
     140:	f0 e0       	ldi	r31, 0x00	; 0
     142:	80 81       	ld	r24, Z
     144:	80 78       	andi	r24, 0x80	; 128
}
     146:	cf 91       	pop	r28
     148:	df 91       	pop	r29
     14a:	08 95       	ret

0000014c <UART_u8GetUdr>:
uint8 UART_u8GetUdr()
{
     14c:	df 93       	push	r29
     14e:	cf 93       	push	r28
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
	return UDR_R ;
     154:	ec e2       	ldi	r30, 0x2C	; 44
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	80 81       	ld	r24, Z
}
     15a:	cf 91       	pop	r28
     15c:	df 91       	pop	r29
     15e:	08 95       	ret

00000160 <UART_vidSendString>:
void UART_vidSendString(uint8 u8Data[], uint8 length)
{
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	00 d0       	rcall	.+0      	; 0x166 <UART_vidSendString+0x6>
     166:	00 d0       	rcall	.+0      	; 0x168 <UART_vidSendString+0x8>
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	9b 83       	std	Y+3, r25	; 0x03
     16e:	8a 83       	std	Y+2, r24	; 0x02
     170:	6c 83       	std	Y+4, r22	; 0x04
	for (uint8 i=0;i< length;i++)
     172:	19 82       	std	Y+1, r1	; 0x01
     174:	0e c0       	rjmp	.+28     	; 0x192 <UART_vidSendString+0x32>
	{
		UART_vidSendChar(u8Data[i]);
     176:	89 81       	ldd	r24, Y+1	; 0x01
     178:	28 2f       	mov	r18, r24
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	fc 01       	movw	r30, r24
     182:	e2 0f       	add	r30, r18
     184:	f3 1f       	adc	r31, r19
     186:	80 81       	ld	r24, Z
     188:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
{
	return UDR_R ;
}
void UART_vidSendString(uint8 u8Data[], uint8 length)
{
	for (uint8 i=0;i< length;i++)
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	8f 5f       	subi	r24, 0xFF	; 255
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	99 81       	ldd	r25, Y+1	; 0x01
     194:	8c 81       	ldd	r24, Y+4	; 0x04
     196:	98 17       	cp	r25, r24
     198:	70 f3       	brcs	.-36     	; 0x176 <UART_vidSendString+0x16>
	{
		UART_vidSendChar(u8Data[i]);
	}
}
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <UART_vidSendStringConfirmed>:
uint8 UART_vidSendStringConfirmed(uint8 * u8Data)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	00 d0       	rcall	.+0      	; 0x1ae <UART_vidSendStringConfirmed+0x6>
     1ae:	0f 92       	push	r0
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	9b 83       	std	Y+3, r25	; 0x03
     1b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 f =1;
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	15 c0       	rjmp	.+42     	; 0x1e8 <UART_vidSendStringConfirmed+0x40>
	while(f&&*u8Data)
	{
		UART_vidSendChar(*(u8Data));
     1be:	ea 81       	ldd	r30, Y+2	; 0x02
     1c0:	fb 81       	ldd	r31, Y+3	; 0x03
     1c2:	80 81       	ld	r24, Z
     1c4:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
		f = (UART_u8RecieveChar()==*(u8Data++));
     1c8:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
     1cc:	98 2f       	mov	r25, r24
     1ce:	ea 81       	ldd	r30, Y+2	; 0x02
     1d0:	fb 81       	ldd	r31, Y+3	; 0x03
     1d2:	80 81       	ld	r24, Z
     1d4:	19 82       	std	Y+1, r1	; 0x01
     1d6:	98 17       	cp	r25, r24
     1d8:	11 f4       	brne	.+4      	; 0x1de <UART_vidSendStringConfirmed+0x36>
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	89 83       	std	Y+1, r24	; 0x01
     1de:	8a 81       	ldd	r24, Y+2	; 0x02
     1e0:	9b 81       	ldd	r25, Y+3	; 0x03
     1e2:	01 96       	adiw	r24, 0x01	; 1
     1e4:	9b 83       	std	Y+3, r25	; 0x03
     1e6:	8a 83       	std	Y+2, r24	; 0x02
	}
}
uint8 UART_vidSendStringConfirmed(uint8 * u8Data)
{
	uint8 f =1;
	while(f&&*u8Data)
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	88 23       	and	r24, r24
     1ec:	29 f0       	breq	.+10     	; 0x1f8 <UART_vidSendStringConfirmed+0x50>
     1ee:	ea 81       	ldd	r30, Y+2	; 0x02
     1f0:	fb 81       	ldd	r31, Y+3	; 0x03
     1f2:	80 81       	ld	r24, Z
     1f4:	88 23       	and	r24, r24
     1f6:	19 f7       	brne	.-58     	; 0x1be <UART_vidSendStringConfirmed+0x16>
	{
		UART_vidSendChar(*(u8Data));
		f = (UART_u8RecieveChar()==*(u8Data++));
	}
	return f;
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
}
     1fa:	0f 90       	pop	r0
     1fc:	0f 90       	pop	r0
     1fe:	0f 90       	pop	r0
     200:	cf 91       	pop	r28
     202:	df 91       	pop	r29
     204:	08 95       	ret

00000206 <UART_vidRecieveString>:

void UART_vidRecieveString(uint8 u8Data[], uint8* length)
{
     206:	ff 92       	push	r15
     208:	0f 93       	push	r16
     20a:	1f 93       	push	r17
     20c:	df 93       	push	r29
     20e:	cf 93       	push	r28
     210:	00 d0       	rcall	.+0      	; 0x212 <UART_vidRecieveString+0xc>
     212:	00 d0       	rcall	.+0      	; 0x214 <UART_vidRecieveString+0xe>
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	9a 83       	std	Y+2, r25	; 0x02
     21a:	89 83       	std	Y+1, r24	; 0x01
     21c:	7c 83       	std	Y+4, r23	; 0x04
     21e:	6b 83       	std	Y+3, r22	; 0x03
	*length=0;
     220:	eb 81       	ldd	r30, Y+3	; 0x03
     222:	fc 81       	ldd	r31, Y+4	; 0x04
     224:	10 82       	st	Z, r1
	do
	{
		u8Data[(*length)++]=UART_u8RecieveChar();
     226:	eb 81       	ldd	r30, Y+3	; 0x03
     228:	fc 81       	ldd	r31, Y+4	; 0x04
     22a:	f0 80       	ld	r15, Z
     22c:	2f 2d       	mov	r18, r15
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	9a 81       	ldd	r25, Y+2	; 0x02
     234:	8c 01       	movw	r16, r24
     236:	02 0f       	add	r16, r18
     238:	13 1f       	adc	r17, r19
     23a:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
     23e:	f8 01       	movw	r30, r16
     240:	80 83       	st	Z, r24
     242:	8f 2d       	mov	r24, r15
     244:	8f 5f       	subi	r24, 0xFF	; 255
     246:	eb 81       	ldd	r30, Y+3	; 0x03
     248:	fc 81       	ldd	r31, Y+4	; 0x04
     24a:	80 83       	st	Z, r24
	}
	while(u8Data[(*length)-1]&&u8Data[(*length)-1]!='\r');
     24c:	eb 81       	ldd	r30, Y+3	; 0x03
     24e:	fc 81       	ldd	r31, Y+4	; 0x04
     250:	80 81       	ld	r24, Z
     252:	88 2f       	mov	r24, r24
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	9c 01       	movw	r18, r24
     258:	21 50       	subi	r18, 0x01	; 1
     25a:	30 40       	sbci	r19, 0x00	; 0
     25c:	89 81       	ldd	r24, Y+1	; 0x01
     25e:	9a 81       	ldd	r25, Y+2	; 0x02
     260:	fc 01       	movw	r30, r24
     262:	e2 0f       	add	r30, r18
     264:	f3 1f       	adc	r31, r19
     266:	80 81       	ld	r24, Z
     268:	88 23       	and	r24, r24
     26a:	81 f0       	breq	.+32     	; 0x28c <UART_vidRecieveString+0x86>
     26c:	eb 81       	ldd	r30, Y+3	; 0x03
     26e:	fc 81       	ldd	r31, Y+4	; 0x04
     270:	80 81       	ld	r24, Z
     272:	88 2f       	mov	r24, r24
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	9c 01       	movw	r18, r24
     278:	21 50       	subi	r18, 0x01	; 1
     27a:	30 40       	sbci	r19, 0x00	; 0
     27c:	89 81       	ldd	r24, Y+1	; 0x01
     27e:	9a 81       	ldd	r25, Y+2	; 0x02
     280:	fc 01       	movw	r30, r24
     282:	e2 0f       	add	r30, r18
     284:	f3 1f       	adc	r31, r19
     286:	80 81       	ld	r24, Z
     288:	8d 30       	cpi	r24, 0x0D	; 13
     28a:	69 f6       	brne	.-102    	; 0x226 <UART_vidRecieveString+0x20>
	u8Data[(*length)]=0;
     28c:	eb 81       	ldd	r30, Y+3	; 0x03
     28e:	fc 81       	ldd	r31, Y+4	; 0x04
     290:	80 81       	ld	r24, Z
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	9a 81       	ldd	r25, Y+2	; 0x02
     29a:	fc 01       	movw	r30, r24
     29c:	e2 0f       	add	r30, r18
     29e:	f3 1f       	adc	r31, r19
     2a0:	10 82       	st	Z, r1
}
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	1f 91       	pop	r17
     2b0:	0f 91       	pop	r16
     2b2:	ff 90       	pop	r15
     2b4:	08 95       	ret

000002b6 <_Debug>:


#ifdef DEBUGGING
void _Debug(int8 u8Data[])
{
     2b6:	df 93       	push	r29
     2b8:	cf 93       	push	r28
     2ba:	00 d0       	rcall	.+0      	; 0x2bc <_Debug+0x6>
     2bc:	0f 92       	push	r0
     2be:	cd b7       	in	r28, 0x3d	; 61
     2c0:	de b7       	in	r29, 0x3e	; 62
     2c2:	9b 83       	std	Y+3, r25	; 0x03
     2c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
     2c6:	19 82       	std	Y+1, r1	; 0x01
	if(!UART_INIT)
     2c8:	80 91 36 01 	lds	r24, 0x0136
     2cc:	88 23       	and	r24, r24
     2ce:	11 f4       	brne	.+4      	; 0x2d4 <_Debug+0x1e>
	{
		UART_vidInit();
     2d0:	0e 94 49 00 	call	0x92	; 0x92 <UART_vidInit>
	}
	do
	{
		UART_vidSendChar(u8Data[i]);
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	28 2f       	mov	r18, r24
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	8a 81       	ldd	r24, Y+2	; 0x02
     2dc:	9b 81       	ldd	r25, Y+3	; 0x03
     2de:	fc 01       	movw	r30, r24
     2e0:	e2 0f       	add	r30, r18
     2e2:	f3 1f       	adc	r31, r19
     2e4:	80 81       	ld	r24, Z
     2e6:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
	}
	while (u8Data[++i]);
     2ea:	89 81       	ldd	r24, Y+1	; 0x01
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
     2ee:	89 83       	std	Y+1, r24	; 0x01
     2f0:	89 81       	ldd	r24, Y+1	; 0x01
     2f2:	28 2f       	mov	r18, r24
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	8a 81       	ldd	r24, Y+2	; 0x02
     2f8:	9b 81       	ldd	r25, Y+3	; 0x03
     2fa:	fc 01       	movw	r30, r24
     2fc:	e2 0f       	add	r30, r18
     2fe:	f3 1f       	adc	r31, r19
     300:	80 81       	ld	r24, Z
     302:	88 23       	and	r24, r24
     304:	39 f7       	brne	.-50     	; 0x2d4 <_Debug+0x1e>
	UART_vidSendChar('\r');
     306:	8d e0       	ldi	r24, 0x0D	; 13
     308:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
}
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	0f 90       	pop	r0
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	08 95       	ret

00000318 <_Debug_value>:

void _Debug_value(uint32 u32Data)
{
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	df 93       	push	r29
     31e:	cf 93       	push	r28
     320:	cd b7       	in	r28, 0x3d	; 61
     322:	de b7       	in	r29, 0x3e	; 62
     324:	64 97       	sbiw	r28, 0x14	; 20
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	f8 94       	cli
     32a:	de bf       	out	0x3e, r29	; 62
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	cd bf       	out	0x3d, r28	; 61
     330:	69 8b       	std	Y+17, r22	; 0x11
     332:	7a 8b       	std	Y+18, r23	; 0x12
     334:	8b 8b       	std	Y+19, r24	; 0x13
     336:	9c 8b       	std	Y+20, r25	; 0x14
	int8 arr[11]={0};
     338:	8b e0       	ldi	r24, 0x0B	; 11
     33a:	fe 01       	movw	r30, r28
     33c:	36 96       	adiw	r30, 0x06	; 6
     33e:	df 01       	movw	r26, r30
     340:	98 2f       	mov	r25, r24
     342:	1d 92       	st	X+, r1
     344:	9a 95       	dec	r25
     346:	e9 f7       	brne	.-6      	; 0x342 <_Debug_value+0x2a>
	uint8 i=0;
     348:	1d 82       	std	Y+5, r1	; 0x05
	uint32 x=1000000;
     34a:	80 e4       	ldi	r24, 0x40	; 64
     34c:	92 e4       	ldi	r25, 0x42	; 66
     34e:	af e0       	ldi	r26, 0x0F	; 15
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	89 83       	std	Y+1, r24	; 0x01
     354:	9a 83       	std	Y+2, r25	; 0x02
     356:	ab 83       	std	Y+3, r26	; 0x03
     358:	bc 83       	std	Y+4, r27	; 0x04
     35a:	12 c0       	rjmp	.+36     	; 0x380 <_Debug_value+0x68>
	while (!(u32Data/x))
	{
		x/=10;
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	9a 81       	ldd	r25, Y+2	; 0x02
     360:	ab 81       	ldd	r26, Y+3	; 0x03
     362:	bc 81       	ldd	r27, Y+4	; 0x04
     364:	2a e0       	ldi	r18, 0x0A	; 10
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	40 e0       	ldi	r20, 0x00	; 0
     36a:	50 e0       	ldi	r21, 0x00	; 0
     36c:	bc 01       	movw	r22, r24
     36e:	cd 01       	movw	r24, r26
     370:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__udivmodsi4>
     374:	da 01       	movw	r26, r20
     376:	c9 01       	movw	r24, r18
     378:	89 83       	std	Y+1, r24	; 0x01
     37a:	9a 83       	std	Y+2, r25	; 0x02
     37c:	ab 83       	std	Y+3, r26	; 0x03
     37e:	bc 83       	std	Y+4, r27	; 0x04
void _Debug_value(uint32 u32Data)
{
	int8 arr[11]={0};
	uint8 i=0;
	uint32 x=1000000;
	while (!(u32Data/x))
     380:	89 89       	ldd	r24, Y+17	; 0x11
     382:	9a 89       	ldd	r25, Y+18	; 0x12
     384:	ab 89       	ldd	r26, Y+19	; 0x13
     386:	bc 89       	ldd	r27, Y+20	; 0x14
     388:	29 81       	ldd	r18, Y+1	; 0x01
     38a:	3a 81       	ldd	r19, Y+2	; 0x02
     38c:	4b 81       	ldd	r20, Y+3	; 0x03
     38e:	5c 81       	ldd	r21, Y+4	; 0x04
     390:	bc 01       	movw	r22, r24
     392:	cd 01       	movw	r24, r26
     394:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__udivmodsi4>
     398:	da 01       	movw	r26, r20
     39a:	c9 01       	movw	r24, r18
     39c:	00 97       	sbiw	r24, 0x00	; 0
     39e:	a1 05       	cpc	r26, r1
     3a0:	b1 05       	cpc	r27, r1
     3a2:	e1 f2       	breq	.-72     	; 0x35c <_Debug_value+0x44>
	{
		x/=10;
	}
	if (x)
     3a4:	89 81       	ldd	r24, Y+1	; 0x01
     3a6:	9a 81       	ldd	r25, Y+2	; 0x02
     3a8:	ab 81       	ldd	r26, Y+3	; 0x03
     3aa:	bc 81       	ldd	r27, Y+4	; 0x04
     3ac:	00 97       	sbiw	r24, 0x00	; 0
     3ae:	a1 05       	cpc	r26, r1
     3b0:	b1 05       	cpc	r27, r1
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <_Debug_value+0x9e>
     3b4:	4b c0       	rjmp	.+150    	; 0x44c <_Debug_value+0x134>
     3b6:	40 c0       	rjmp	.+128    	; 0x438 <_Debug_value+0x120>
	{
		while (x)
		{
			arr[i++]=(u32Data/x)+'0';
     3b8:	8d 81       	ldd	r24, Y+5	; 0x05
     3ba:	08 2f       	mov	r16, r24
     3bc:	10 e0       	ldi	r17, 0x00	; 0
     3be:	89 89       	ldd	r24, Y+17	; 0x11
     3c0:	9a 89       	ldd	r25, Y+18	; 0x12
     3c2:	ab 89       	ldd	r26, Y+19	; 0x13
     3c4:	bc 89       	ldd	r27, Y+20	; 0x14
     3c6:	29 81       	ldd	r18, Y+1	; 0x01
     3c8:	3a 81       	ldd	r19, Y+2	; 0x02
     3ca:	4b 81       	ldd	r20, Y+3	; 0x03
     3cc:	5c 81       	ldd	r21, Y+4	; 0x04
     3ce:	bc 01       	movw	r22, r24
     3d0:	cd 01       	movw	r24, r26
     3d2:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__udivmodsi4>
     3d6:	da 01       	movw	r26, r20
     3d8:	c9 01       	movw	r24, r18
     3da:	28 2f       	mov	r18, r24
     3dc:	20 5d       	subi	r18, 0xD0	; 208
     3de:	ce 01       	movw	r24, r28
     3e0:	06 96       	adiw	r24, 0x06	; 6
     3e2:	fc 01       	movw	r30, r24
     3e4:	e0 0f       	add	r30, r16
     3e6:	f1 1f       	adc	r31, r17
     3e8:	20 83       	st	Z, r18
     3ea:	8d 81       	ldd	r24, Y+5	; 0x05
     3ec:	8f 5f       	subi	r24, 0xFF	; 255
     3ee:	8d 83       	std	Y+5, r24	; 0x05
			u32Data -=(u32Data/x)*x;
     3f0:	89 89       	ldd	r24, Y+17	; 0x11
     3f2:	9a 89       	ldd	r25, Y+18	; 0x12
     3f4:	ab 89       	ldd	r26, Y+19	; 0x13
     3f6:	bc 89       	ldd	r27, Y+20	; 0x14
     3f8:	29 81       	ldd	r18, Y+1	; 0x01
     3fa:	3a 81       	ldd	r19, Y+2	; 0x02
     3fc:	4b 81       	ldd	r20, Y+3	; 0x03
     3fe:	5c 81       	ldd	r21, Y+4	; 0x04
     400:	bc 01       	movw	r22, r24
     402:	cd 01       	movw	r24, r26
     404:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__udivmodsi4>
     408:	dc 01       	movw	r26, r24
     40a:	cb 01       	movw	r24, r22
     40c:	89 8b       	std	Y+17, r24	; 0x11
     40e:	9a 8b       	std	Y+18, r25	; 0x12
     410:	ab 8b       	std	Y+19, r26	; 0x13
     412:	bc 8b       	std	Y+20, r27	; 0x14
			x/=10;
     414:	89 81       	ldd	r24, Y+1	; 0x01
     416:	9a 81       	ldd	r25, Y+2	; 0x02
     418:	ab 81       	ldd	r26, Y+3	; 0x03
     41a:	bc 81       	ldd	r27, Y+4	; 0x04
     41c:	2a e0       	ldi	r18, 0x0A	; 10
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	bc 01       	movw	r22, r24
     426:	cd 01       	movw	r24, r26
     428:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__udivmodsi4>
     42c:	da 01       	movw	r26, r20
     42e:	c9 01       	movw	r24, r18
     430:	89 83       	std	Y+1, r24	; 0x01
     432:	9a 83       	std	Y+2, r25	; 0x02
     434:	ab 83       	std	Y+3, r26	; 0x03
     436:	bc 83       	std	Y+4, r27	; 0x04
	{
		x/=10;
	}
	if (x)
	{
		while (x)
     438:	89 81       	ldd	r24, Y+1	; 0x01
     43a:	9a 81       	ldd	r25, Y+2	; 0x02
     43c:	ab 81       	ldd	r26, Y+3	; 0x03
     43e:	bc 81       	ldd	r27, Y+4	; 0x04
     440:	00 97       	sbiw	r24, 0x00	; 0
     442:	a1 05       	cpc	r26, r1
     444:	b1 05       	cpc	r27, r1
     446:	09 f0       	breq	.+2      	; 0x44a <_Debug_value+0x132>
     448:	b7 cf       	rjmp	.-146    	; 0x3b8 <_Debug_value+0xa0>
     44a:	0d c0       	rjmp	.+26     	; 0x466 <_Debug_value+0x14e>
			x/=10;
		}
	}
	else
	{
		arr[i++]='0';
     44c:	8d 81       	ldd	r24, Y+5	; 0x05
     44e:	28 2f       	mov	r18, r24
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	ce 01       	movw	r24, r28
     454:	06 96       	adiw	r24, 0x06	; 6
     456:	fc 01       	movw	r30, r24
     458:	e2 0f       	add	r30, r18
     45a:	f3 1f       	adc	r31, r19
     45c:	80 e3       	ldi	r24, 0x30	; 48
     45e:	80 83       	st	Z, r24
     460:	8d 81       	ldd	r24, Y+5	; 0x05
     462:	8f 5f       	subi	r24, 0xFF	; 255
     464:	8d 83       	std	Y+5, r24	; 0x05
	}
	_Debug(arr);
     466:	ce 01       	movw	r24, r28
     468:	06 96       	adiw	r24, 0x06	; 6
     46a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <_Debug>

}
     46e:	64 96       	adiw	r28, 0x14	; 20
     470:	0f b6       	in	r0, 0x3f	; 63
     472:	f8 94       	cli
     474:	de bf       	out	0x3e, r29	; 62
     476:	0f be       	out	0x3f, r0	; 63
     478:	cd bf       	out	0x3d, r28	; 61
     47a:	cf 91       	pop	r28
     47c:	df 91       	pop	r29
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <updatetime>:


static uint32 time=0;
static uint32 d=0;
uint32 updatetime()
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
	return time++;
     48c:	80 91 37 01 	lds	r24, 0x0137
     490:	90 91 38 01 	lds	r25, 0x0138
     494:	a0 91 39 01 	lds	r26, 0x0139
     498:	b0 91 3a 01 	lds	r27, 0x013A
     49c:	9c 01       	movw	r18, r24
     49e:	ad 01       	movw	r20, r26
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	a1 1d       	adc	r26, r1
     4a4:	b1 1d       	adc	r27, r1
     4a6:	80 93 37 01 	sts	0x0137, r24
     4aa:	90 93 38 01 	sts	0x0138, r25
     4ae:	a0 93 39 01 	sts	0x0139, r26
     4b2:	b0 93 3a 01 	sts	0x013A, r27
     4b6:	da 01       	movw	r26, r20
     4b8:	c9 01       	movw	r24, r18
}
     4ba:	bc 01       	movw	r22, r24
     4bc:	cd 01       	movw	r24, r26
     4be:	cf 91       	pop	r28
     4c0:	df 91       	pop	r29
     4c2:	08 95       	ret

000004c4 <millis>:
uint32 millis()
{
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
	return (time /(TIMER0_TICK_PER_SECOND/1000	));
     4cc:	80 91 37 01 	lds	r24, 0x0137
     4d0:	90 91 38 01 	lds	r25, 0x0138
     4d4:	a0 91 39 01 	lds	r26, 0x0139
     4d8:	b0 91 3a 01 	lds	r27, 0x013A
}
     4dc:	bc 01       	movw	r22, r24
     4de:	cd 01       	movw	r24, r26
     4e0:	cf 91       	pop	r28
     4e2:	df 91       	pop	r29
     4e4:	08 95       	ret

000004e6 <_wait>:
void _wait(uint32 mils)
{
     4e6:	df 93       	push	r29
     4e8:	cf 93       	push	r28
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <_wait+0x6>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <_wait+0x8>
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	69 83       	std	Y+1, r22	; 0x01
     4f4:	7a 83       	std	Y+2, r23	; 0x02
     4f6:	8b 83       	std	Y+3, r24	; 0x03
     4f8:	9c 83       	std	Y+4, r25	; 0x04
	d= (millis()+1);
     4fa:	0e 94 62 02 	call	0x4c4	; 0x4c4 <millis>
     4fe:	dc 01       	movw	r26, r24
     500:	cb 01       	movw	r24, r22
     502:	01 96       	adiw	r24, 0x01	; 1
     504:	a1 1d       	adc	r26, r1
     506:	b1 1d       	adc	r27, r1
     508:	80 93 3b 01 	sts	0x013B, r24
     50c:	90 93 3c 01 	sts	0x013C, r25
     510:	a0 93 3d 01 	sts	0x013D, r26
     514:	b0 93 3e 01 	sts	0x013E, r27
	while(millis()<2000);
     518:	0e 94 62 02 	call	0x4c4	; 0x4c4 <millis>
     51c:	dc 01       	movw	r26, r24
     51e:	cb 01       	movw	r24, r22
     520:	80 3d       	cpi	r24, 0xD0	; 208
     522:	27 e0       	ldi	r18, 0x07	; 7
     524:	92 07       	cpc	r25, r18
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	a2 07       	cpc	r26, r18
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	b2 07       	cpc	r27, r18
     52e:	a0 f3       	brcs	.-24     	; 0x518 <_wait+0x32>
}
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	cf 91       	pop	r28
     53a:	df 91       	pop	r29
     53c:	08 95       	ret

0000053e <TIMER_vidInit>:
void TIMER_vidInit()
{
     53e:	df 93       	push	r29
     540:	cf 93       	push	r28
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
	TCCR0_R =(0								<<TCCR0_FOC0	)
     546:	e3 e5       	ldi	r30, 0x53	; 83
     548:	f0 e0       	ldi	r31, 0x00	; 0
     54a:	8b e0       	ldi	r24, 0x0B	; 11
     54c:	80 83       	st	Z, r24
			|(Get_Bit(TIMER0_MODE,0)		<<TCCR0_WGM00	)
			|(Get_Bit(TIMER0_MODE,1)		<<TCCR0_WGM01	)
			|((TIMER0_OC0_MODE				<<TCCR0_COM_S	)&TCCR0_COM_M	)
			|((TIMER0_CLOCK					<<TCCR0_CS_S	)&TCCR0_CS_M	);

	TIMSK_R =(TIMER0_OVERFLOW_INT			<<TIMSK_TOIE0	)
     54e:	e9 e5       	ldi	r30, 0x59	; 89
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	82 e0       	ldi	r24, 0x02	; 2
     554:	80 83       	st	Z, r24
			|(TIMER0_OCR_INT				<<TIMSK_OCIE0	);

	OCR0_R	= TIMER0_OCR0;
     556:	ec e5       	ldi	r30, 0x5C	; 92
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	89 ef       	ldi	r24, 0xF9	; 249
     55c:	80 83       	st	Z, r24
}
     55e:	cf 91       	pop	r28
     560:	df 91       	pop	r29
     562:	08 95       	ret

00000564 <_delay_ms>:

void _delay_ms(uint16 U16Time)
{
     564:	df 93       	push	r29
     566:	cf 93       	push	r28
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	28 97       	sbiw	r28, 0x08	; 8
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	98 87       	std	Y+8, r25	; 0x08
     57a:	8f 83       	std	Y+7, r24	; 0x07
	uint16 U16i;
	uint8 TCT,OCT,TCNT,SS;
	SS = SREG;
     57c:	ef e5       	ldi	r30, 0x5F	; 95
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	89 83       	std	Y+1, r24	; 0x01
	Disable_Global_Interrupt();
     584:	af e5       	ldi	r26, 0x5F	; 95
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	ef e5       	ldi	r30, 0x5F	; 95
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	8f 77       	andi	r24, 0x7F	; 127
     590:	8c 93       	st	X, r24
	TCT = TCCR0_R;
     592:	e3 e5       	ldi	r30, 0x53	; 83
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	8c 83       	std	Y+4, r24	; 0x04
	OCT = OCR0_R;
     59a:	ec e5       	ldi	r30, 0x5C	; 92
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 81       	ld	r24, Z
     5a0:	8b 83       	std	Y+3, r24	; 0x03
	TCNT=TCNT0_R;
     5a2:	e2 e5       	ldi	r30, 0x52	; 82
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	8a 83       	std	Y+2, r24	; 0x02
	TCCR0_R = (TIMER0_CLOCK_PRESCALAR_256|Get_Bit(TIMER0_MODE_CTC,0)<<TCCR0_WGM00|Get_Bit(TIMER0_MODE_CTC,1)<<TCCR0_WGM01);
     5aa:	e3 e5       	ldi	r30, 0x53	; 83
     5ac:	f0 e0       	ldi	r31, 0x00	; 0
     5ae:	8c e0       	ldi	r24, 0x0C	; 12
     5b0:	80 83       	st	Z, r24
	OCR0_R  = 200;
     5b2:	ec e5       	ldi	r30, 0x5C	; 92
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	88 ec       	ldi	r24, 0xC8	; 200
     5b8:	80 83       	st	Z, r24
	for (U16i=0;U16i<U16Time;U16i++)
     5ba:	1e 82       	std	Y+6, r1	; 0x06
     5bc:	1d 82       	std	Y+5, r1	; 0x05
     5be:	16 c0       	rjmp	.+44     	; 0x5ec <_delay_ms+0x88>
	{
		while(!Get_Bit(TIFR_R,1));
     5c0:	e8 e5       	ldi	r30, 0x58	; 88
     5c2:	f0 e0       	ldi	r31, 0x00	; 0
     5c4:	80 81       	ld	r24, Z
     5c6:	86 95       	lsr	r24
     5c8:	88 2f       	mov	r24, r24
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	81 70       	andi	r24, 0x01	; 1
     5ce:	90 70       	andi	r25, 0x00	; 0
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	b1 f3       	breq	.-20     	; 0x5c0 <_delay_ms+0x5c>
		Set_Bit(TIFR_R,1);
     5d4:	a8 e5       	ldi	r26, 0x58	; 88
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	e8 e5       	ldi	r30, 0x58	; 88
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	82 60       	ori	r24, 0x02	; 2
     5e0:	8c 93       	st	X, r24
	TCT = TCCR0_R;
	OCT = OCR0_R;
	TCNT=TCNT0_R;
	TCCR0_R = (TIMER0_CLOCK_PRESCALAR_256|Get_Bit(TIMER0_MODE_CTC,0)<<TCCR0_WGM00|Get_Bit(TIMER0_MODE_CTC,1)<<TCCR0_WGM01);
	OCR0_R  = 200;
	for (U16i=0;U16i<U16Time;U16i++)
     5e2:	8d 81       	ldd	r24, Y+5	; 0x05
     5e4:	9e 81       	ldd	r25, Y+6	; 0x06
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	9e 83       	std	Y+6, r25	; 0x06
     5ea:	8d 83       	std	Y+5, r24	; 0x05
     5ec:	2d 81       	ldd	r18, Y+5	; 0x05
     5ee:	3e 81       	ldd	r19, Y+6	; 0x06
     5f0:	8f 81       	ldd	r24, Y+7	; 0x07
     5f2:	98 85       	ldd	r25, Y+8	; 0x08
     5f4:	28 17       	cp	r18, r24
     5f6:	39 07       	cpc	r19, r25
     5f8:	18 f3       	brcs	.-58     	; 0x5c0 <_delay_ms+0x5c>
	{
		while(!Get_Bit(TIFR_R,1));
		Set_Bit(TIFR_R,1);
	}
	TCNT0_R=TCNT;
     5fa:	e2 e5       	ldi	r30, 0x52	; 82
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	80 83       	st	Z, r24
	TCCR0_R = TCT;
     602:	e3 e5       	ldi	r30, 0x53	; 83
     604:	f0 e0       	ldi	r31, 0x00	; 0
     606:	8c 81       	ldd	r24, Y+4	; 0x04
     608:	80 83       	st	Z, r24
	OCR0_R = OCT;
     60a:	ec e5       	ldi	r30, 0x5C	; 92
     60c:	f0 e0       	ldi	r31, 0x00	; 0
     60e:	8b 81       	ldd	r24, Y+3	; 0x03
     610:	80 83       	st	Z, r24
	SREG=SS;
     612:	ef e5       	ldi	r30, 0x5F	; 95
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	80 83       	st	Z, r24
}
     61a:	28 96       	adiw	r28, 0x08	; 8
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	cf 91       	pop	r28
     628:	df 91       	pop	r29
     62a:	08 95       	ret

0000062c <TEMP_SENSOR_vidInit>:
 */

#include "TEMP_SENSOR_LOCAL.h"

void TEMP_SENSOR_vidInit()
{
     62c:	df 93       	push	r29
     62e:	cf 93       	push	r28
     630:	cd b7       	in	r28, 0x3d	; 61
     632:	de b7       	in	r29, 0x3e	; 62
	ADC_vidInit();
     634:	0e 94 c2 14 	call	0x2984	; 0x2984 <ADC_vidInit>
	DIO_vidInit();
     638:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <DIO_vidInit>
	DIO_u8SetPinDir(Temp_Sensor_pin,INPUT);
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
}
     644:	cf 91       	pop	r28
     646:	df 91       	pop	r29
     648:	08 95       	ret

0000064a <TEMP_SENSOR_u16GetData>:

uint16 TEMP_SENSOR_u16GetData(int8 TEMP_ARR[])
{
     64a:	df 93       	push	r29
     64c:	cf 93       	push	r28
     64e:	00 d0       	rcall	.+0      	; 0x650 <TEMP_SENSOR_u16GetData+0x6>
     650:	00 d0       	rcall	.+0      	; 0x652 <TEMP_SENSOR_u16GetData+0x8>
     652:	00 d0       	rcall	.+0      	; 0x654 <TEMP_SENSOR_u16GetData+0xa>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	9e 83       	std	Y+6, r25	; 0x06
     65a:	8d 83       	std	Y+5, r24	; 0x05
	uint16 temp=(((uint32)ADC_u16Read(Temp_Sensor_pin)*500)/1023);
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	0e 94 34 15 	call	0x2a68	; 0x2a68 <ADC_u16Read>
     662:	cc 01       	movw	r24, r24
     664:	a0 e0       	ldi	r26, 0x00	; 0
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	24 ef       	ldi	r18, 0xF4	; 244
     66a:	31 e0       	ldi	r19, 0x01	; 1
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	bc 01       	movw	r22, r24
     672:	cd 01       	movw	r24, r26
     674:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__mulsi3>
     678:	dc 01       	movw	r26, r24
     67a:	cb 01       	movw	r24, r22
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	33 e0       	ldi	r19, 0x03	; 3
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	bc 01       	movw	r22, r24
     686:	cd 01       	movw	r24, r26
     688:	0e 94 9b 15 	call	0x2b36	; 0x2b36 <__udivmodsi4>
     68c:	da 01       	movw	r26, r20
     68e:	c9 01       	movw	r24, r18
     690:	9c 83       	std	Y+4, r25	; 0x04
     692:	8b 83       	std	Y+3, r24	; 0x03
	uint16 t=temp;
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	9a 83       	std	Y+2, r25	; 0x02
     69a:	89 83       	std	Y+1, r24	; 0x01

	TEMP_ARR[2]=(t%10)+'0';t/=10;
     69c:	8d 81       	ldd	r24, Y+5	; 0x05
     69e:	9e 81       	ldd	r25, Y+6	; 0x06
     6a0:	fc 01       	movw	r30, r24
     6a2:	32 96       	adiw	r30, 0x02	; 2
     6a4:	89 81       	ldd	r24, Y+1	; 0x01
     6a6:	9a 81       	ldd	r25, Y+2	; 0x02
     6a8:	2a e0       	ldi	r18, 0x0A	; 10
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	b9 01       	movw	r22, r18
     6ae:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodhi4>
     6b2:	80 5d       	subi	r24, 0xD0	; 208
     6b4:	80 83       	st	Z, r24
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	9a 81       	ldd	r25, Y+2	; 0x02
     6ba:	2a e0       	ldi	r18, 0x0A	; 10
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	b9 01       	movw	r22, r18
     6c0:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodhi4>
     6c4:	cb 01       	movw	r24, r22
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
	TEMP_ARR[1]=(t%10)+'0';t/=10;
     6ca:	8d 81       	ldd	r24, Y+5	; 0x05
     6cc:	9e 81       	ldd	r25, Y+6	; 0x06
     6ce:	fc 01       	movw	r30, r24
     6d0:	31 96       	adiw	r30, 0x01	; 1
     6d2:	89 81       	ldd	r24, Y+1	; 0x01
     6d4:	9a 81       	ldd	r25, Y+2	; 0x02
     6d6:	2a e0       	ldi	r18, 0x0A	; 10
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	b9 01       	movw	r22, r18
     6dc:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodhi4>
     6e0:	80 5d       	subi	r24, 0xD0	; 208
     6e2:	80 83       	st	Z, r24
     6e4:	89 81       	ldd	r24, Y+1	; 0x01
     6e6:	9a 81       	ldd	r25, Y+2	; 0x02
     6e8:	2a e0       	ldi	r18, 0x0A	; 10
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	b9 01       	movw	r22, r18
     6ee:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodhi4>
     6f2:	cb 01       	movw	r24, r22
     6f4:	9a 83       	std	Y+2, r25	; 0x02
     6f6:	89 83       	std	Y+1, r24	; 0x01
	TEMP_ARR[0]=(t%10)+'0';
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	9a 81       	ldd	r25, Y+2	; 0x02
     6fc:	2a e0       	ldi	r18, 0x0A	; 10
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	b9 01       	movw	r22, r18
     702:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__udivmodhi4>
     706:	80 5d       	subi	r24, 0xD0	; 208
     708:	ed 81       	ldd	r30, Y+5	; 0x05
     70a:	fe 81       	ldd	r31, Y+6	; 0x06
     70c:	80 83       	st	Z, r24

	return temp;
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	9c 81       	ldd	r25, Y+4	; 0x04
}
     712:	26 96       	adiw	r28, 0x06	; 6
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <SW_vidInit>:
static	uint8 PBN_state[PBN_COUNT] = {SWITCH_STATE_Error};
static	uint8 u8Count=0;


void SW_vidInit(void)
{
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62

}
     72c:	cf 91       	pop	r28
     72e:	df 91       	pop	r29
     730:	08 95       	ret

00000732 <SW_u8AddPBN>:

uint8 SW_u8AddPBN (uint8 u8NewPBN)
{
     732:	df 93       	push	r29
     734:	cf 93       	push	r28
     736:	00 d0       	rcall	.+0      	; 0x738 <SW_u8AddPBN+0x6>
     738:	00 d0       	rcall	.+0      	; 0x73a <SW_u8AddPBN+0x8>
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8i=0,u8Flag=0;
     740:	1a 82       	std	Y+2, r1	; 0x02
     742:	19 82       	std	Y+1, r1	; 0x01
	if (u8Count>=PBN_COUNT)
     744:	80 91 42 01 	lds	r24, 0x0142
     748:	83 30       	cpi	r24, 0x03	; 3
     74a:	90 f0       	brcs	.+36     	; 0x770 <SW_u8AddPBN+0x3e>
	{
		u8Flag =1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	89 83       	std	Y+1, r24	; 0x01
     750:	0f c0       	rjmp	.+30     	; 0x770 <SW_u8AddPBN+0x3e>
	}
	for ( ;(u8i<u8Count) && (!u8Flag) ;u8i++)
	{
		if (PBN[u8i]==u8NewPBN)
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	fc 01       	movw	r30, r24
     75a:	e1 5c       	subi	r30, 0xC1	; 193
     75c:	fe 4f       	sbci	r31, 0xFE	; 254
     75e:	90 81       	ld	r25, Z
     760:	8b 81       	ldd	r24, Y+3	; 0x03
     762:	98 17       	cp	r25, r24
     764:	11 f4       	brne	.+4      	; 0x76a <SW_u8AddPBN+0x38>
		{
			u8Flag =1;
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	89 83       	std	Y+1, r24	; 0x01
	uint8 u8i=0,u8Flag=0;
	if (u8Count>=PBN_COUNT)
	{
		u8Flag =1;
	}
	for ( ;(u8i<u8Count) && (!u8Flag) ;u8i++)
     76a:	8a 81       	ldd	r24, Y+2	; 0x02
     76c:	8f 5f       	subi	r24, 0xFF	; 255
     76e:	8a 83       	std	Y+2, r24	; 0x02
     770:	90 91 42 01 	lds	r25, 0x0142
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	89 17       	cp	r24, r25
     778:	18 f4       	brcc	.+6      	; 0x780 <SW_u8AddPBN+0x4e>
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	88 23       	and	r24, r24
     77e:	49 f3       	breq	.-46     	; 0x752 <SW_u8AddPBN+0x20>
		if (PBN[u8i]==u8NewPBN)
		{
			u8Flag =1;
		}
	}
	if (!u8Flag)
     780:	89 81       	ldd	r24, Y+1	; 0x01
     782:	88 23       	and	r24, r24
     784:	89 f4       	brne	.+34     	; 0x7a8 <SW_u8AddPBN+0x76>
	{
		PBN[u8Count++]=u8NewPBN;
     786:	20 91 42 01 	lds	r18, 0x0142
     78a:	82 2f       	mov	r24, r18
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	fc 01       	movw	r30, r24
     790:	e1 5c       	subi	r30, 0xC1	; 193
     792:	fe 4f       	sbci	r31, 0xFE	; 254
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	80 83       	st	Z, r24
     798:	82 2f       	mov	r24, r18
     79a:	8f 5f       	subi	r24, 0xFF	; 255
     79c:	80 93 42 01 	sts	0x0142, r24
		DIO_u8SetPinDir(u8NewPBN,INPUT_PULLUP);
     7a0:	8b 81       	ldd	r24, Y+3	; 0x03
     7a2:	62 e0       	ldi	r22, 0x02	; 2
     7a4:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
	}
	return !u8Flag;
     7a8:	1c 82       	std	Y+4, r1	; 0x04
     7aa:	89 81       	ldd	r24, Y+1	; 0x01
     7ac:	88 23       	and	r24, r24
     7ae:	11 f4       	brne	.+4      	; 0x7b4 <SW_u8AddPBN+0x82>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	8c 83       	std	Y+4, r24	; 0x04
     7b4:	8c 81       	ldd	r24, Y+4	; 0x04
}
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	cf 91       	pop	r28
     7c0:	df 91       	pop	r29
     7c2:	08 95       	ret

000007c4 <SW_vidTask>:

void SW_vidTask(void)
{
     7c4:	df 93       	push	r29
     7c6:	cf 93       	push	r28
     7c8:	00 d0       	rcall	.+0      	; 0x7ca <SW_vidTask+0x6>
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
	static uint8 counter[PBN_COUNT] = {0},u8i=0;

	if (u8i < u8Count)
     7ce:	90 91 43 01 	lds	r25, 0x0143
     7d2:	80 91 42 01 	lds	r24, 0x0142
     7d6:	98 17       	cp	r25, r24
     7d8:	08 f0       	brcs	.+2      	; 0x7dc <SW_vidTask+0x18>
     7da:	ce c0       	rjmp	.+412    	; 0x978 <__stack+0x119>
	{
		switch (PBN_state[u8i])
     7dc:	80 91 43 01 	lds	r24, 0x0143
     7e0:	88 2f       	mov	r24, r24
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	fc 01       	movw	r30, r24
     7e6:	e1 54       	subi	r30, 0x41	; 65
     7e8:	ff 4f       	sbci	r31, 0xFF	; 255
     7ea:	80 81       	ld	r24, Z
     7ec:	28 2f       	mov	r18, r24
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	3a 83       	std	Y+2, r19	; 0x02
     7f2:	29 83       	std	Y+1, r18	; 0x01
     7f4:	89 81       	ldd	r24, Y+1	; 0x01
     7f6:	9a 81       	ldd	r25, Y+2	; 0x02
     7f8:	81 30       	cpi	r24, 0x01	; 1
     7fa:	91 05       	cpc	r25, r1
     7fc:	09 f4       	brne	.+2      	; 0x800 <SW_vidTask+0x3c>
     7fe:	63 c0       	rjmp	.+198    	; 0x8c6 <__stack+0x67>
     800:	29 81       	ldd	r18, Y+1	; 0x01
     802:	3a 81       	ldd	r19, Y+2	; 0x02
     804:	22 30       	cpi	r18, 0x02	; 2
     806:	31 05       	cpc	r19, r1
     808:	2c f4       	brge	.+10     	; 0x814 <SW_vidTask+0x50>
     80a:	89 81       	ldd	r24, Y+1	; 0x01
     80c:	9a 81       	ldd	r25, Y+2	; 0x02
     80e:	00 97       	sbiw	r24, 0x00	; 0
     810:	69 f0       	breq	.+26     	; 0x82c <SW_vidTask+0x68>
     812:	a4 c0       	rjmp	.+328    	; 0x95c <__stack+0xfd>
     814:	29 81       	ldd	r18, Y+1	; 0x01
     816:	3a 81       	ldd	r19, Y+2	; 0x02
     818:	22 30       	cpi	r18, 0x02	; 2
     81a:	31 05       	cpc	r19, r1
     81c:	09 f4       	brne	.+2      	; 0x820 <SW_vidTask+0x5c>
     81e:	6a c0       	rjmp	.+212    	; 0x8f4 <__stack+0x95>
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	83 30       	cpi	r24, 0x03	; 3
     826:	91 05       	cpc	r25, r1
     828:	c1 f0       	breq	.+48     	; 0x85a <SW_vidTask+0x96>
     82a:	98 c0       	rjmp	.+304    	; 0x95c <__stack+0xfd>
		{
		case Released 	:
			if (DIO_u8ReadPin(PBN[u8i])==LOW)
     82c:	80 91 43 01 	lds	r24, 0x0143
     830:	88 2f       	mov	r24, r24
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	fc 01       	movw	r30, r24
     836:	e1 5c       	subi	r30, 0xC1	; 193
     838:	fe 4f       	sbci	r31, 0xFE	; 254
     83a:	80 81       	ld	r24, Z
     83c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <DIO_u8ReadPin>
     840:	88 23       	and	r24, r24
     842:	09 f0       	breq	.+2      	; 0x846 <SW_vidTask+0x82>
     844:	93 c0       	rjmp	.+294    	; 0x96c <__stack+0x10d>
				PBN_state[u8i] = PrePushed;
     846:	80 91 43 01 	lds	r24, 0x0143
     84a:	88 2f       	mov	r24, r24
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	fc 01       	movw	r30, r24
     850:	e1 54       	subi	r30, 0x41	; 65
     852:	ff 4f       	sbci	r31, 0xFF	; 255
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	80 83       	st	Z, r24
     858:	89 c0       	rjmp	.+274    	; 0x96c <__stack+0x10d>
			break;
		case PrePushed	:
			if (DIO_u8ReadPin(PBN[u8i])==LOW)
     85a:	80 91 43 01 	lds	r24, 0x0143
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	fc 01       	movw	r30, r24
     864:	e1 5c       	subi	r30, 0xC1	; 193
     866:	fe 4f       	sbci	r31, 0xFE	; 254
     868:	80 81       	ld	r24, Z
     86a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <DIO_u8ReadPin>
     86e:	88 23       	and	r24, r24
     870:	69 f4       	brne	.+26     	; 0x88c <__stack+0x2d>
				counter[u8i]++;
     872:	80 91 43 01 	lds	r24, 0x0143
     876:	28 2f       	mov	r18, r24
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	f9 01       	movw	r30, r18
     87c:	ec 5b       	subi	r30, 0xBC	; 188
     87e:	fe 4f       	sbci	r31, 0xFE	; 254
     880:	80 81       	ld	r24, Z
     882:	8f 5f       	subi	r24, 0xFF	; 255
     884:	f9 01       	movw	r30, r18
     886:	ec 5b       	subi	r30, 0xBC	; 188
     888:	fe 4f       	sbci	r31, 0xFE	; 254
     88a:	80 83       	st	Z, r24
			if (counter[u8i]>=SENS_COUNT)
     88c:	80 91 43 01 	lds	r24, 0x0143
     890:	88 2f       	mov	r24, r24
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	fc 01       	movw	r30, r24
     896:	ec 5b       	subi	r30, 0xBC	; 188
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	80 81       	ld	r24, Z
     89c:	83 30       	cpi	r24, 0x03	; 3
     89e:	08 f4       	brcc	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	65 c0       	rjmp	.+202    	; 0x96c <__stack+0x10d>
			{
				counter[u8i]=0;
     8a2:	80 91 43 01 	lds	r24, 0x0143
     8a6:	88 2f       	mov	r24, r24
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	fc 01       	movw	r30, r24
     8ac:	ec 5b       	subi	r30, 0xBC	; 188
     8ae:	fe 4f       	sbci	r31, 0xFE	; 254
     8b0:	10 82       	st	Z, r1
				PBN_state[u8i] = Pushed;
     8b2:	80 91 43 01 	lds	r24, 0x0143
     8b6:	88 2f       	mov	r24, r24
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	fc 01       	movw	r30, r24
     8bc:	e1 54       	subi	r30, 0x41	; 65
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 83       	st	Z, r24
     8c4:	53 c0       	rjmp	.+166    	; 0x96c <__stack+0x10d>
			}
			break;
		case Pushed		:
			if (DIO_u8ReadPin(PBN[u8i])==HIGH)
     8c6:	80 91 43 01 	lds	r24, 0x0143
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	fc 01       	movw	r30, r24
     8d0:	e1 5c       	subi	r30, 0xC1	; 193
     8d2:	fe 4f       	sbci	r31, 0xFE	; 254
     8d4:	80 81       	ld	r24, Z
     8d6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <DIO_u8ReadPin>
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <__stack+0x81>
     8de:	46 c0       	rjmp	.+140    	; 0x96c <__stack+0x10d>
				PBN_state[u8i] = PreReleased;
     8e0:	80 91 43 01 	lds	r24, 0x0143
     8e4:	88 2f       	mov	r24, r24
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	fc 01       	movw	r30, r24
     8ea:	e1 54       	subi	r30, 0x41	; 65
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	80 83       	st	Z, r24
     8f2:	3c c0       	rjmp	.+120    	; 0x96c <__stack+0x10d>
			break;
		case PreReleased:
			if (DIO_u8ReadPin(PBN[u8i])==HIGH)
     8f4:	80 91 43 01 	lds	r24, 0x0143
     8f8:	88 2f       	mov	r24, r24
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	fc 01       	movw	r30, r24
     8fe:	e1 5c       	subi	r30, 0xC1	; 193
     900:	fe 4f       	sbci	r31, 0xFE	; 254
     902:	80 81       	ld	r24, Z
     904:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <DIO_u8ReadPin>
     908:	81 30       	cpi	r24, 0x01	; 1
     90a:	69 f4       	brne	.+26     	; 0x926 <__stack+0xc7>
				counter[u8i]++;
     90c:	80 91 43 01 	lds	r24, 0x0143
     910:	28 2f       	mov	r18, r24
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	f9 01       	movw	r30, r18
     916:	ec 5b       	subi	r30, 0xBC	; 188
     918:	fe 4f       	sbci	r31, 0xFE	; 254
     91a:	80 81       	ld	r24, Z
     91c:	8f 5f       	subi	r24, 0xFF	; 255
     91e:	f9 01       	movw	r30, r18
     920:	ec 5b       	subi	r30, 0xBC	; 188
     922:	fe 4f       	sbci	r31, 0xFE	; 254
     924:	80 83       	st	Z, r24
			if (counter[u8i]>=SENS_COUNT)
     926:	80 91 43 01 	lds	r24, 0x0143
     92a:	88 2f       	mov	r24, r24
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	fc 01       	movw	r30, r24
     930:	ec 5b       	subi	r30, 0xBC	; 188
     932:	fe 4f       	sbci	r31, 0xFE	; 254
     934:	80 81       	ld	r24, Z
     936:	83 30       	cpi	r24, 0x03	; 3
     938:	c8 f0       	brcs	.+50     	; 0x96c <__stack+0x10d>
			{
				counter[u8i]=0;
     93a:	80 91 43 01 	lds	r24, 0x0143
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	fc 01       	movw	r30, r24
     944:	ec 5b       	subi	r30, 0xBC	; 188
     946:	fe 4f       	sbci	r31, 0xFE	; 254
     948:	10 82       	st	Z, r1
				PBN_state[u8i] = Released;
     94a:	80 91 43 01 	lds	r24, 0x0143
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	fc 01       	movw	r30, r24
     954:	e1 54       	subi	r30, 0x41	; 65
     956:	ff 4f       	sbci	r31, 0xFF	; 255
     958:	10 82       	st	Z, r1
     95a:	08 c0       	rjmp	.+16     	; 0x96c <__stack+0x10d>
			}
			break;
		default:
			PBN_state[u8i] = Released;
     95c:	80 91 43 01 	lds	r24, 0x0143
     960:	88 2f       	mov	r24, r24
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	fc 01       	movw	r30, r24
     966:	e1 54       	subi	r30, 0x41	; 65
     968:	ff 4f       	sbci	r31, 0xFF	; 255
     96a:	10 82       	st	Z, r1
			break;
		}
		u8i++;
     96c:	80 91 43 01 	lds	r24, 0x0143
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	80 93 43 01 	sts	0x0143, r24
     976:	02 c0       	rjmp	.+4      	; 0x97c <__stack+0x11d>
	}
	else
	{
		u8i=0;
     978:	10 92 43 01 	sts	0x0143, r1
	}
}
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	08 95       	ret

00000986 <SW_u8Read>:

uint8 SW_u8Read(uint8 u8PBN)
{
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	00 d0       	rcall	.+0      	; 0x98c <SW_u8Read+0x6>
     98c:	0f 92       	push	r0
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	8b 83       	std	Y+3, r24	; 0x03
	uint8 u8i = 0,state=SWITCH_STATE_Error;
     994:	1a 82       	std	Y+2, r1	; 0x02
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	89 83       	std	Y+1, r24	; 0x01
     99a:	15 c0       	rjmp	.+42     	; 0x9c6 <SW_u8Read+0x40>
	for( ;(u8i<u8Count)&&(state==SWITCH_STATE_Error);u8i++)
	{
		if (PBN[u8i]==u8PBN)
     99c:	8a 81       	ldd	r24, Y+2	; 0x02
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	fc 01       	movw	r30, r24
     9a4:	e1 5c       	subi	r30, 0xC1	; 193
     9a6:	fe 4f       	sbci	r31, 0xFE	; 254
     9a8:	90 81       	ld	r25, Z
     9aa:	8b 81       	ldd	r24, Y+3	; 0x03
     9ac:	98 17       	cp	r25, r24
     9ae:	41 f4       	brne	.+16     	; 0x9c0 <SW_u8Read+0x3a>
		{
			state =PBN_state[u8i];
     9b0:	8a 81       	ldd	r24, Y+2	; 0x02
     9b2:	88 2f       	mov	r24, r24
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	fc 01       	movw	r30, r24
     9b8:	e1 54       	subi	r30, 0x41	; 65
     9ba:	ff 4f       	sbci	r31, 0xFF	; 255
     9bc:	80 81       	ld	r24, Z
     9be:	89 83       	std	Y+1, r24	; 0x01
}

uint8 SW_u8Read(uint8 u8PBN)
{
	uint8 u8i = 0,state=SWITCH_STATE_Error;
	for( ;(u8i<u8Count)&&(state==SWITCH_STATE_Error);u8i++)
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	8a 83       	std	Y+2, r24	; 0x02
     9c6:	90 91 42 01 	lds	r25, 0x0142
     9ca:	8a 81       	ldd	r24, Y+2	; 0x02
     9cc:	89 17       	cp	r24, r25
     9ce:	18 f4       	brcc	.+6      	; 0x9d6 <SW_u8Read+0x50>
     9d0:	89 81       	ldd	r24, Y+1	; 0x01
     9d2:	84 30       	cpi	r24, 0x04	; 4
     9d4:	19 f3       	breq	.-58     	; 0x99c <SW_u8Read+0x16>
		if (PBN[u8i]==u8PBN)
		{
			state =PBN_state[u8i];
		}
	}
	return state;
     9d6:	89 81       	ldd	r24, Y+1	; 0x01
}
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	08 95       	ret

000009e4 <SCHEDULER_vidInit>:
 */

#include "SCHEDULER_LOCAL.h"
static Task_Holder Task[Task_Count];
void SCHEDULER_vidInit ()
{
     9e4:	df 93       	push	r29
     9e6:	cf 93       	push	r28
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62

	Task[0].status=1;Task[0].periodicity=0;Task[0].fun=LCD_vidTask;
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	80 93 4a 01 	sts	0x014A, r24
     9f2:	10 92 47 01 	sts	0x0147, r1
     9f6:	88 e5       	ldi	r24, 0x58	; 88
     9f8:	98 e0       	ldi	r25, 0x08	; 8
     9fa:	90 93 49 01 	sts	0x0149, r25
     9fe:	80 93 48 01 	sts	0x0148, r24
	Task[1].status=1;Task[1].periodicity=0;Task[1].fun=GPS_vidTask;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	80 93 4e 01 	sts	0x014E, r24
     a08:	10 92 4b 01 	sts	0x014B, r1
     a0c:	8b ef       	ldi	r24, 0xFB	; 251
     a0e:	9b e0       	ldi	r25, 0x0B	; 11
     a10:	90 93 4d 01 	sts	0x014D, r25
     a14:	80 93 4c 01 	sts	0x014C, r24

	Enable_Global_Interrupt();
     a18:	af e5       	ldi	r26, 0x5F	; 95
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	ef e5       	ldi	r30, 0x5F	; 95
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	80 81       	ld	r24, Z
     a22:	80 68       	ori	r24, 0x80	; 128
     a24:	8c 93       	st	X, r24

}
     a26:	cf 91       	pop	r28
     a28:	df 91       	pop	r29
     a2a:	08 95       	ret

00000a2c <LCD_u8WriteCommand>:
static int8 LCD_LINE[2][17]={"                ",
							 "                "};
static uint8 u8x =0,u8y=0,u8LCDState=0;

static uint8 LCD_u8WriteCommand(uint8 u8Command)
{
     a2c:	df 93       	push	r29
     a2e:	cf 93       	push	r28
     a30:	00 d0       	rcall	.+0      	; 0xa32 <LCD_u8WriteCommand+0x6>
     a32:	00 d0       	rcall	.+0      	; 0xa34 <LCD_u8WriteCommand+0x8>
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	89 83       	std	Y+1, r24	; 0x01
	static uint8 u8LCDwritetime=0,LCD_Command_State=0;
	switch(LCD_Command_State)
     a3a:	80 91 52 01 	lds	r24, 0x0152
     a3e:	28 2f       	mov	r18, r24
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	3c 83       	std	Y+4, r19	; 0x04
     a44:	2b 83       	std	Y+3, r18	; 0x03
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	84 30       	cpi	r24, 0x04	; 4
     a4c:	91 05       	cpc	r25, r1
     a4e:	09 f4       	brne	.+2      	; 0xa52 <LCD_u8WriteCommand+0x26>
     a50:	a4 c0       	rjmp	.+328    	; 0xb9a <LCD_u8WriteCommand+0x16e>
     a52:	2b 81       	ldd	r18, Y+3	; 0x03
     a54:	3c 81       	ldd	r19, Y+4	; 0x04
     a56:	25 30       	cpi	r18, 0x05	; 5
     a58:	31 05       	cpc	r19, r1
     a5a:	ec f4       	brge	.+58     	; 0xa96 <LCD_u8WriteCommand+0x6a>
     a5c:	8b 81       	ldd	r24, Y+3	; 0x03
     a5e:	9c 81       	ldd	r25, Y+4	; 0x04
     a60:	81 30       	cpi	r24, 0x01	; 1
     a62:	91 05       	cpc	r25, r1
     a64:	09 f4       	brne	.+2      	; 0xa68 <LCD_u8WriteCommand+0x3c>
     a66:	6b c0       	rjmp	.+214    	; 0xb3e <LCD_u8WriteCommand+0x112>
     a68:	2b 81       	ldd	r18, Y+3	; 0x03
     a6a:	3c 81       	ldd	r19, Y+4	; 0x04
     a6c:	22 30       	cpi	r18, 0x02	; 2
     a6e:	31 05       	cpc	r19, r1
     a70:	2c f4       	brge	.+10     	; 0xa7c <LCD_u8WriteCommand+0x50>
     a72:	8b 81       	ldd	r24, Y+3	; 0x03
     a74:	9c 81       	ldd	r25, Y+4	; 0x04
     a76:	00 97       	sbiw	r24, 0x00	; 0
     a78:	39 f1       	breq	.+78     	; 0xac8 <LCD_u8WriteCommand+0x9c>
     a7a:	f4 c0       	rjmp	.+488    	; 0xc64 <LCD_u8WriteCommand+0x238>
     a7c:	2b 81       	ldd	r18, Y+3	; 0x03
     a7e:	3c 81       	ldd	r19, Y+4	; 0x04
     a80:	22 30       	cpi	r18, 0x02	; 2
     a82:	31 05       	cpc	r19, r1
     a84:	09 f4       	brne	.+2      	; 0xa88 <LCD_u8WriteCommand+0x5c>
     a86:	6d c0       	rjmp	.+218    	; 0xb62 <LCD_u8WriteCommand+0x136>
     a88:	8b 81       	ldd	r24, Y+3	; 0x03
     a8a:	9c 81       	ldd	r25, Y+4	; 0x04
     a8c:	83 30       	cpi	r24, 0x03	; 3
     a8e:	91 05       	cpc	r25, r1
     a90:	09 f4       	brne	.+2      	; 0xa94 <LCD_u8WriteCommand+0x68>
     a92:	71 c0       	rjmp	.+226    	; 0xb76 <LCD_u8WriteCommand+0x14a>
     a94:	e7 c0       	rjmp	.+462    	; 0xc64 <LCD_u8WriteCommand+0x238>
     a96:	2b 81       	ldd	r18, Y+3	; 0x03
     a98:	3c 81       	ldd	r19, Y+4	; 0x04
     a9a:	26 30       	cpi	r18, 0x06	; 6
     a9c:	31 05       	cpc	r19, r1
     a9e:	09 f4       	brne	.+2      	; 0xaa2 <LCD_u8WriteCommand+0x76>
     aa0:	b5 c0       	rjmp	.+362    	; 0xc0c <LCD_u8WriteCommand+0x1e0>
     aa2:	8b 81       	ldd	r24, Y+3	; 0x03
     aa4:	9c 81       	ldd	r25, Y+4	; 0x04
     aa6:	86 30       	cpi	r24, 0x06	; 6
     aa8:	91 05       	cpc	r25, r1
     aaa:	0c f4       	brge	.+2      	; 0xaae <LCD_u8WriteCommand+0x82>
     aac:	83 c0       	rjmp	.+262    	; 0xbb4 <LCD_u8WriteCommand+0x188>
     aae:	2b 81       	ldd	r18, Y+3	; 0x03
     ab0:	3c 81       	ldd	r19, Y+4	; 0x04
     ab2:	27 30       	cpi	r18, 0x07	; 7
     ab4:	31 05       	cpc	r19, r1
     ab6:	09 f4       	brne	.+2      	; 0xaba <LCD_u8WriteCommand+0x8e>
     ab8:	ba c0       	rjmp	.+372    	; 0xc2e <LCD_u8WriteCommand+0x202>
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	9c 81       	ldd	r25, Y+4	; 0x04
     abe:	88 30       	cpi	r24, 0x08	; 8
     ac0:	91 05       	cpc	r25, r1
     ac2:	09 f4       	brne	.+2      	; 0xac6 <LCD_u8WriteCommand+0x9a>
     ac4:	be c0       	rjmp	.+380    	; 0xc42 <LCD_u8WriteCommand+0x216>
     ac6:	ce c0       	rjmp	.+412    	; 0xc64 <LCD_u8WriteCommand+0x238>
	{
	case 0:
		//RS 	= 0
		DIO_u8WritePin(LCD_RS,LOW);
     ac8:	89 e0       	ldi	r24, 0x09	; 9
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		//R/W 	= 0
		DIO_u8WritePin(LCD_RW,LOW);
     ad0:	8a e0       	ldi	r24, 0x0A	; 10
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		//Send data

		//Write high Niple
		DIO_u8WritePin(LCD_D7,Get_Bit(u8Command,7));
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	98 2f       	mov	r25, r24
     adc:	99 1f       	adc	r25, r25
     ade:	99 27       	eor	r25, r25
     ae0:	99 1f       	adc	r25, r25
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	69 2f       	mov	r22, r25
     ae6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D6,Get_Bit(u8Command,6));
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	82 95       	swap	r24
     aee:	86 95       	lsr	r24
     af0:	86 95       	lsr	r24
     af2:	83 70       	andi	r24, 0x03	; 3
     af4:	98 2f       	mov	r25, r24
     af6:	91 70       	andi	r25, 0x01	; 1
     af8:	86 e0       	ldi	r24, 0x06	; 6
     afa:	69 2f       	mov	r22, r25
     afc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D5,Get_Bit(u8Command,5));
     b00:	89 81       	ldd	r24, Y+1	; 0x01
     b02:	82 95       	swap	r24
     b04:	86 95       	lsr	r24
     b06:	87 70       	andi	r24, 0x07	; 7
     b08:	98 2f       	mov	r25, r24
     b0a:	91 70       	andi	r25, 0x01	; 1
     b0c:	85 e0       	ldi	r24, 0x05	; 5
     b0e:	69 2f       	mov	r22, r25
     b10:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D4,Get_Bit(u8Command,4));
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	82 95       	swap	r24
     b18:	8f 70       	andi	r24, 0x0F	; 15
     b1a:	98 2f       	mov	r25, r24
     b1c:	91 70       	andi	r25, 0x01	; 1
     b1e:	84 e0       	ldi	r24, 0x04	; 4
     b20:	69 2f       	mov	r22, r25
     b22:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

		//set enable
		DIO_u8WritePin(LCD_E,HIGH);
     b26:	8b e0       	ldi	r24, 0x0B	; 11
     b28:	61 e0       	ldi	r22, 0x01	; 1
     b2a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		//Next State
		LCD_Command_State++;
     b2e:	80 91 52 01 	lds	r24, 0x0152
     b32:	8f 5f       	subi	r24, 0xFF	; 255
     b34:	80 93 52 01 	sts	0x0152, r24
		u8LCDwritetime = 0;
     b38:	10 92 53 01 	sts	0x0153, r1
     b3c:	95 c0       	rjmp	.+298    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		break;
	case 1:
		//delay 5 ms
		if(++u8LCDwritetime>5)
     b3e:	80 91 53 01 	lds	r24, 0x0153
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	80 93 53 01 	sts	0x0153, r24
     b48:	80 91 53 01 	lds	r24, 0x0153
     b4c:	86 30       	cpi	r24, 0x06	; 6
     b4e:	08 f4       	brcc	.+2      	; 0xb52 <LCD_u8WriteCommand+0x126>
     b50:	8b c0       	rjmp	.+278    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     b52:	10 92 53 01 	sts	0x0153, r1
			LCD_Command_State++;
     b56:	80 91 52 01 	lds	r24, 0x0152
     b5a:	8f 5f       	subi	r24, 0xFF	; 255
     b5c:	80 93 52 01 	sts	0x0152, r24
     b60:	83 c0       	rjmp	.+262    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 2:
		//clear enable
		DIO_u8WritePin(LCD_E,LOW);
     b62:	8b e0       	ldi	r24, 0x0B	; 11
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		//Next State
		LCD_Command_State++;
     b6a:	80 91 52 01 	lds	r24, 0x0152
     b6e:	8f 5f       	subi	r24, 0xFF	; 255
     b70:	80 93 52 01 	sts	0x0152, r24
     b74:	79 c0       	rjmp	.+242    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		break;
	case 3:
		//delay 5ms
		if(++u8LCDwritetime>5)
     b76:	80 91 53 01 	lds	r24, 0x0153
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	80 93 53 01 	sts	0x0153, r24
     b80:	80 91 53 01 	lds	r24, 0x0153
     b84:	86 30       	cpi	r24, 0x06	; 6
     b86:	08 f4       	brcc	.+2      	; 0xb8a <LCD_u8WriteCommand+0x15e>
     b88:	6f c0       	rjmp	.+222    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     b8a:	10 92 53 01 	sts	0x0153, r1
			LCD_Command_State++;
     b8e:	80 91 52 01 	lds	r24, 0x0152
     b92:	8f 5f       	subi	r24, 0xFF	; 255
     b94:	80 93 52 01 	sts	0x0152, r24
     b98:	67 c0       	rjmp	.+206    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 4:
		if(u8Command!=0x20)
     b9a:	89 81       	ldd	r24, Y+1	; 0x01
     b9c:	80 32       	cpi	r24, 0x20	; 32
     b9e:	31 f0       	breq	.+12     	; 0xbac <LCD_u8WriteCommand+0x180>
		{
			//Next State
			LCD_Command_State++;
     ba0:	80 91 52 01 	lds	r24, 0x0152
     ba4:	8f 5f       	subi	r24, 0xFF	; 255
     ba6:	80 93 52 01 	sts	0x0152, r24
     baa:	5e c0       	rjmp	.+188    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		}
		else
		{
			LCD_Command_State=9;
     bac:	89 e0       	ldi	r24, 0x09	; 9
     bae:	80 93 52 01 	sts	0x0152, r24
     bb2:	5a c0       	rjmp	.+180    	; 0xc68 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 5:

		//Write Low Niple
		DIO_u8WritePin(LCD_D7,Get_Bit(u8Command,3));
     bb4:	89 81       	ldd	r24, Y+1	; 0x01
     bb6:	86 95       	lsr	r24
     bb8:	86 95       	lsr	r24
     bba:	86 95       	lsr	r24
     bbc:	98 2f       	mov	r25, r24
     bbe:	91 70       	andi	r25, 0x01	; 1
     bc0:	87 e0       	ldi	r24, 0x07	; 7
     bc2:	69 2f       	mov	r22, r25
     bc4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D6,Get_Bit(u8Command,2));
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
     bca:	86 95       	lsr	r24
     bcc:	86 95       	lsr	r24
     bce:	98 2f       	mov	r25, r24
     bd0:	91 70       	andi	r25, 0x01	; 1
     bd2:	86 e0       	ldi	r24, 0x06	; 6
     bd4:	69 2f       	mov	r22, r25
     bd6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D5,Get_Bit(u8Command,1));
     bda:	89 81       	ldd	r24, Y+1	; 0x01
     bdc:	86 95       	lsr	r24
     bde:	98 2f       	mov	r25, r24
     be0:	91 70       	andi	r25, 0x01	; 1
     be2:	85 e0       	ldi	r24, 0x05	; 5
     be4:	69 2f       	mov	r22, r25
     be6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		DIO_u8WritePin(LCD_D4,Get_Bit(u8Command,0));
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	98 2f       	mov	r25, r24
     bee:	91 70       	andi	r25, 0x01	; 1
     bf0:	84 e0       	ldi	r24, 0x04	; 4
     bf2:	69 2f       	mov	r22, r25
     bf4:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

		//E		: Falling edge
		DIO_u8WritePin(LCD_E,HIGH);
     bf8:	8b e0       	ldi	r24, 0x0B	; 11
     bfa:	61 e0       	ldi	r22, 0x01	; 1
     bfc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

		LCD_Command_State++;
     c00:	80 91 52 01 	lds	r24, 0x0152
     c04:	8f 5f       	subi	r24, 0xFF	; 255
     c06:	80 93 52 01 	sts	0x0152, r24
     c0a:	2e c0       	rjmp	.+92     	; 0xc68 <LCD_u8WriteCommand+0x23c>

		break;

	case 6:
		if(++u8LCDwritetime>5)
     c0c:	80 91 53 01 	lds	r24, 0x0153
     c10:	8f 5f       	subi	r24, 0xFF	; 255
     c12:	80 93 53 01 	sts	0x0153, r24
     c16:	80 91 53 01 	lds	r24, 0x0153
     c1a:	86 30       	cpi	r24, 0x06	; 6
     c1c:	28 f1       	brcs	.+74     	; 0xc68 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     c1e:	10 92 53 01 	sts	0x0153, r1
			LCD_Command_State++;
     c22:	80 91 52 01 	lds	r24, 0x0152
     c26:	8f 5f       	subi	r24, 0xFF	; 255
     c28:	80 93 52 01 	sts	0x0152, r24
     c2c:	1d c0       	rjmp	.+58     	; 0xc68 <LCD_u8WriteCommand+0x23c>
		}
		break;
	case 7:
		DIO_u8WritePin(LCD_E,LOW);
     c2e:	8b e0       	ldi	r24, 0x0B	; 11
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		LCD_Command_State++;
     c36:	80 91 52 01 	lds	r24, 0x0152
     c3a:	8f 5f       	subi	r24, 0xFF	; 255
     c3c:	80 93 52 01 	sts	0x0152, r24
     c40:	13 c0       	rjmp	.+38     	; 0xc68 <LCD_u8WriteCommand+0x23c>
		break;
	case 8:
		if(++u8LCDwritetime>5)
     c42:	80 91 53 01 	lds	r24, 0x0153
     c46:	8f 5f       	subi	r24, 0xFF	; 255
     c48:	80 93 53 01 	sts	0x0153, r24
     c4c:	80 91 53 01 	lds	r24, 0x0153
     c50:	86 30       	cpi	r24, 0x06	; 6
     c52:	50 f0       	brcs	.+20     	; 0xc68 <LCD_u8WriteCommand+0x23c>
		{
			u8LCDwritetime=0;
     c54:	10 92 53 01 	sts	0x0153, r1
			LCD_Command_State++;
     c58:	80 91 52 01 	lds	r24, 0x0152
     c5c:	8f 5f       	subi	r24, 0xFF	; 255
     c5e:	80 93 52 01 	sts	0x0152, r24
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <LCD_u8WriteCommand+0x23c>
		}
		break;
	default:
		LCD_Command_State = 0;
     c64:	10 92 52 01 	sts	0x0152, r1
		break;
	}
	return (LCD_Command_State==0);
     c68:	80 91 52 01 	lds	r24, 0x0152
     c6c:	1a 82       	std	Y+2, r1	; 0x02
     c6e:	88 23       	and	r24, r24
     c70:	11 f4       	brne	.+4      	; 0xc76 <LCD_u8WriteCommand+0x24a>
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	9a 83       	std	Y+2, r25	; 0x02
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c78:	0f 90       	pop	r0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	cf 91       	pop	r28
     c82:	df 91       	pop	r29
     c84:	08 95       	ret

00000c86 <LCD_u8Init>:


static uint8 LCD_u8Init(void)
{
     c86:	df 93       	push	r29
     c88:	cf 93       	push	r28
     c8a:	00 d0       	rcall	.+0      	; 0xc8c <LCD_u8Init+0x6>
     c8c:	0f 92       	push	r0
     c8e:	cd b7       	in	r28, 0x3d	; 61
     c90:	de b7       	in	r29, 0x3e	; 62
	static uint8 u8LCD_init_state=0,u8LCDinittime=0;
	switch (u8LCD_init_state)
     c92:	80 91 55 01 	lds	r24, 0x0155
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	3b 83       	std	Y+3, r19	; 0x03
     c9c:	2a 83       	std	Y+2, r18	; 0x02
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	9b 81       	ldd	r25, Y+3	; 0x03
     ca2:	84 30       	cpi	r24, 0x04	; 4
     ca4:	91 05       	cpc	r25, r1
     ca6:	09 f4       	brne	.+2      	; 0xcaa <LCD_u8Init+0x24>
     ca8:	99 c0       	rjmp	.+306    	; 0xddc <LCD_u8Init+0x156>
     caa:	2a 81       	ldd	r18, Y+2	; 0x02
     cac:	3b 81       	ldd	r19, Y+3	; 0x03
     cae:	25 30       	cpi	r18, 0x05	; 5
     cb0:	31 05       	cpc	r19, r1
     cb2:	ec f4       	brge	.+58     	; 0xcee <LCD_u8Init+0x68>
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	9b 81       	ldd	r25, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	91 05       	cpc	r25, r1
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <LCD_u8Init+0x3a>
     cbe:	5e c0       	rjmp	.+188    	; 0xd7c <LCD_u8Init+0xf6>
     cc0:	2a 81       	ldd	r18, Y+2	; 0x02
     cc2:	3b 81       	ldd	r19, Y+3	; 0x03
     cc4:	22 30       	cpi	r18, 0x02	; 2
     cc6:	31 05       	cpc	r19, r1
     cc8:	2c f4       	brge	.+10     	; 0xcd4 <LCD_u8Init+0x4e>
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	9b 81       	ldd	r25, Y+3	; 0x03
     cce:	00 97       	sbiw	r24, 0x00	; 0
     cd0:	99 f1       	breq	.+102    	; 0xd38 <LCD_u8Init+0xb2>
     cd2:	da c0       	rjmp	.+436    	; 0xe88 <LCD_u8Init+0x202>
     cd4:	2a 81       	ldd	r18, Y+2	; 0x02
     cd6:	3b 81       	ldd	r19, Y+3	; 0x03
     cd8:	22 30       	cpi	r18, 0x02	; 2
     cda:	31 05       	cpc	r19, r1
     cdc:	09 f4       	brne	.+2      	; 0xce0 <LCD_u8Init+0x5a>
     cde:	60 c0       	rjmp	.+192    	; 0xda0 <LCD_u8Init+0x11a>
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	9b 81       	ldd	r25, Y+3	; 0x03
     ce4:	83 30       	cpi	r24, 0x03	; 3
     ce6:	91 05       	cpc	r25, r1
     ce8:	09 f4       	brne	.+2      	; 0xcec <LCD_u8Init+0x66>
     cea:	66 c0       	rjmp	.+204    	; 0xdb8 <LCD_u8Init+0x132>
     cec:	cd c0       	rjmp	.+410    	; 0xe88 <LCD_u8Init+0x202>
     cee:	2a 81       	ldd	r18, Y+2	; 0x02
     cf0:	3b 81       	ldd	r19, Y+3	; 0x03
     cf2:	27 30       	cpi	r18, 0x07	; 7
     cf4:	31 05       	cpc	r19, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <LCD_u8Init+0x74>
     cf8:	9a c0       	rjmp	.+308    	; 0xe2e <LCD_u8Init+0x1a8>
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	9b 81       	ldd	r25, Y+3	; 0x03
     cfe:	88 30       	cpi	r24, 0x08	; 8
     d00:	91 05       	cpc	r25, r1
     d02:	6c f4       	brge	.+26     	; 0xd1e <LCD_u8Init+0x98>
     d04:	2a 81       	ldd	r18, Y+2	; 0x02
     d06:	3b 81       	ldd	r19, Y+3	; 0x03
     d08:	25 30       	cpi	r18, 0x05	; 5
     d0a:	31 05       	cpc	r19, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <LCD_u8Init+0x8a>
     d0e:	72 c0       	rjmp	.+228    	; 0xdf4 <LCD_u8Init+0x16e>
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	9b 81       	ldd	r25, Y+3	; 0x03
     d14:	86 30       	cpi	r24, 0x06	; 6
     d16:	91 05       	cpc	r25, r1
     d18:	09 f4       	brne	.+2      	; 0xd1c <LCD_u8Init+0x96>
     d1a:	7e c0       	rjmp	.+252    	; 0xe18 <LCD_u8Init+0x192>
     d1c:	b5 c0       	rjmp	.+362    	; 0xe88 <LCD_u8Init+0x202>
     d1e:	2a 81       	ldd	r18, Y+2	; 0x02
     d20:	3b 81       	ldd	r19, Y+3	; 0x03
     d22:	28 30       	cpi	r18, 0x08	; 8
     d24:	31 05       	cpc	r19, r1
     d26:	09 f4       	brne	.+2      	; 0xd2a <LCD_u8Init+0xa4>
     d28:	93 c0       	rjmp	.+294    	; 0xe50 <LCD_u8Init+0x1ca>
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	9b 81       	ldd	r25, Y+3	; 0x03
     d2e:	89 30       	cpi	r24, 0x09	; 9
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <LCD_u8Init+0xb0>
     d34:	98 c0       	rjmp	.+304    	; 0xe66 <LCD_u8Init+0x1e0>
     d36:	a8 c0       	rjmp	.+336    	; 0xe88 <LCD_u8Init+0x202>
	{
	case 0:
		DIO_u8SetPinDir(LCD_E ,OUTPUT);
     d38:	8b e0       	ldi	r24, 0x0B	; 11
     d3a:	61 e0       	ldi	r22, 0x01	; 1
     d3c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_RW,OUTPUT);
     d40:	8a e0       	ldi	r24, 0x0A	; 10
     d42:	61 e0       	ldi	r22, 0x01	; 1
     d44:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_RS,OUTPUT);
     d48:	89 e0       	ldi	r24, 0x09	; 9
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>

		DIO_u8SetPinDir(LCD_D7,OUTPUT);
     d50:	87 e0       	ldi	r24, 0x07	; 7
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D6,OUTPUT);
     d58:	86 e0       	ldi	r24, 0x06	; 6
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D5,OUTPUT);
     d60:	85 e0       	ldi	r24, 0x05	; 5
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
		DIO_u8SetPinDir(LCD_D4,OUTPUT);
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
		u8LCD_init_state++;
     d70:	80 91 55 01 	lds	r24, 0x0155
     d74:	8f 5f       	subi	r24, 0xFF	; 255
     d76:	80 93 55 01 	sts	0x0155, r24
     d7a:	88 c0       	rjmp	.+272    	; 0xe8c <LCD_u8Init+0x206>

		break;
	case 1:								//Delay 30 ms
		if (++u8LCDinittime > 40)
     d7c:	80 91 54 01 	lds	r24, 0x0154
     d80:	8f 5f       	subi	r24, 0xFF	; 255
     d82:	80 93 54 01 	sts	0x0154, r24
     d86:	80 91 54 01 	lds	r24, 0x0154
     d8a:	89 32       	cpi	r24, 0x29	; 41
     d8c:	08 f4       	brcc	.+2      	; 0xd90 <LCD_u8Init+0x10a>
     d8e:	7e c0       	rjmp	.+252    	; 0xe8c <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     d90:	10 92 54 01 	sts	0x0154, r1
			u8LCD_init_state++;
     d94:	80 91 55 01 	lds	r24, 0x0155
     d98:	8f 5f       	subi	r24, 0xFF	; 255
     d9a:	80 93 55 01 	sts	0x0155, r24
     d9e:	76 c0       	rjmp	.+236    	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 2:


		if ( LCD_u8WriteCommand(0x20) )
     da0:	80 e2       	ldi	r24, 0x20	; 32
     da2:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_u8WriteCommand>
     da6:	88 23       	and	r24, r24
     da8:	09 f4       	brne	.+2      	; 0xdac <LCD_u8Init+0x126>
     daa:	70 c0       	rjmp	.+224    	; 0xe8c <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     dac:	80 91 55 01 	lds	r24, 0x0155
     db0:	8f 5f       	subi	r24, 0xFF	; 255
     db2:	80 93 55 01 	sts	0x0155, r24
     db6:	6a c0       	rjmp	.+212    	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 3:								//Delay 5 ms
		if (++u8LCDinittime > 5)
     db8:	80 91 54 01 	lds	r24, 0x0154
     dbc:	8f 5f       	subi	r24, 0xFF	; 255
     dbe:	80 93 54 01 	sts	0x0154, r24
     dc2:	80 91 54 01 	lds	r24, 0x0154
     dc6:	86 30       	cpi	r24, 0x06	; 6
     dc8:	08 f4       	brcc	.+2      	; 0xdcc <LCD_u8Init+0x146>
     dca:	60 c0       	rjmp	.+192    	; 0xe8c <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     dcc:	10 92 54 01 	sts	0x0154, r1
			u8LCD_init_state++;
     dd0:	80 91 55 01 	lds	r24, 0x0155
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	80 93 55 01 	sts	0x0155, r24
     dda:	58 c0       	rjmp	.+176    	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 4:								//Function Set 		0011NFxx N:number of lines 1/2 F: font 5*8/5*11
		if ( LCD_u8WriteCommand(0x2c) )
     ddc:	8c e2       	ldi	r24, 0x2C	; 44
     dde:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_u8WriteCommand>
     de2:	88 23       	and	r24, r24
     de4:	09 f4       	brne	.+2      	; 0xde8 <LCD_u8Init+0x162>
     de6:	52 c0       	rjmp	.+164    	; 0xe8c <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     de8:	80 91 55 01 	lds	r24, 0x0155
     dec:	8f 5f       	subi	r24, 0xFF	; 255
     dee:	80 93 55 01 	sts	0x0155, r24
     df2:	4c c0       	rjmp	.+152    	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 5:								//Delay 3 ms
		if (++u8LCDinittime > 3)
     df4:	80 91 54 01 	lds	r24, 0x0154
     df8:	8f 5f       	subi	r24, 0xFF	; 255
     dfa:	80 93 54 01 	sts	0x0154, r24
     dfe:	80 91 54 01 	lds	r24, 0x0154
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	08 f4       	brcc	.+2      	; 0xe08 <LCD_u8Init+0x182>
     e06:	42 c0       	rjmp	.+132    	; 0xe8c <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     e08:	10 92 54 01 	sts	0x0154, r1
			u8LCD_init_state++;
     e0c:	80 91 55 01 	lds	r24, 0x0155
     e10:	8f 5f       	subi	r24, 0xFF	; 255
     e12:	80 93 55 01 	sts	0x0155, r24
     e16:	3a c0       	rjmp	.+116    	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 6:
		if (LCD_u8WriteCommand(0x0c))
     e18:	8c e0       	ldi	r24, 0x0C	; 12
     e1a:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_u8WriteCommand>
     e1e:	88 23       	and	r24, r24
     e20:	a9 f1       	breq	.+106    	; 0xe8c <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     e22:	80 91 55 01 	lds	r24, 0x0155
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 55 01 	sts	0x0155, r24
     e2c:	2f c0       	rjmp	.+94     	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 7:								//Delay 3 ms
		if (++u8LCDinittime > 3)
     e2e:	80 91 54 01 	lds	r24, 0x0154
     e32:	8f 5f       	subi	r24, 0xFF	; 255
     e34:	80 93 54 01 	sts	0x0154, r24
     e38:	80 91 54 01 	lds	r24, 0x0154
     e3c:	84 30       	cpi	r24, 0x04	; 4
     e3e:	30 f1       	brcs	.+76     	; 0xe8c <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     e40:	10 92 54 01 	sts	0x0154, r1
			u8LCD_init_state++;
     e44:	80 91 55 01 	lds	r24, 0x0155
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	80 93 55 01 	sts	0x0155, r24
     e4e:	1e c0       	rjmp	.+60     	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 8:
		if( LCD_u8WriteCommand(0x01))
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_u8WriteCommand>
     e56:	88 23       	and	r24, r24
     e58:	c9 f0       	breq	.+50     	; 0xe8c <LCD_u8Init+0x206>
		{
		u8LCD_init_state++;
     e5a:	80 91 55 01 	lds	r24, 0x0155
     e5e:	8f 5f       	subi	r24, 0xFF	; 255
     e60:	80 93 55 01 	sts	0x0155, r24
     e64:	13 c0       	rjmp	.+38     	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	case 9:								//Delay 40 ms
		if (++u8LCDinittime > 10)
     e66:	80 91 54 01 	lds	r24, 0x0154
     e6a:	8f 5f       	subi	r24, 0xFF	; 255
     e6c:	80 93 54 01 	sts	0x0154, r24
     e70:	80 91 54 01 	lds	r24, 0x0154
     e74:	8b 30       	cpi	r24, 0x0B	; 11
     e76:	50 f0       	brcs	.+20     	; 0xe8c <LCD_u8Init+0x206>
		{
			u8LCDinittime=0;
     e78:	10 92 54 01 	sts	0x0154, r1
			u8LCD_init_state++;
     e7c:	80 91 55 01 	lds	r24, 0x0155
     e80:	8f 5f       	subi	r24, 0xFF	; 255
     e82:	80 93 55 01 	sts	0x0155, r24
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <LCD_u8Init+0x206>
		}
		break;
	default:
		u8LCD_init_state=0;
     e88:	10 92 55 01 	sts	0x0155, r1
		break;

	}
return (u8LCD_init_state==0);
     e8c:	80 91 55 01 	lds	r24, 0x0155
     e90:	19 82       	std	Y+1, r1	; 0x01
     e92:	88 23       	and	r24, r24
     e94:	11 f4       	brne	.+4      	; 0xe9a <LCD_u8Init+0x214>
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	99 83       	std	Y+1, r25	; 0x01
     e9a:	89 81       	ldd	r24, Y+1	; 0x01

}
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <LCD_u8WriteData>:

static uint8 LCD_u8WriteData( uint8 u8Data)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <LCD_u8WriteData+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <LCD_u8WriteData+0x8>
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	89 83       	std	Y+1, r24	; 0x01
	static uint8 u8LCDdatatime=0;
	static uint8 LCD_Data_State=0;

	switch(LCD_Data_State){
     eb6:	80 91 56 01 	lds	r24, 0x0156
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	3c 83       	std	Y+4, r19	; 0x04
     ec0:	2b 83       	std	Y+3, r18	; 0x03
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	82 30       	cpi	r24, 0x02	; 2
     ec8:	91 05       	cpc	r25, r1
     eca:	09 f4       	brne	.+2      	; 0xece <LCD_u8WriteData+0x26>
     ecc:	68 c0       	rjmp	.+208    	; 0xf9e <LCD_u8WriteData+0xf6>
     ece:	2b 81       	ldd	r18, Y+3	; 0x03
     ed0:	3c 81       	ldd	r19, Y+4	; 0x04
     ed2:	23 30       	cpi	r18, 0x03	; 3
     ed4:	31 05       	cpc	r19, r1
     ed6:	5c f4       	brge	.+22     	; 0xeee <LCD_u8WriteData+0x46>
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	00 97       	sbiw	r24, 0x00	; 0
     ede:	a1 f0       	breq	.+40     	; 0xf08 <LCD_u8WriteData+0x60>
     ee0:	2b 81       	ldd	r18, Y+3	; 0x03
     ee2:	3c 81       	ldd	r19, Y+4	; 0x04
     ee4:	21 30       	cpi	r18, 0x01	; 1
     ee6:	31 05       	cpc	r19, r1
     ee8:	09 f4       	brne	.+2      	; 0xeec <LCD_u8WriteData+0x44>
     eea:	49 c0       	rjmp	.+146    	; 0xf7e <LCD_u8WriteData+0xd6>
     eec:	a9 c0       	rjmp	.+338    	; 0x1040 <LCD_u8WriteData+0x198>
     eee:	8b 81       	ldd	r24, Y+3	; 0x03
     ef0:	9c 81       	ldd	r25, Y+4	; 0x04
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	91 05       	cpc	r25, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <LCD_u8WriteData+0x52>
     ef8:	84 c0       	rjmp	.+264    	; 0x1002 <LCD_u8WriteData+0x15a>
     efa:	2b 81       	ldd	r18, Y+3	; 0x03
     efc:	3c 81       	ldd	r19, Y+4	; 0x04
     efe:	24 30       	cpi	r18, 0x04	; 4
     f00:	31 05       	cpc	r19, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <LCD_u8WriteData+0x5e>
     f04:	91 c0       	rjmp	.+290    	; 0x1028 <LCD_u8WriteData+0x180>
     f06:	9c c0       	rjmp	.+312    	; 0x1040 <LCD_u8WriteData+0x198>

	case 0:
		//RS 	= 1
			DIO_u8WritePin(LCD_RS,HIGH);
     f08:	89 e0       	ldi	r24, 0x09	; 9
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

			//R/W 	= 0
			DIO_u8WritePin(LCD_RW,LOW);
     f10:	8a e0       	ldi	r24, 0x0A	; 10
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

			//Send data

			//Write High Niple
			DIO_u8WritePin(LCD_D7,Get_Bit(u8Data,7));
     f18:	89 81       	ldd	r24, Y+1	; 0x01
     f1a:	98 2f       	mov	r25, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	99 27       	eor	r25, r25
     f20:	99 1f       	adc	r25, r25
     f22:	87 e0       	ldi	r24, 0x07	; 7
     f24:	69 2f       	mov	r22, r25
     f26:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D6,Get_Bit(u8Data,6));
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
     f2c:	82 95       	swap	r24
     f2e:	86 95       	lsr	r24
     f30:	86 95       	lsr	r24
     f32:	83 70       	andi	r24, 0x03	; 3
     f34:	98 2f       	mov	r25, r24
     f36:	91 70       	andi	r25, 0x01	; 1
     f38:	86 e0       	ldi	r24, 0x06	; 6
     f3a:	69 2f       	mov	r22, r25
     f3c:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D5,Get_Bit(u8Data,5));
     f40:	89 81       	ldd	r24, Y+1	; 0x01
     f42:	82 95       	swap	r24
     f44:	86 95       	lsr	r24
     f46:	87 70       	andi	r24, 0x07	; 7
     f48:	98 2f       	mov	r25, r24
     f4a:	91 70       	andi	r25, 0x01	; 1
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	69 2f       	mov	r22, r25
     f50:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D4,Get_Bit(u8Data,4));
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	82 95       	swap	r24
     f58:	8f 70       	andi	r24, 0x0F	; 15
     f5a:	98 2f       	mov	r25, r24
     f5c:	91 70       	andi	r25, 0x01	; 1
     f5e:	84 e0       	ldi	r24, 0x04	; 4
     f60:	69 2f       	mov	r22, r25
     f62:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

			//E		: Falling edge
			DIO_u8WritePin(LCD_E,HIGH);
     f66:	8b e0       	ldi	r24, 0x0B	; 11
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			LCD_Data_State++;
     f6e:	80 91 56 01 	lds	r24, 0x0156
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	80 93 56 01 	sts	0x0156, r24
			u8LCDdatatime = 0;
     f78:	10 92 57 01 	sts	0x0157, r1
     f7c:	66 c0       	rjmp	.+204    	; 0x104a <LCD_u8WriteData+0x1a2>
		break;

	case 1:
		if(++u8LCDdatatime > 5){
     f7e:	80 91 57 01 	lds	r24, 0x0157
     f82:	8f 5f       	subi	r24, 0xFF	; 255
     f84:	80 93 57 01 	sts	0x0157, r24
     f88:	80 91 57 01 	lds	r24, 0x0157
     f8c:	86 30       	cpi	r24, 0x06	; 6
     f8e:	08 f4       	brcc	.+2      	; 0xf92 <LCD_u8WriteData+0xea>
     f90:	5c c0       	rjmp	.+184    	; 0x104a <LCD_u8WriteData+0x1a2>
			LCD_Data_State++;
     f92:	80 91 56 01 	lds	r24, 0x0156
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	80 93 56 01 	sts	0x0156, r24
     f9c:	56 c0       	rjmp	.+172    	; 0x104a <LCD_u8WriteData+0x1a2>
		}
		break;
	case 2:
		u8LCDdatatime =0;
     f9e:	10 92 57 01 	sts	0x0157, r1
		DIO_u8WritePin(LCD_E,LOW);
     fa2:	8b e0       	ldi	r24, 0x0B	; 11
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

			//Write High Niple
			DIO_u8WritePin(LCD_D7,Get_Bit(u8Data,3));
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	86 95       	lsr	r24
     fae:	86 95       	lsr	r24
     fb0:	86 95       	lsr	r24
     fb2:	98 2f       	mov	r25, r24
     fb4:	91 70       	andi	r25, 0x01	; 1
     fb6:	87 e0       	ldi	r24, 0x07	; 7
     fb8:	69 2f       	mov	r22, r25
     fba:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D6,Get_Bit(u8Data,2));
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	86 95       	lsr	r24
     fc2:	86 95       	lsr	r24
     fc4:	98 2f       	mov	r25, r24
     fc6:	91 70       	andi	r25, 0x01	; 1
     fc8:	86 e0       	ldi	r24, 0x06	; 6
     fca:	69 2f       	mov	r22, r25
     fcc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D5,Get_Bit(u8Data,1));
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	86 95       	lsr	r24
     fd4:	98 2f       	mov	r25, r24
     fd6:	91 70       	andi	r25, 0x01	; 1
     fd8:	85 e0       	ldi	r24, 0x05	; 5
     fda:	69 2f       	mov	r22, r25
     fdc:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			DIO_u8WritePin(LCD_D4,Get_Bit(u8Data,0));
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	98 2f       	mov	r25, r24
     fe4:	91 70       	andi	r25, 0x01	; 1
     fe6:	84 e0       	ldi	r24, 0x04	; 4
     fe8:	69 2f       	mov	r22, r25
     fea:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>

			//E		: Falling edge
			DIO_u8WritePin(LCD_E,HIGH);
     fee:	8b e0       	ldi	r24, 0x0B	; 11
     ff0:	61 e0       	ldi	r22, 0x01	; 1
     ff2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			LCD_Data_State++;
     ff6:	80 91 56 01 	lds	r24, 0x0156
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	80 93 56 01 	sts	0x0156, r24
    1000:	24 c0       	rjmp	.+72     	; 0x104a <LCD_u8WriteData+0x1a2>

		break;
	case 3:DIO_u8WritePin(0,LOW);
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
			if(++u8LCDdatatime > 5){
    100a:	80 91 57 01 	lds	r24, 0x0157
    100e:	8f 5f       	subi	r24, 0xFF	; 255
    1010:	80 93 57 01 	sts	0x0157, r24
    1014:	80 91 57 01 	lds	r24, 0x0157
    1018:	86 30       	cpi	r24, 0x06	; 6
    101a:	b8 f0       	brcs	.+46     	; 0x104a <LCD_u8WriteData+0x1a2>
				LCD_Data_State++;
    101c:	80 91 56 01 	lds	r24, 0x0156
    1020:	8f 5f       	subi	r24, 0xFF	; 255
    1022:	80 93 56 01 	sts	0x0156, r24
    1026:	11 c0       	rjmp	.+34     	; 0x104a <LCD_u8WriteData+0x1a2>
			}
			break;


	case 4:
		u8LCDdatatime = 0;
    1028:	10 92 57 01 	sts	0x0157, r1
		DIO_u8WritePin(LCD_E,LOW);
    102c:	8b e0       	ldi	r24, 0x0B	; 11
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
		LCD_Data_State++;
    1034:	80 91 56 01 	lds	r24, 0x0156
    1038:	8f 5f       	subi	r24, 0xFF	; 255
    103a:	80 93 56 01 	sts	0x0156, r24
    103e:	05 c0       	rjmp	.+10     	; 0x104a <LCD_u8WriteData+0x1a2>
		break;

	default :
		LCD_Data_State = 0;
    1040:	10 92 56 01 	sts	0x0156, r1
		return 1;
    1044:	31 e0       	ldi	r19, 0x01	; 1
    1046:	3a 83       	std	Y+2, r19	; 0x02
    1048:	01 c0       	rjmp	.+2      	; 0x104c <LCD_u8WriteData+0x1a4>
		break;
	}

	return 0;
    104a:	1a 82       	std	Y+2, r1	; 0x02
    104c:	8a 81       	ldd	r24, Y+2	; 0x02

}
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	0f 90       	pop	r0
    1054:	0f 90       	pop	r0
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <LCD_u8GotoXY>:

static uint8 LCD_u8GotoXY (uint8 x , uint8 y)
{
    105c:	df 93       	push	r29
    105e:	cf 93       	push	r28
    1060:	00 d0       	rcall	.+0      	; 0x1062 <LCD_u8GotoXY+0x6>
    1062:	0f 92       	push	r0
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	6a 83       	std	Y+2, r22	; 0x02
	if (LCD_u8WriteCommand(0x80|(((y)&1)<<6)|((x) & 0x3f)))
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
    106e:	88 2f       	mov	r24, r24
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	81 70       	andi	r24, 0x01	; 1
    1074:	90 70       	andi	r25, 0x00	; 0
    1076:	00 24       	eor	r0, r0
    1078:	96 95       	lsr	r25
    107a:	87 95       	ror	r24
    107c:	07 94       	ror	r0
    107e:	96 95       	lsr	r25
    1080:	87 95       	ror	r24
    1082:	07 94       	ror	r0
    1084:	98 2f       	mov	r25, r24
    1086:	80 2d       	mov	r24, r0
    1088:	98 2f       	mov	r25, r24
    108a:	90 68       	ori	r25, 0x80	; 128
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	8f 73       	andi	r24, 0x3F	; 63
    1090:	89 2b       	or	r24, r25
    1092:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_u8WriteCommand>
    1096:	88 23       	and	r24, r24
    1098:	19 f0       	breq	.+6      	; 0x10a0 <LCD_u8GotoXY+0x44>
	{
		return 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	01 c0       	rjmp	.+2      	; 0x10a2 <LCD_u8GotoXY+0x46>
	}
	return 0;
    10a0:	1b 82       	std	Y+3, r1	; 0x03
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <LCD_vidTask>:


void LCD_vidTask (void)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <LCD_vidTask+0x6>
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	static uint8 LCDx=0,LCDy=0;
	switch(u8LCDState)
    10ba:	80 91 51 01 	lds	r24, 0x0151
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3a 83       	std	Y+2, r19	; 0x02
    10c4:	29 83       	std	Y+1, r18	; 0x01
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	91 05       	cpc	r25, r1
    10ce:	39 f1       	breq	.+78     	; 0x111e <LCD_vidTask+0x6e>
    10d0:	29 81       	ldd	r18, Y+1	; 0x01
    10d2:	3a 81       	ldd	r19, Y+2	; 0x02
    10d4:	23 30       	cpi	r18, 0x03	; 3
    10d6:	31 05       	cpc	r19, r1
    10d8:	5c f4       	brge	.+22     	; 0x10f0 <LCD_vidTask+0x40>
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	00 97       	sbiw	r24, 0x00	; 0
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <LCD_vidTask+0x34>
    10e2:	6c c0       	rjmp	.+216    	; 0x11bc <LCD_vidTask+0x10c>
    10e4:	29 81       	ldd	r18, Y+1	; 0x01
    10e6:	3a 81       	ldd	r19, Y+2	; 0x02
    10e8:	21 30       	cpi	r18, 0x01	; 1
    10ea:	31 05       	cpc	r19, r1
    10ec:	69 f0       	breq	.+26     	; 0x1108 <LCD_vidTask+0x58>
    10ee:	66 c0       	rjmp	.+204    	; 0x11bc <LCD_vidTask+0x10c>
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	83 30       	cpi	r24, 0x03	; 3
    10f6:	91 05       	cpc	r25, r1
    10f8:	f1 f0       	breq	.+60     	; 0x1136 <LCD_vidTask+0x86>
    10fa:	29 81       	ldd	r18, Y+1	; 0x01
    10fc:	3a 81       	ldd	r19, Y+2	; 0x02
    10fe:	24 30       	cpi	r18, 0x04	; 4
    1100:	31 05       	cpc	r19, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <LCD_vidTask+0x56>
    1104:	4f c0       	rjmp	.+158    	; 0x11a4 <LCD_vidTask+0xf4>
    1106:	5a c0       	rjmp	.+180    	; 0x11bc <LCD_vidTask+0x10c>
	{
	case 0:
		break;
	case 1:
		if(LCD_u8Init())
    1108:	0e 94 43 06 	call	0xc86	; 0xc86 <LCD_u8Init>
    110c:	88 23       	and	r24, r24
    110e:	09 f4       	brne	.+2      	; 0x1112 <LCD_vidTask+0x62>
    1110:	55 c0       	rjmp	.+170    	; 0x11bc <LCD_vidTask+0x10c>
		{
			u8LCDState++;
    1112:	80 91 51 01 	lds	r24, 0x0151
    1116:	8f 5f       	subi	r24, 0xFF	; 255
    1118:	80 93 51 01 	sts	0x0151, r24
    111c:	4f c0       	rjmp	.+158    	; 0x11bc <LCD_vidTask+0x10c>
		}
		break;
	case 2:
		if(LCD_u8WriteCommand(1))
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	0e 94 16 05 	call	0xa2c	; 0xa2c <LCD_u8WriteCommand>
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <LCD_vidTask+0x7a>
    1128:	49 c0       	rjmp	.+146    	; 0x11bc <LCD_vidTask+0x10c>
		{
			u8LCDState++;
    112a:	80 91 51 01 	lds	r24, 0x0151
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	80 93 51 01 	sts	0x0151, r24
    1134:	43 c0       	rjmp	.+134    	; 0x11bc <LCD_vidTask+0x10c>
		}
		break;
	case 3:
		if(LCD_u8WriteData(LCD_LINE[LCDy][LCDx]))
    1136:	80 91 58 01 	lds	r24, 0x0158
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	80 91 59 01 	lds	r24, 0x0159
    1142:	48 2f       	mov	r20, r24
    1144:	50 e0       	ldi	r21, 0x00	; 0
    1146:	c9 01       	movw	r24, r18
    1148:	82 95       	swap	r24
    114a:	92 95       	swap	r25
    114c:	90 7f       	andi	r25, 0xF0	; 240
    114e:	98 27       	eor	r25, r24
    1150:	80 7f       	andi	r24, 0xF0	; 240
    1152:	98 27       	eor	r25, r24
    1154:	82 0f       	add	r24, r18
    1156:	93 1f       	adc	r25, r19
    1158:	84 0f       	add	r24, r20
    115a:	95 1f       	adc	r25, r21
    115c:	fc 01       	movw	r30, r24
    115e:	ee 53       	subi	r30, 0x3E	; 62
    1160:	ff 4f       	sbci	r31, 0xFF	; 255
    1162:	80 81       	ld	r24, Z
    1164:	0e 94 54 07 	call	0xea8	; 0xea8 <LCD_u8WriteData>
    1168:	88 23       	and	r24, r24
    116a:	41 f1       	breq	.+80     	; 0x11bc <LCD_vidTask+0x10c>
		{
			if(++LCDx>15)
    116c:	80 91 59 01 	lds	r24, 0x0159
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 93 59 01 	sts	0x0159, r24
    1176:	80 91 59 01 	lds	r24, 0x0159
    117a:	80 31       	cpi	r24, 0x10	; 16
    117c:	f8 f0       	brcs	.+62     	; 0x11bc <LCD_vidTask+0x10c>
			{
				LCDx=0;
    117e:	10 92 59 01 	sts	0x0159, r1
				if(++LCDy>1)
    1182:	80 91 58 01 	lds	r24, 0x0158
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	80 93 58 01 	sts	0x0158, r24
    118c:	80 91 58 01 	lds	r24, 0x0158
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	10 f0       	brcs	.+4      	; 0x1198 <LCD_vidTask+0xe8>
				{
					LCDy=0;
    1194:	10 92 58 01 	sts	0x0158, r1
				}
				u8LCDState++;
    1198:	80 91 51 01 	lds	r24, 0x0151
    119c:	8f 5f       	subi	r24, 0xFF	; 255
    119e:	80 93 51 01 	sts	0x0151, r24
    11a2:	0c c0       	rjmp	.+24     	; 0x11bc <LCD_vidTask+0x10c>
			}
		}
		break;
	case 4:
		if(LCD_u8GotoXY(LCDx,LCDy))
    11a4:	80 91 59 01 	lds	r24, 0x0159
    11a8:	90 91 58 01 	lds	r25, 0x0158
    11ac:	69 2f       	mov	r22, r25
    11ae:	0e 94 2e 08 	call	0x105c	; 0x105c <LCD_u8GotoXY>
    11b2:	88 23       	and	r24, r24
    11b4:	19 f0       	breq	.+6      	; 0x11bc <LCD_vidTask+0x10c>
		{
			u8LCDState=3;
    11b6:	83 e0       	ldi	r24, 0x03	; 3
    11b8:	80 93 51 01 	sts	0x0151, r24
	default:

		break;
	}

}
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <LCD_vidGotoXY>:

void LCD_vidGotoXY(uint8 x,uint8 y)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <LCD_vidGotoXY+0x6>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	6a 83       	std	Y+2, r22	; 0x02
	u8x =x;u8y=y;
    11d4:	89 81       	ldd	r24, Y+1	; 0x01
    11d6:	80 93 4f 01 	sts	0x014F, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	80 93 50 01 	sts	0x0150, r24
}
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <LCD_vidWrite>:
void LCD_vidWrite(uint8 u8data)
{
    11ea:	df 93       	push	r29
    11ec:	cf 93       	push	r28
    11ee:	0f 92       	push	r0
    11f0:	cd b7       	in	r28, 0x3d	; 61
    11f2:	de b7       	in	r29, 0x3e	; 62
    11f4:	89 83       	std	Y+1, r24	; 0x01
	if ((u8data != '\n') /*&& (u8data != '\r')*/ )
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	8a 30       	cpi	r24, 0x0A	; 10
    11fa:	71 f1       	breq	.+92     	; 0x1258 <LCD_vidWrite+0x6e>
	{
		LCD_LINE[u8y][u8x++]=u8data;
    11fc:	80 91 50 01 	lds	r24, 0x0150
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	60 91 4f 01 	lds	r22, 0x014F
    1208:	46 2f       	mov	r20, r22
    120a:	50 e0       	ldi	r21, 0x00	; 0
    120c:	c9 01       	movw	r24, r18
    120e:	82 95       	swap	r24
    1210:	92 95       	swap	r25
    1212:	90 7f       	andi	r25, 0xF0	; 240
    1214:	98 27       	eor	r25, r24
    1216:	80 7f       	andi	r24, 0xF0	; 240
    1218:	98 27       	eor	r25, r24
    121a:	82 0f       	add	r24, r18
    121c:	93 1f       	adc	r25, r19
    121e:	84 0f       	add	r24, r20
    1220:	95 1f       	adc	r25, r21
    1222:	fc 01       	movw	r30, r24
    1224:	ee 53       	subi	r30, 0x3E	; 62
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	80 83       	st	Z, r24
    122c:	86 2f       	mov	r24, r22
    122e:	8f 5f       	subi	r24, 0xFF	; 255
    1230:	80 93 4f 01 	sts	0x014F, r24
		if(u8x>15)
    1234:	80 91 4f 01 	lds	r24, 0x014F
    1238:	80 31       	cpi	r24, 0x10	; 16
    123a:	d8 f0       	brcs	.+54     	; 0x1272 <LCD_vidWrite+0x88>
		{
			u8x=0;
    123c:	10 92 4f 01 	sts	0x014F, r1
			if(++u8y>1)
    1240:	80 91 50 01 	lds	r24, 0x0150
    1244:	8f 5f       	subi	r24, 0xFF	; 255
    1246:	80 93 50 01 	sts	0x0150, r24
    124a:	80 91 50 01 	lds	r24, 0x0150
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	80 f0       	brcs	.+32     	; 0x1272 <LCD_vidWrite+0x88>
			{
				u8y=0;
    1252:	10 92 50 01 	sts	0x0150, r1
    1256:	0d c0       	rjmp	.+26     	; 0x1272 <LCD_vidWrite+0x88>
			}
		}
	}
	else
	{
		u8x=0;
    1258:	10 92 4f 01 	sts	0x014F, r1
		if(++u8y>1)
    125c:	80 91 50 01 	lds	r24, 0x0150
    1260:	8f 5f       	subi	r24, 0xFF	; 255
    1262:	80 93 50 01 	sts	0x0150, r24
    1266:	80 91 50 01 	lds	r24, 0x0150
    126a:	82 30       	cpi	r24, 0x02	; 2
    126c:	10 f0       	brcs	.+4      	; 0x1272 <LCD_vidWrite+0x88>
		{
			u8y=0;
    126e:	10 92 50 01 	sts	0x0150, r1
		}
	}

}
    1272:	0f 90       	pop	r0
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <LCD_vidInit>:
void LCD_vidInit(void)
{
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
	u8LCDState=1;
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	80 93 51 01 	sts	0x0151, r24
}
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <LCD_vidString>:

void LCD_vidString (int8 I8String[])
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <LCD_vidString+0x6>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	9b 83       	std	Y+3, r25	; 0x03
    129c:	8a 83       	std	Y+2, r24	; 0x02

	uint8 u8i =0;
    129e:	19 82       	std	Y+1, r1	; 0x01
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <LCD_vidString+0x30>
	while (I8String[u8i])
	{
		LCD_vidWrite( I8String[u8i]);
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	fc 01       	movw	r30, r24
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	80 81       	ld	r24, Z
    12b4:	0e 94 f5 08 	call	0x11ea	; 0x11ea <LCD_vidWrite>
		u8i++;
    12b8:	89 81       	ldd	r24, Y+1	; 0x01
    12ba:	8f 5f       	subi	r24, 0xFF	; 255
    12bc:	89 83       	std	Y+1, r24	; 0x01

void LCD_vidString (int8 I8String[])
{

	uint8 u8i =0;
	while (I8String[u8i])
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	9b 81       	ldd	r25, Y+3	; 0x03
    12c8:	fc 01       	movw	r30, r24
    12ca:	e2 0f       	add	r30, r18
    12cc:	f3 1f       	adc	r31, r19
    12ce:	80 81       	ld	r24, Z
    12d0:	88 23       	and	r24, r24
    12d2:	39 f7       	brne	.-50     	; 0x12a2 <LCD_vidString+0x14>
	{
		LCD_vidWrite( I8String[u8i]);
		u8i++;
	}
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <LCD_vidClear>:
void LCD_vidClear ()
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	00 d0       	rcall	.+0      	; 0x12e6 <LCD_vidClear+0x6>
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
	for (uint8 y =0;y<2;y++)
    12ea:	1a 82       	std	Y+2, r1	; 0x02
    12ec:	21 c0       	rjmp	.+66     	; 0x1330 <LCD_vidClear+0x50>
	{
		for(uint8 x =0 ;x<16;x++)
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	19 c0       	rjmp	.+50     	; 0x1324 <LCD_vidClear+0x44>
		{
			LCD_LINE[y][x]=' ';
    12f2:	8a 81       	ldd	r24, Y+2	; 0x02
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	89 81       	ldd	r24, Y+1	; 0x01
    12fa:	48 2f       	mov	r20, r24
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	c9 01       	movw	r24, r18
    1300:	82 95       	swap	r24
    1302:	92 95       	swap	r25
    1304:	90 7f       	andi	r25, 0xF0	; 240
    1306:	98 27       	eor	r25, r24
    1308:	80 7f       	andi	r24, 0xF0	; 240
    130a:	98 27       	eor	r25, r24
    130c:	82 0f       	add	r24, r18
    130e:	93 1f       	adc	r25, r19
    1310:	84 0f       	add	r24, r20
    1312:	95 1f       	adc	r25, r21
    1314:	fc 01       	movw	r30, r24
    1316:	ee 53       	subi	r30, 0x3E	; 62
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 e2       	ldi	r24, 0x20	; 32
    131c:	80 83       	st	Z, r24
}
void LCD_vidClear ()
{
	for (uint8 y =0;y<2;y++)
	{
		for(uint8 x =0 ;x<16;x++)
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	8f 5f       	subi	r24, 0xFF	; 255
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	80 31       	cpi	r24, 0x10	; 16
    1328:	20 f3       	brcs	.-56     	; 0x12f2 <LCD_vidClear+0x12>
		u8i++;
	}
}
void LCD_vidClear ()
{
	for (uint8 y =0;y<2;y++)
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	8f 5f       	subi	r24, 0xFF	; 255
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	82 30       	cpi	r24, 0x02	; 2
    1334:	e0 f2       	brcs	.-72     	; 0x12ee <LCD_vidClear+0xe>
		for(uint8 x =0 ;x<16;x++)
		{
			LCD_LINE[y][x]=' ';
		}
	}
	u8x=0;
    1336:	10 92 4f 01 	sts	0x014F, r1
	u8y=0;
    133a:	10 92 50 01 	sts	0x0150, r1
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <Str_Compare>:
static int8  Text_Mode[]="AT+CMGF=1\r";   // to set text mode
static uint8 Terminator=0x1A;     // uint8tacter form of control + z terminator uint8acter


static uint8 Str_Compare(int8 Str1[],int8 Str2[])
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	27 97       	sbiw	r28, 0x07	; 7
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	9b 83       	std	Y+3, r25	; 0x03
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	7d 83       	std	Y+5, r23	; 0x05
    1362:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    1364:	19 82       	std	Y+1, r1	; 0x01
    1366:	03 c0       	rjmp	.+6      	; 0x136e <Str_Compare+0x26>
	while(Str1[i]==Str2[i]&&Str2[i])
	{
		i++;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	8f 5f       	subi	r24, 0xFF	; 255
    136c:	89 83       	std	Y+1, r24	; 0x01


static uint8 Str_Compare(int8 Str1[],int8 Str2[])
{
	uint8 i=0;
	while(Str1[i]==Str2[i]&&Str2[i])
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	9b 81       	ldd	r25, Y+3	; 0x03
    1378:	fc 01       	movw	r30, r24
    137a:	e2 0f       	add	r30, r18
    137c:	f3 1f       	adc	r31, r19
    137e:	40 81       	ld	r20, Z
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	fc 01       	movw	r30, r24
    138c:	e2 0f       	add	r30, r18
    138e:	f3 1f       	adc	r31, r19
    1390:	80 81       	ld	r24, Z
    1392:	48 17       	cp	r20, r24
    1394:	59 f4       	brne	.+22     	; 0x13ac <Str_Compare+0x64>
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	fc 01       	movw	r30, r24
    13a2:	e2 0f       	add	r30, r18
    13a4:	f3 1f       	adc	r31, r19
    13a6:	80 81       	ld	r24, Z
    13a8:	88 23       	and	r24, r24
    13aa:	f1 f6       	brne	.-68     	; 0x1368 <Str_Compare+0x20>
	{
		i++;
	}
	return(!(Str1[i]||Str2[i]));
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	8a 81       	ldd	r24, Y+2	; 0x02
    13b4:	9b 81       	ldd	r25, Y+3	; 0x03
    13b6:	fc 01       	movw	r30, r24
    13b8:	e2 0f       	add	r30, r18
    13ba:	f3 1f       	adc	r31, r19
    13bc:	80 81       	ld	r24, Z
    13be:	88 23       	and	r24, r24
    13c0:	81 f4       	brne	.+32     	; 0x13e2 <Str_Compare+0x9a>
    13c2:	89 81       	ldd	r24, Y+1	; 0x01
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	9d 81       	ldd	r25, Y+5	; 0x05
    13cc:	fc 01       	movw	r30, r24
    13ce:	e2 0f       	add	r30, r18
    13d0:	f3 1f       	adc	r31, r19
    13d2:	80 81       	ld	r24, Z
    13d4:	88 23       	and	r24, r24
    13d6:	29 f4       	brne	.+10     	; 0x13e2 <Str_Compare+0x9a>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	9f 83       	std	Y+7, r25	; 0x07
    13de:	8e 83       	std	Y+6, r24	; 0x06
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <Str_Compare+0x9e>
    13e2:	1f 82       	std	Y+7, r1	; 0x07
    13e4:	1e 82       	std	Y+6, r1	; 0x06
    13e6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    13e8:	27 96       	adiw	r28, 0x07	; 7
    13ea:	0f b6       	in	r0, 0x3f	; 63
    13ec:	f8 94       	cli
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	0f be       	out	0x3f, r0	; 63
    13f2:	cd bf       	out	0x3d, r28	; 61
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <GSM_vidRecieveString>:

static void GSM_vidRecieveString(int8 uint8Data[], uint8* length)
{
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <GSM_vidRecieveString+0xc>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <GSM_vidRecieveString+0xe>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	7c 83       	std	Y+4, r23	; 0x04
    1412:	6b 83       	std	Y+3, r22	; 0x03
	*length=0;
    1414:	eb 81       	ldd	r30, Y+3	; 0x03
    1416:	fc 81       	ldd	r31, Y+4	; 0x04
    1418:	10 82       	st	Z, r1
	do
	{
		uint8Data[(*length)++]=UART_u8RecieveChar();
    141a:	eb 81       	ldd	r30, Y+3	; 0x03
    141c:	fc 81       	ldd	r31, Y+4	; 0x04
    141e:	f0 80       	ld	r15, Z
    1420:	2f 2d       	mov	r18, r15
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	8c 01       	movw	r16, r24
    142a:	02 0f       	add	r16, r18
    142c:	13 1f       	adc	r17, r19
    142e:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
    1432:	f8 01       	movw	r30, r16
    1434:	80 83       	st	Z, r24
    1436:	8f 2d       	mov	r24, r15
    1438:	8f 5f       	subi	r24, 0xFF	; 255
    143a:	eb 81       	ldd	r30, Y+3	; 0x03
    143c:	fc 81       	ldd	r31, Y+4	; 0x04
    143e:	80 83       	st	Z, r24
	}
	while((uint8Data[(*length)-1])&&(uint8Data[(*length)-1]!='\n')&&(uint8Data[(*length)-1]!='>'));
    1440:	eb 81       	ldd	r30, Y+3	; 0x03
    1442:	fc 81       	ldd	r31, Y+4	; 0x04
    1444:	80 81       	ld	r24, Z
    1446:	88 2f       	mov	r24, r24
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	9c 01       	movw	r18, r24
    144c:	21 50       	subi	r18, 0x01	; 1
    144e:	30 40       	sbci	r19, 0x00	; 0
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	fc 01       	movw	r30, r24
    1456:	e2 0f       	add	r30, r18
    1458:	f3 1f       	adc	r31, r19
    145a:	80 81       	ld	r24, Z
    145c:	88 23       	and	r24, r24
    145e:	09 f1       	breq	.+66     	; 0x14a2 <GSM_vidRecieveString+0xa8>
    1460:	eb 81       	ldd	r30, Y+3	; 0x03
    1462:	fc 81       	ldd	r31, Y+4	; 0x04
    1464:	80 81       	ld	r24, Z
    1466:	88 2f       	mov	r24, r24
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	9c 01       	movw	r18, r24
    146c:	21 50       	subi	r18, 0x01	; 1
    146e:	30 40       	sbci	r19, 0x00	; 0
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	fc 01       	movw	r30, r24
    1476:	e2 0f       	add	r30, r18
    1478:	f3 1f       	adc	r31, r19
    147a:	80 81       	ld	r24, Z
    147c:	8a 30       	cpi	r24, 0x0A	; 10
    147e:	89 f0       	breq	.+34     	; 0x14a2 <GSM_vidRecieveString+0xa8>
    1480:	eb 81       	ldd	r30, Y+3	; 0x03
    1482:	fc 81       	ldd	r31, Y+4	; 0x04
    1484:	80 81       	ld	r24, Z
    1486:	88 2f       	mov	r24, r24
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	9c 01       	movw	r18, r24
    148c:	21 50       	subi	r18, 0x01	; 1
    148e:	30 40       	sbci	r19, 0x00	; 0
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	fc 01       	movw	r30, r24
    1496:	e2 0f       	add	r30, r18
    1498:	f3 1f       	adc	r31, r19
    149a:	80 81       	ld	r24, Z
    149c:	8e 33       	cpi	r24, 0x3E	; 62
    149e:	09 f0       	breq	.+2      	; 0x14a2 <GSM_vidRecieveString+0xa8>
    14a0:	bc cf       	rjmp	.-136    	; 0x141a <GSM_vidRecieveString+0x20>
	uint8Data[(*length)]=0;
    14a2:	eb 81       	ldd	r30, Y+3	; 0x03
    14a4:	fc 81       	ldd	r31, Y+4	; 0x04
    14a6:	80 81       	ld	r24, Z
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	fc 01       	movw	r30, r24
    14b2:	e2 0f       	add	r30, r18
    14b4:	f3 1f       	adc	r31, r19
    14b6:	10 82       	st	Z, r1
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	1f 91       	pop	r17
    14c6:	0f 91       	pop	r16
    14c8:	ff 90       	pop	r15
    14ca:	08 95       	ret

000014cc <GSMsend_to_modem>:


uint8 GSMsend_to_modem(int8 sa[])   //function to write anything serially
{
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	00 d0       	rcall	.+0      	; 0x14d2 <GSMsend_to_modem+0x6>
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <GSMsend_to_modem+0x8>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	8b 83       	std	Y+3, r24	; 0x03

	uint8 f=1 ;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0 ;
    14e0:	19 82       	std	Y+1, r1	; 0x01
    14e2:	34 c0       	rjmp	.+104    	; 0x154c <GSMsend_to_modem+0x80>
//	UART_u8GetUdr();


	while(f&&sa[i])
	{
		UART_vidSendChar(sa[i]);
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	fc 01       	movw	r30, r24
    14f0:	e2 0f       	add	r30, r18
    14f2:	f3 1f       	adc	r31, r19
    14f4:	80 81       	ld	r24, Z
    14f6:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>
		if (sa[i]!=Terminator)
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	fc 01       	movw	r30, r24
    1506:	e2 0f       	add	r30, r18
    1508:	f3 1f       	adc	r31, r19
    150a:	90 81       	ld	r25, Z
    150c:	80 91 f8 00 	lds	r24, 0x00F8
    1510:	98 17       	cp	r25, r24
    1512:	a9 f0       	breq	.+42     	; 0x153e <GSMsend_to_modem+0x72>
			f = (UART_u8RecieveChar()==sa[i++]);
    1514:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
    1518:	48 2f       	mov	r20, r24
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	fc 01       	movw	r30, r24
    1526:	e2 0f       	add	r30, r18
    1528:	f3 1f       	adc	r31, r19
    152a:	80 81       	ld	r24, Z
    152c:	1a 82       	std	Y+2, r1	; 0x02
    152e:	48 17       	cp	r20, r24
    1530:	11 f4       	brne	.+4      	; 0x1536 <GSMsend_to_modem+0x6a>
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	8a 83       	std	Y+2, r24	; 0x02
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	8f 5f       	subi	r24, 0xFF	; 255
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	07 c0       	rjmp	.+14     	; 0x154c <GSMsend_to_modem+0x80>
		else
			f = (UART_u8RecieveChar()=='\r');
    153e:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
    1542:	1a 82       	std	Y+2, r1	; 0x02
    1544:	8d 30       	cpi	r24, 0x0D	; 13
    1546:	11 f4       	brne	.+4      	; 0x154c <GSMsend_to_modem+0x80>
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 f=1 ;
	uint8 i=0 ;
//	UART_u8GetUdr();


	while(f&&sa[i])
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	88 23       	and	r24, r24
    1550:	61 f0       	breq	.+24     	; 0x156a <GSMsend_to_modem+0x9e>
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	28 2f       	mov	r18, r24
    1556:	30 e0       	ldi	r19, 0x00	; 0
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	9c 81       	ldd	r25, Y+4	; 0x04
    155c:	fc 01       	movw	r30, r24
    155e:	e2 0f       	add	r30, r18
    1560:	f3 1f       	adc	r31, r19
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	09 f0       	breq	.+2      	; 0x156a <GSMsend_to_modem+0x9e>
    1568:	bd cf       	rjmp	.-134    	; 0x14e4 <GSMsend_to_modem+0x18>
			f = (UART_u8RecieveChar()==sa[i++]);
		else
			f = (UART_u8RecieveChar()=='\r');
	}

	return f;
    156a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <GSM_vidInit>:

void GSM_vidInit()
{
    157a:	df 93       	push	r29
    157c:	cf 93       	push	r28
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
	DIO_vidInit();
    1582:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <DIO_vidInit>
	DIO_u8SetPinDir(Selector,OUTPUT);
    1586:	80 e1       	ldi	r24, 0x10	; 16
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
	UART_vidInit();
    158e:	0e 94 49 00 	call	0x92	; 0x92 <UART_vidInit>
	DIO_u8SetPinDir(RXD,OUTPUT);
    1592:	88 e1       	ldi	r24, 0x18	; 24
    1594:	61 e0       	ldi	r22, 0x01	; 1
    1596:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
	DIO_u8SetPinDir(TXD,INPUT_PULLUP);
    159a:	89 e1       	ldi	r24, 0x19	; 25
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>

}
    15a2:	cf 91       	pop	r28
    15a4:	df 91       	pop	r29
    15a6:	08 95       	ret

000015a8 <GSM_u8Startup>:

uint8 GSM_u8Startup()
{
    15a8:	df 93       	push	r29
    15aa:	cf 93       	push	r28
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	2b 97       	sbiw	r28, 0x0b	; 11
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
	int8 Buffer[10]={0};
    15bc:	8a e0       	ldi	r24, 0x0A	; 10
    15be:	fe 01       	movw	r30, r28
    15c0:	31 96       	adiw	r30, 0x01	; 1
    15c2:	df 01       	movw	r26, r30
    15c4:	98 2f       	mov	r25, r24
    15c6:	1d 92       	st	X+, r1
    15c8:	9a 95       	dec	r25
    15ca:	e9 f7       	brne	.-6      	; 0x15c6 <GSM_u8Startup+0x1e>
	uint8  Len=0;
    15cc:	1b 86       	std	Y+11, r1	; 0x0b

	while(! GSMsend_to_modem(AT));
    15ce:	84 ee       	ldi	r24, 0xE4	; 228
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <GSMsend_to_modem>
    15d6:	88 23       	and	r24, r24
    15d8:	d1 f3       	breq	.-12     	; 0x15ce <GSM_u8Startup+0x26>
	GSM_vidRecieveString(Buffer,&Len);
    15da:	9e 01       	movw	r18, r28
    15dc:	25 5f       	subi	r18, 0xF5	; 245
    15de:	3f 4f       	sbci	r19, 0xFF	; 255
    15e0:	ce 01       	movw	r24, r28
    15e2:	01 96       	adiw	r24, 0x01	; 1
    15e4:	b9 01       	movw	r22, r18
    15e6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <GSM_vidRecieveString>

	//compare between recieved and ok
	return Str_Compare(OK,Buffer);
    15ea:	88 ee       	ldi	r24, 0xE8	; 232
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9e 01       	movw	r18, r28
    15f0:	2f 5f       	subi	r18, 0xFF	; 255
    15f2:	3f 4f       	sbci	r19, 0xFF	; 255
    15f4:	b9 01       	movw	r22, r18
    15f6:	0e 94 a4 09 	call	0x1348	; 0x1348 <Str_Compare>



}
    15fa:	2b 96       	adiw	r28, 0x0b	; 11
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <GSM_vidSendSMS>:
uint8 GSM_vidSendSMS(int8  SMS[],int8  Num[] )
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	e1 97       	sbiw	r28, 0x31	; 49
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	9d a3       	std	Y+37, r25	; 0x25
    1622:	8c a3       	std	Y+36, r24	; 0x24
    1624:	7f a3       	std	Y+39, r23	; 0x27
    1626:	6e a3       	std	Y+38, r22	; 0x26

	uint8 u8Flag=1,LEN;
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	89 83       	std	Y+1, r24	; 0x01
	int8 Buffer[20]={0};
    162c:	84 e1       	ldi	r24, 0x14	; 20
    162e:	fe 01       	movw	r30, r28
    1630:	33 96       	adiw	r30, 0x03	; 3
    1632:	df 01       	movw	r26, r30
    1634:	98 2f       	mov	r25, r24
    1636:	1d 92       	st	X+, r1
    1638:	9a 95       	dec	r25
    163a:	e9 f7       	brne	.-6      	; 0x1636 <GSM_vidSendSMS+0x2a>
	u8Flag=GSMsend_to_modem(Text_Mode);
    163c:	8d ee       	ldi	r24, 0xED	; 237
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 66 0a 	call	0x14cc	; 0x14cc <GSMsend_to_modem>
    1644:	89 83       	std	Y+1, r24	; 0x01
	GSM_vidRecieveString(Buffer,&LEN);
    1646:	ce 01       	movw	r24, r28
    1648:	03 96       	adiw	r24, 0x03	; 3
    164a:	9e 01       	movw	r18, r28
    164c:	2e 5f       	subi	r18, 0xFE	; 254
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	b9 01       	movw	r22, r18
    1652:	0e 94 fd 09 	call	0x13fa	; 0x13fa <GSM_vidRecieveString>

	int8 Message_Command1[] = "AT+CMGS=\"";
    1656:	de 01       	movw	r26, r28
    1658:	57 96       	adiw	r26, 0x17	; 23
    165a:	b9 a7       	std	Y+41, r27	; 0x29
    165c:	a8 a7       	std	Y+40, r26	; 0x28
    165e:	e7 e6       	ldi	r30, 0x67	; 103
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	fb a7       	std	Y+43, r31	; 0x2b
    1664:	ea a7       	std	Y+42, r30	; 0x2a
    1666:	fa e0       	ldi	r31, 0x0A	; 10
    1668:	fc a7       	std	Y+44, r31	; 0x2c
    166a:	aa a5       	ldd	r26, Y+42	; 0x2a
    166c:	bb a5       	ldd	r27, Y+43	; 0x2b
    166e:	0c 90       	ld	r0, X
    1670:	ea a5       	ldd	r30, Y+42	; 0x2a
    1672:	fb a5       	ldd	r31, Y+43	; 0x2b
    1674:	31 96       	adiw	r30, 0x01	; 1
    1676:	fb a7       	std	Y+43, r31	; 0x2b
    1678:	ea a7       	std	Y+42, r30	; 0x2a
    167a:	a8 a5       	ldd	r26, Y+40	; 0x28
    167c:	b9 a5       	ldd	r27, Y+41	; 0x29
    167e:	0c 92       	st	X, r0
    1680:	e8 a5       	ldd	r30, Y+40	; 0x28
    1682:	f9 a5       	ldd	r31, Y+41	; 0x29
    1684:	31 96       	adiw	r30, 0x01	; 1
    1686:	f9 a7       	std	Y+41, r31	; 0x29
    1688:	e8 a7       	std	Y+40, r30	; 0x28
    168a:	fc a5       	ldd	r31, Y+44	; 0x2c
    168c:	f1 50       	subi	r31, 0x01	; 1
    168e:	fc a7       	std	Y+44, r31	; 0x2c
    1690:	8c a5       	ldd	r24, Y+44	; 0x2c
    1692:	88 23       	and	r24, r24
    1694:	51 f7       	brne	.-44     	; 0x166a <GSM_vidSendSMS+0x5e>
	int8 Message_Command2[] = "\"\r";
    1696:	de 01       	movw	r26, r28
    1698:	91 96       	adiw	r26, 0x21	; 33
    169a:	be a7       	std	Y+46, r27	; 0x2e
    169c:	ad a7       	std	Y+45, r26	; 0x2d
    169e:	e1 e7       	ldi	r30, 0x71	; 113
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	f8 ab       	std	Y+48, r31	; 0x30
    16a4:	ef a7       	std	Y+47, r30	; 0x2f
    16a6:	f3 e0       	ldi	r31, 0x03	; 3
    16a8:	f9 ab       	std	Y+49, r31	; 0x31
    16aa:	af a5       	ldd	r26, Y+47	; 0x2f
    16ac:	b8 a9       	ldd	r27, Y+48	; 0x30
    16ae:	0c 90       	ld	r0, X
    16b0:	ef a5       	ldd	r30, Y+47	; 0x2f
    16b2:	f8 a9       	ldd	r31, Y+48	; 0x30
    16b4:	31 96       	adiw	r30, 0x01	; 1
    16b6:	f8 ab       	std	Y+48, r31	; 0x30
    16b8:	ef a7       	std	Y+47, r30	; 0x2f
    16ba:	ad a5       	ldd	r26, Y+45	; 0x2d
    16bc:	be a5       	ldd	r27, Y+46	; 0x2e
    16be:	0c 92       	st	X, r0
    16c0:	ed a5       	ldd	r30, Y+45	; 0x2d
    16c2:	fe a5       	ldd	r31, Y+46	; 0x2e
    16c4:	31 96       	adiw	r30, 0x01	; 1
    16c6:	fe a7       	std	Y+46, r31	; 0x2e
    16c8:	ed a7       	std	Y+45, r30	; 0x2d
    16ca:	f9 a9       	ldd	r31, Y+49	; 0x31
    16cc:	f1 50       	subi	r31, 0x01	; 1
    16ce:	f9 ab       	std	Y+49, r31	; 0x31
    16d0:	89 a9       	ldd	r24, Y+49	; 0x31
    16d2:	88 23       	and	r24, r24
    16d4:	51 f7       	brne	.-44     	; 0x16aa <GSM_vidSendSMS+0x9e>
	u8Flag = Str_Compare(Buffer,OK);
    16d6:	ce 01       	movw	r24, r28
    16d8:	03 96       	adiw	r24, 0x03	; 3
    16da:	28 ee       	ldi	r18, 0xE8	; 232
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	b9 01       	movw	r22, r18
    16e0:	0e 94 a4 09 	call	0x1348	; 0x1348 <Str_Compare>
    16e4:	89 83       	std	Y+1, r24	; 0x01

	if(u8Flag)
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	88 23       	and	r24, r24
    16ea:	09 f4       	brne	.+2      	; 0x16ee <GSM_vidSendSMS+0xe2>
    16ec:	5a c0       	rjmp	.+180    	; 0x17a2 <GSM_vidSendSMS+0x196>
	{
		u8Flag&=GSMsend_to_modem(Message_Command1);
    16ee:	ce 01       	movw	r24, r28
    16f0:	47 96       	adiw	r24, 0x17	; 23
    16f2:	0e 94 66 0a 	call	0x14cc	; 0x14cc <GSMsend_to_modem>
    16f6:	98 2f       	mov	r25, r24
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	89 23       	and	r24, r25
    16fc:	89 83       	std	Y+1, r24	; 0x01
		u8Flag&=GSMsend_to_modem(Num);
    16fe:	8e a1       	ldd	r24, Y+38	; 0x26
    1700:	9f a1       	ldd	r25, Y+39	; 0x27
    1702:	0e 94 66 0a 	call	0x14cc	; 0x14cc <GSMsend_to_modem>
    1706:	98 2f       	mov	r25, r24
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	89 23       	and	r24, r25
    170c:	89 83       	std	Y+1, r24	; 0x01
		u8Flag&=GSMsend_to_modem(Message_Command2);
    170e:	ce 01       	movw	r24, r28
    1710:	81 96       	adiw	r24, 0x21	; 33
    1712:	0e 94 66 0a 	call	0x14cc	; 0x14cc <GSMsend_to_modem>
    1716:	98 2f       	mov	r25, r24
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	89 23       	and	r24, r25
    171c:	89 83       	std	Y+1, r24	; 0x01
		GSM_vidRecieveString(Buffer,&LEN);
    171e:	ce 01       	movw	r24, r28
    1720:	03 96       	adiw	r24, 0x03	; 3
    1722:	9e 01       	movw	r18, r28
    1724:	2e 5f       	subi	r18, 0xFE	; 254
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	b9 01       	movw	r22, r18
    172a:	0e 94 fd 09 	call	0x13fa	; 0x13fa <GSM_vidRecieveString>
		u8Flag&= Str_Compare(Buffer,">");
    172e:	ce 01       	movw	r24, r28
    1730:	03 96       	adiw	r24, 0x03	; 3
    1732:	20 e6       	ldi	r18, 0x60	; 96
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	b9 01       	movw	r22, r18
    1738:	0e 94 a4 09 	call	0x1348	; 0x1348 <Str_Compare>
    173c:	98 2f       	mov	r25, r24
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	89 23       	and	r24, r25
    1742:	89 83       	std	Y+1, r24	; 0x01

		u8Flag&= GSMsend_to_modem(SMS);
    1744:	8c a1       	ldd	r24, Y+36	; 0x24
    1746:	9d a1       	ldd	r25, Y+37	; 0x25
    1748:	0e 94 66 0a 	call	0x14cc	; 0x14cc <GSMsend_to_modem>
    174c:	98 2f       	mov	r25, r24
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	89 23       	and	r24, r25
    1752:	89 83       	std	Y+1, r24	; 0x01
		UART_vidSendChar(Terminator);
    1754:	80 91 f8 00 	lds	r24, 0x00F8
    1758:	0e 94 75 00 	call	0xea	; 0xea <UART_vidSendChar>

		GSM_vidRecieveString(Buffer,&LEN); // \r of terminator
    175c:	ce 01       	movw	r24, r28
    175e:	03 96       	adiw	r24, 0x03	; 3
    1760:	9e 01       	movw	r18, r28
    1762:	2e 5f       	subi	r18, 0xFE	; 254
    1764:	3f 4f       	sbci	r19, 0xFF	; 255
    1766:	b9 01       	movw	r22, r18
    1768:	0e 94 fd 09 	call	0x13fa	; 0x13fa <GSM_vidRecieveString>
		GSM_vidRecieveString(Buffer,&LEN); // +cmgs:xx
    176c:	ce 01       	movw	r24, r28
    176e:	03 96       	adiw	r24, 0x03	; 3
    1770:	9e 01       	movw	r18, r28
    1772:	2e 5f       	subi	r18, 0xFE	; 254
    1774:	3f 4f       	sbci	r19, 0xFF	; 255
    1776:	b9 01       	movw	r22, r18
    1778:	0e 94 fd 09 	call	0x13fa	; 0x13fa <GSM_vidRecieveString>
		GSM_vidRecieveString(Buffer,&LEN); // ok
    177c:	ce 01       	movw	r24, r28
    177e:	03 96       	adiw	r24, 0x03	; 3
    1780:	9e 01       	movw	r18, r28
    1782:	2e 5f       	subi	r18, 0xFE	; 254
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	b9 01       	movw	r22, r18
    1788:	0e 94 fd 09 	call	0x13fa	; 0x13fa <GSM_vidRecieveString>
		u8Flag&= Str_Compare(Buffer,"OK\r\n");
    178c:	ce 01       	movw	r24, r28
    178e:	03 96       	adiw	r24, 0x03	; 3
    1790:	22 e6       	ldi	r18, 0x62	; 98
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	b9 01       	movw	r22, r18
    1796:	0e 94 a4 09 	call	0x1348	; 0x1348 <Str_Compare>
    179a:	98 2f       	mov	r25, r24
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	89 23       	and	r24, r25
    17a0:	89 83       	std	Y+1, r24	; 0x01

	}
	return u8Flag;
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a4:	e1 96       	adiw	r28, 0x31	; 49
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <GSM_vidSelect>:

void GSM_vidSelect()
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62
	DIO_u8WritePin(Selector,Select_GSM);
    17be:	80 e1       	ldi	r24, 0x10	; 16
    17c0:	60 e0       	ldi	r22, 0x00	; 0
    17c2:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <GPS_vidInit>:
static GPS   Data;
static uint8 GPS_Status=GPS_OutDated;


void GPS_vidInit ()
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDir(Selector,OUTPUT);
    17d4:	80 e1       	ldi	r24, 0x10	; 16
    17d6:	61 e0       	ldi	r22, 0x01	; 1
    17d8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
	DIO_u8SetPinDir(RXD,OUTPUT);
    17dc:	88 e1       	ldi	r24, 0x18	; 24
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
	DIO_u8SetPinDir(TXD,INPUT_PULLUP);
    17e4:	89 e1       	ldi	r24, 0x19	; 25
    17e6:	62 e0       	ldi	r22, 0x02	; 2
    17e8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <DIO_u8SetPinDir>
	UART_vidInit();
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <UART_vidInit>
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <GPS_vidTask>:
void GPS_vidTask ()
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	27 97       	sbiw	r28, 0x07	; 7
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
	static  uint8 u8State=0,	u8Counter=0,	GPGGA[8]="$GPGGA,";
	if (UART_u8DataReady())
    180a:	0e 94 9b 00 	call	0x136	; 0x136 <UART_u8DataReady>
    180e:	88 23       	and	r24, r24
    1810:	09 f4       	brne	.+2      	; 0x1814 <GPS_vidTask+0x1e>
    1812:	1e c1       	rjmp	.+572    	; 0x1a50 <GPS_vidTask+0x25a>
	{
		uint8 u8RxData=UART_u8GetUdr();
    1814:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_u8GetUdr>
    1818:	89 83       	std	Y+1, r24	; 0x01

		if (GPS_Status<GPS_UpToDate)
    181a:	80 91 5a 01 	lds	r24, 0x015A
    181e:	82 30       	cpi	r24, 0x02	; 2
    1820:	08 f0       	brcs	.+2      	; 0x1824 <GPS_vidTask+0x2e>
    1822:	16 c1       	rjmp	.+556    	; 0x1a50 <GPS_vidTask+0x25a>
		{
			switch (u8State)
    1824:	80 91 5c 01 	lds	r24, 0x015C
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	3f 83       	std	Y+7, r19	; 0x07
    182e:	2e 83       	std	Y+6, r18	; 0x06
    1830:	8e 81       	ldd	r24, Y+6	; 0x06
    1832:	9f 81       	ldd	r25, Y+7	; 0x07
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	91 05       	cpc	r25, r1
    1838:	09 f4       	brne	.+2      	; 0x183c <GPS_vidTask+0x46>
    183a:	67 c0       	rjmp	.+206    	; 0x190a <GPS_vidTask+0x114>
    183c:	2e 81       	ldd	r18, Y+6	; 0x06
    183e:	3f 81       	ldd	r19, Y+7	; 0x07
    1840:	24 30       	cpi	r18, 0x04	; 4
    1842:	31 05       	cpc	r19, r1
    1844:	5c f4       	brge	.+22     	; 0x185c <GPS_vidTask+0x66>
    1846:	8e 81       	ldd	r24, Y+6	; 0x06
    1848:	9f 81       	ldd	r25, Y+7	; 0x07
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	91 05       	cpc	r25, r1
    184e:	c9 f0       	breq	.+50     	; 0x1882 <GPS_vidTask+0x8c>
    1850:	2e 81       	ldd	r18, Y+6	; 0x06
    1852:	3f 81       	ldd	r19, Y+7	; 0x07
    1854:	22 30       	cpi	r18, 0x02	; 2
    1856:	31 05       	cpc	r19, r1
    1858:	b1 f1       	breq	.+108    	; 0x18c6 <GPS_vidTask+0xd0>
    185a:	d3 c0       	rjmp	.+422    	; 0x1a02 <GPS_vidTask+0x20c>
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	9f 81       	ldd	r25, Y+7	; 0x07
    1860:	85 30       	cpi	r24, 0x05	; 5
    1862:	91 05       	cpc	r25, r1
    1864:	09 f4       	brne	.+2      	; 0x1868 <GPS_vidTask+0x72>
    1866:	92 c0       	rjmp	.+292    	; 0x198c <GPS_vidTask+0x196>
    1868:	2e 81       	ldd	r18, Y+6	; 0x06
    186a:	3f 81       	ldd	r19, Y+7	; 0x07
    186c:	25 30       	cpi	r18, 0x05	; 5
    186e:	31 05       	cpc	r19, r1
    1870:	0c f4       	brge	.+2      	; 0x1874 <GPS_vidTask+0x7e>
    1872:	6a c0       	rjmp	.+212    	; 0x1948 <GPS_vidTask+0x152>
    1874:	8e 81       	ldd	r24, Y+6	; 0x06
    1876:	9f 81       	ldd	r25, Y+7	; 0x07
    1878:	86 30       	cpi	r24, 0x06	; 6
    187a:	91 05       	cpc	r25, r1
    187c:	09 f4       	brne	.+2      	; 0x1880 <GPS_vidTask+0x8a>
    187e:	a5 c0       	rjmp	.+330    	; 0x19ca <GPS_vidTask+0x1d4>
    1880:	c0 c0       	rjmp	.+384    	; 0x1a02 <GPS_vidTask+0x20c>
			{
			case 1:
				if (u8RxData==',')
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	8c 32       	cpi	r24, 0x2C	; 44
    1886:	89 f4       	brne	.+34     	; 0x18aa <GPS_vidTask+0xb4>
				{
					Data.UTC[u8Counter]=0;
    1888:	80 91 5b 01 	lds	r24, 0x015B
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	e3 5a       	subi	r30, 0xA3	; 163
    1894:	fe 4f       	sbci	r31, 0xFE	; 254
    1896:	10 82       	st	Z, r1
					u8State=2;
    1898:	82 e0       	ldi	r24, 0x02	; 2
    189a:	80 93 5c 01 	sts	0x015C, r24
					u8Counter=0;
    189e:	10 92 5b 01 	sts	0x015B, r1
					GPS_Status = GPS_UpDating;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	80 93 5a 01 	sts	0x015A, r24
    18a8:	d3 c0       	rjmp	.+422    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.UTC[u8Counter++]=u8RxData;
    18aa:	20 91 5b 01 	lds	r18, 0x015B
    18ae:	82 2f       	mov	r24, r18
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	fc 01       	movw	r30, r24
    18b4:	e3 5a       	subi	r30, 0xA3	; 163
    18b6:	fe 4f       	sbci	r31, 0xFE	; 254
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	80 83       	st	Z, r24
    18bc:	82 2f       	mov	r24, r18
    18be:	8f 5f       	subi	r24, 0xFF	; 255
    18c0:	80 93 5b 01 	sts	0x015B, r24
    18c4:	c5 c0       	rjmp	.+394    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				break;
			case 2:
				if (u8RxData==',')
    18c6:	89 81       	ldd	r24, Y+1	; 0x01
    18c8:	8c 32       	cpi	r24, 0x2C	; 44
    18ca:	89 f4       	brne	.+34     	; 0x18ee <GPS_vidTask+0xf8>
				{
					Data.LAT[u8Counter++]=',';
    18cc:	20 91 5b 01 	lds	r18, 0x015B
    18d0:	82 2f       	mov	r24, r18
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	fc 01       	movw	r30, r24
    18d6:	e4 59       	subi	r30, 0x94	; 148
    18d8:	fe 4f       	sbci	r31, 0xFE	; 254
    18da:	8c e2       	ldi	r24, 0x2C	; 44
    18dc:	80 83       	st	Z, r24
    18de:	82 2f       	mov	r24, r18
    18e0:	8f 5f       	subi	r24, 0xFF	; 255
    18e2:	80 93 5b 01 	sts	0x015B, r24
					u8State=3;
    18e6:	83 e0       	ldi	r24, 0x03	; 3
    18e8:	80 93 5c 01 	sts	0x015C, r24
    18ec:	b1 c0       	rjmp	.+354    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LAT[u8Counter++]=u8RxData;
    18ee:	20 91 5b 01 	lds	r18, 0x015B
    18f2:	82 2f       	mov	r24, r18
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	fc 01       	movw	r30, r24
    18f8:	e4 59       	subi	r30, 0x94	; 148
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	80 83       	st	Z, r24
    1900:	82 2f       	mov	r24, r18
    1902:	8f 5f       	subi	r24, 0xFF	; 255
    1904:	80 93 5b 01 	sts	0x015B, r24
    1908:	a3 c0       	rjmp	.+326    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				break;
			case 3:
				if (u8RxData==',')
    190a:	89 81       	ldd	r24, Y+1	; 0x01
    190c:	8c 32       	cpi	r24, 0x2C	; 44
    190e:	71 f4       	brne	.+28     	; 0x192c <GPS_vidTask+0x136>
				{
					Data.LAT[u8Counter]=0;
    1910:	80 91 5b 01 	lds	r24, 0x015B
    1914:	88 2f       	mov	r24, r24
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	fc 01       	movw	r30, r24
    191a:	e4 59       	subi	r30, 0x94	; 148
    191c:	fe 4f       	sbci	r31, 0xFE	; 254
    191e:	10 82       	st	Z, r1
					u8State=4;
    1920:	84 e0       	ldi	r24, 0x04	; 4
    1922:	80 93 5c 01 	sts	0x015C, r24
					u8Counter=0;
    1926:	10 92 5b 01 	sts	0x015B, r1
    192a:	92 c0       	rjmp	.+292    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LAT[u8Counter++]=u8RxData;
    192c:	20 91 5b 01 	lds	r18, 0x015B
    1930:	82 2f       	mov	r24, r18
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	fc 01       	movw	r30, r24
    1936:	e4 59       	subi	r30, 0x94	; 148
    1938:	fe 4f       	sbci	r31, 0xFE	; 254
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	80 83       	st	Z, r24
    193e:	82 2f       	mov	r24, r18
    1940:	8f 5f       	subi	r24, 0xFF	; 255
    1942:	80 93 5b 01 	sts	0x015B, r24
    1946:	84 c0       	rjmp	.+264    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				break;
			case 4:
				if (u8RxData==',')
    1948:	89 81       	ldd	r24, Y+1	; 0x01
    194a:	8c 32       	cpi	r24, 0x2C	; 44
    194c:	89 f4       	brne	.+34     	; 0x1970 <GPS_vidTask+0x17a>
				{
					Data.LON[u8Counter++]=',';
    194e:	20 91 5b 01 	lds	r18, 0x015B
    1952:	82 2f       	mov	r24, r18
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	fc 01       	movw	r30, r24
    1958:	e7 58       	subi	r30, 0x87	; 135
    195a:	fe 4f       	sbci	r31, 0xFE	; 254
    195c:	8c e2       	ldi	r24, 0x2C	; 44
    195e:	80 83       	st	Z, r24
    1960:	82 2f       	mov	r24, r18
    1962:	8f 5f       	subi	r24, 0xFF	; 255
    1964:	80 93 5b 01 	sts	0x015B, r24
					u8State=5;
    1968:	85 e0       	ldi	r24, 0x05	; 5
    196a:	80 93 5c 01 	sts	0x015C, r24
    196e:	70 c0       	rjmp	.+224    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LON[u8Counter++]=u8RxData;
    1970:	20 91 5b 01 	lds	r18, 0x015B
    1974:	82 2f       	mov	r24, r18
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	fc 01       	movw	r30, r24
    197a:	e7 58       	subi	r30, 0x87	; 135
    197c:	fe 4f       	sbci	r31, 0xFE	; 254
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	80 83       	st	Z, r24
    1982:	82 2f       	mov	r24, r18
    1984:	8f 5f       	subi	r24, 0xFF	; 255
    1986:	80 93 5b 01 	sts	0x015B, r24
    198a:	62 c0       	rjmp	.+196    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				break;
			case 5:
				if (u8RxData==',')
    198c:	89 81       	ldd	r24, Y+1	; 0x01
    198e:	8c 32       	cpi	r24, 0x2C	; 44
    1990:	71 f4       	brne	.+28     	; 0x19ae <GPS_vidTask+0x1b8>
				{
					Data.LON[u8Counter]=0;
    1992:	80 91 5b 01 	lds	r24, 0x015B
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	fc 01       	movw	r30, r24
    199c:	e7 58       	subi	r30, 0x87	; 135
    199e:	fe 4f       	sbci	r31, 0xFE	; 254
    19a0:	10 82       	st	Z, r1
					u8State=6;
    19a2:	86 e0       	ldi	r24, 0x06	; 6
    19a4:	80 93 5c 01 	sts	0x015C, r24
					u8Counter=0;
    19a8:	10 92 5b 01 	sts	0x015B, r1
    19ac:	51 c0       	rjmp	.+162    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.LON[u8Counter++]=u8RxData;
    19ae:	20 91 5b 01 	lds	r18, 0x015B
    19b2:	82 2f       	mov	r24, r18
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	fc 01       	movw	r30, r24
    19b8:	e7 58       	subi	r30, 0x87	; 135
    19ba:	fe 4f       	sbci	r31, 0xFE	; 254
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	80 83       	st	Z, r24
    19c0:	82 2f       	mov	r24, r18
    19c2:	8f 5f       	subi	r24, 0xFF	; 255
    19c4:	80 93 5b 01 	sts	0x015B, r24
    19c8:	43 c0       	rjmp	.+134    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				break;
			case 6:
				if (u8RxData==',')
    19ca:	89 81       	ldd	r24, Y+1	; 0x01
    19cc:	8c 32       	cpi	r24, 0x2C	; 44
    19ce:	41 f4       	brne	.+16     	; 0x19e0 <GPS_vidTask+0x1ea>
				{
					u8State=0;
    19d0:	10 92 5c 01 	sts	0x015C, r1
					GPS_Status=GPS_FreshData;
    19d4:	83 e0       	ldi	r24, 0x03	; 3
    19d6:	80 93 5a 01 	sts	0x015A, r24
					u8Counter=0;
    19da:	10 92 5b 01 	sts	0x015B, r1
    19de:	38 c0       	rjmp	.+112    	; 0x1a50 <GPS_vidTask+0x25a>
				}
				else
				{
					Data.FIX=(u8RxData=='1'||u8RxData=='2');
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	81 33       	cpi	r24, 0x31	; 49
    19e4:	19 f0       	breq	.+6      	; 0x19ec <GPS_vidTask+0x1f6>
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	82 33       	cpi	r24, 0x32	; 50
    19ea:	29 f4       	brne	.+10     	; 0x19f6 <GPS_vidTask+0x200>
    19ec:	21 e0       	ldi	r18, 0x01	; 1
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3d 83       	std	Y+5, r19	; 0x05
    19f2:	2c 83       	std	Y+4, r18	; 0x04
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <GPS_vidTask+0x204>
    19f6:	1d 82       	std	Y+5, r1	; 0x05
    19f8:	1c 82       	std	Y+4, r1	; 0x04
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	80 93 87 01 	sts	0x0187, r24
    1a00:	27 c0       	rjmp	.+78     	; 0x1a50 <GPS_vidTask+0x25a>
				}
				break;
			default:
				if (u8Counter<7 )
    1a02:	80 91 5b 01 	lds	r24, 0x015B
    1a06:	87 30       	cpi	r24, 0x07	; 7
    1a08:	d0 f4       	brcc	.+52     	; 0x1a3e <GPS_vidTask+0x248>
				{
					if (u8RxData!=GPGGA[u8Counter++])
    1a0a:	30 91 5b 01 	lds	r19, 0x015B
    1a0e:	3b 83       	std	Y+3, r19	; 0x03
    1a10:	2b 81       	ldd	r18, Y+3	; 0x03
    1a12:	82 2f       	mov	r24, r18
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	fc 01       	movw	r30, r24
    1a18:	e7 50       	subi	r30, 0x07	; 7
    1a1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1c:	90 81       	ld	r25, Z
    1a1e:	1a 82       	std	Y+2, r1	; 0x02
    1a20:	89 81       	ldd	r24, Y+1	; 0x01
    1a22:	98 17       	cp	r25, r24
    1a24:	11 f0       	breq	.+4      	; 0x1a2a <GPS_vidTask+0x234>
    1a26:	31 e0       	ldi	r19, 0x01	; 1
    1a28:	3a 83       	std	Y+2, r19	; 0x02
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	8f 5f       	subi	r24, 0xFF	; 255
    1a2e:	80 93 5b 01 	sts	0x015B, r24
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	88 23       	and	r24, r24
    1a36:	61 f0       	breq	.+24     	; 0x1a50 <GPS_vidTask+0x25a>
					{
						u8Counter=0;
    1a38:	10 92 5b 01 	sts	0x015B, r1
    1a3c:	09 c0       	rjmp	.+18     	; 0x1a50 <GPS_vidTask+0x25a>
					}

				}
				else
				{
					Data.UTC[0]=u8RxData;
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	80 93 5d 01 	sts	0x015D, r24
					u8Counter=1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	80 93 5b 01 	sts	0x015B, r24
					u8State = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	80 93 5c 01 	sts	0x015C, r24
				}
				break;
			}
		}
	}
}
    1a50:	27 96       	adiw	r28, 0x07	; 7
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	cf 91       	pop	r28
    1a5e:	df 91       	pop	r29
    1a60:	08 95       	ret

00001a62 <GPS_u8GetData>:
GPS   GPS_u8GetData()
{
    1a62:	df 93       	push	r29
    1a64:	cf 93       	push	r28
    1a66:	cd b7       	in	r28, 0x3d	; 61
    1a68:	de b7       	in	r29, 0x3e	; 62
    1a6a:	27 97       	sbiw	r28, 0x07	; 7
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	de bf       	out	0x3e, r29	; 62
    1a72:	0f be       	out	0x3f, r0	; 63
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01
	if (GPS_Status==GPS_FreshData)
    1a7a:	80 91 5a 01 	lds	r24, 0x015A
    1a7e:	83 30       	cpi	r24, 0x03	; 3
    1a80:	19 f4       	brne	.+6      	; 0x1a88 <GPS_u8GetData+0x26>
	{
		GPS_Status=GPS_UpToDate;
    1a82:	82 e0       	ldi	r24, 0x02	; 2
    1a84:	80 93 5a 01 	sts	0x015A, r24
	}
	return Data;
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	9c 83       	std	Y+4, r25	; 0x04
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	ed e5       	ldi	r30, 0x5D	; 93
    1a92:	f1 e0       	ldi	r31, 0x01	; 1
    1a94:	fe 83       	std	Y+6, r31	; 0x06
    1a96:	ed 83       	std	Y+5, r30	; 0x05
    1a98:	fb e2       	ldi	r31, 0x2B	; 43
    1a9a:	ff 83       	std	Y+7, r31	; 0x07
    1a9c:	ed 81       	ldd	r30, Y+5	; 0x05
    1a9e:	fe 81       	ldd	r31, Y+6	; 0x06
    1aa0:	00 80       	ld	r0, Z
    1aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa6:	01 96       	adiw	r24, 0x01	; 1
    1aa8:	9e 83       	std	Y+6, r25	; 0x06
    1aaa:	8d 83       	std	Y+5, r24	; 0x05
    1aac:	eb 81       	ldd	r30, Y+3	; 0x03
    1aae:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab0:	00 82       	st	Z, r0
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	01 96       	adiw	r24, 0x01	; 1
    1ab8:	9c 83       	std	Y+4, r25	; 0x04
    1aba:	8b 83       	std	Y+3, r24	; 0x03
    1abc:	9f 81       	ldd	r25, Y+7	; 0x07
    1abe:	91 50       	subi	r25, 0x01	; 1
    1ac0:	9f 83       	std	Y+7, r25	; 0x07
    1ac2:	ef 81       	ldd	r30, Y+7	; 0x07
    1ac4:	ee 23       	and	r30, r30
    1ac6:	51 f7       	brne	.-44     	; 0x1a9c <GPS_u8GetData+0x3a>
}
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	27 96       	adiw	r28, 0x07	; 7
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <GPS_u8GetTime>:
uint8 GPS_u8GetTime(int8 UTC[])
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <GPS_u8GetTime+0x6>
    1ae4:	0f 92       	push	r0
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	9b 83       	std	Y+3, r25	; 0x03
    1aec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8i;
	for (u8i=0;u8i<UTC_LENGTH;u8i++)
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	13 c0       	rjmp	.+38     	; 0x1b18 <GPS_u8GetTime+0x3a>
	{
		UTC[u8i]=Data.UTC[u8i];
    1af2:	89 81       	ldd	r24, Y+1	; 0x01
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	dc 01       	movw	r26, r24
    1afe:	a2 0f       	add	r26, r18
    1b00:	b3 1f       	adc	r27, r19
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	88 2f       	mov	r24, r24
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	fc 01       	movw	r30, r24
    1b0a:	e3 5a       	subi	r30, 0xA3	; 163
    1b0c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b0e:	80 81       	ld	r24, Z
    1b10:	8c 93       	st	X, r24
	return Data;
}
uint8 GPS_u8GetTime(int8 UTC[])
{
	uint8 u8i;
	for (u8i=0;u8i<UTC_LENGTH;u8i++)
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	8f 5f       	subi	r24, 0xFF	; 255
    1b16:	89 83       	std	Y+1, r24	; 0x01
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	8f 30       	cpi	r24, 0x0F	; 15
    1b1c:	50 f3       	brcs	.-44     	; 0x1af2 <GPS_u8GetTime+0x14>
	{
		UTC[u8i]=Data.UTC[u8i];
	}
	return Data.FIX;
    1b1e:	80 91 87 01 	lds	r24, 0x0187
}
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <GPS_u8GetLat>:
uint8 GPS_u8GetLat(int8 LAT[])
{
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <GPS_u8GetLat+0x6>
    1b34:	0f 92       	push	r0
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	9b 83       	std	Y+3, r25	; 0x03
    1b3c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8i;
	for (u8i=0;u8i<LAT_LENGTH;u8i++)
    1b3e:	19 82       	std	Y+1, r1	; 0x01
    1b40:	13 c0       	rjmp	.+38     	; 0x1b68 <GPS_u8GetLat+0x3a>
	{
		LAT[u8i]=Data.LAT[u8i];
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	a2 0f       	add	r26, r18
    1b50:	b3 1f       	adc	r27, r19
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	fc 01       	movw	r30, r24
    1b5a:	e4 59       	subi	r30, 0x94	; 148
    1b5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1b5e:	80 81       	ld	r24, Z
    1b60:	8c 93       	st	X, r24
	return Data.FIX;
}
uint8 GPS_u8GetLat(int8 LAT[])
{
	uint8 u8i;
	for (u8i=0;u8i<LAT_LENGTH;u8i++)
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	8d 30       	cpi	r24, 0x0D	; 13
    1b6c:	50 f3       	brcs	.-44     	; 0x1b42 <GPS_u8GetLat+0x14>
	{
		LAT[u8i]=Data.LAT[u8i];
	}
	return Data.FIX;
    1b6e:	80 91 87 01 	lds	r24, 0x0187
}
    1b72:	0f 90       	pop	r0
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	cf 91       	pop	r28
    1b7a:	df 91       	pop	r29
    1b7c:	08 95       	ret

00001b7e <GPS_u8GetLon>:
uint8 GPS_u8GetLon(int8 LON[])
{
    1b7e:	df 93       	push	r29
    1b80:	cf 93       	push	r28
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <GPS_u8GetLon+0x6>
    1b84:	0f 92       	push	r0
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	9b 83       	std	Y+3, r25	; 0x03
    1b8c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 u8i;
	for (u8i=0;u8i<LON_LENGTH;u8i++)
    1b8e:	19 82       	std	Y+1, r1	; 0x01
    1b90:	13 c0       	rjmp	.+38     	; 0x1bb8 <GPS_u8GetLon+0x3a>
	{
		LON[u8i]=Data.LAT[u8i];
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	a2 0f       	add	r26, r18
    1ba0:	b3 1f       	adc	r27, r19
    1ba2:	89 81       	ldd	r24, Y+1	; 0x01
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	fc 01       	movw	r30, r24
    1baa:	e4 59       	subi	r30, 0x94	; 148
    1bac:	fe 4f       	sbci	r31, 0xFE	; 254
    1bae:	80 81       	ld	r24, Z
    1bb0:	8c 93       	st	X, r24
	return Data.FIX;
}
uint8 GPS_u8GetLon(int8 LON[])
{
	uint8 u8i;
	for (u8i=0;u8i<LON_LENGTH;u8i++)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	8f 5f       	subi	r24, 0xFF	; 255
    1bb6:	89 83       	std	Y+1, r24	; 0x01
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	8e 30       	cpi	r24, 0x0E	; 14
    1bbc:	50 f3       	brcs	.-44     	; 0x1b92 <GPS_u8GetLon+0x14>
	{
		LON[u8i]=Data.LAT[u8i];
	}
	return Data.FIX;
    1bbe:	80 91 87 01 	lds	r24, 0x0187
}
    1bc2:	0f 90       	pop	r0
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <GPS_GetStatus>:
uint8 GPS_GetStatus()
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	return GPS_Status;
    1bd6:	80 91 5a 01 	lds	r24, 0x015A
}
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <GPS_vidUpdate>:
void GPS_vidUpdate()
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
	GPS_Status = GPS_OutDated;
    1be8:	10 92 5a 01 	sts	0x015A, r1
}
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <GPS_READ>:



GPS GPS_READ ()
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	29 97       	sbiw	r28, 0x09	; 9
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	9c 83       	std	Y+4, r25	; 0x04
    1c08:	8b 83       	std	Y+3, r24	; 0x03
	uint16 dummy;
	GPS_Status = GPS_OutDated;
    1c0a:	10 92 5a 01 	sts	0x015A, r1
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <GPS_READ+0x26>
	while(GPS_Status!=GPS_FreshData)
	{
		GPS_vidTask();
    1c10:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <GPS_vidTask>
		dummy=0;
    1c14:	1a 82       	std	Y+2, r1	; 0x02
    1c16:	19 82       	std	Y+1, r1	; 0x01

GPS GPS_READ ()
{
	uint16 dummy;
	GPS_Status = GPS_OutDated;
	while(GPS_Status!=GPS_FreshData)
    1c18:	80 91 5a 01 	lds	r24, 0x015A
    1c1c:	83 30       	cpi	r24, 0x03	; 3
    1c1e:	c1 f7       	brne	.-16     	; 0x1c10 <GPS_READ+0x1e>
		GPS_vidTask();
		dummy=0;

	}

	return Data;
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	ed e5       	ldi	r30, 0x5D	; 93
    1c2a:	f1 e0       	ldi	r31, 0x01	; 1
    1c2c:	f8 87       	std	Y+8, r31	; 0x08
    1c2e:	ef 83       	std	Y+7, r30	; 0x07
    1c30:	fb e2       	ldi	r31, 0x2B	; 43
    1c32:	f9 87       	std	Y+9, r31	; 0x09
    1c34:	ef 81       	ldd	r30, Y+7	; 0x07
    1c36:	f8 85       	ldd	r31, Y+8	; 0x08
    1c38:	00 80       	ld	r0, Z
    1c3a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3c:	98 85       	ldd	r25, Y+8	; 0x08
    1c3e:	01 96       	adiw	r24, 0x01	; 1
    1c40:	98 87       	std	Y+8, r25	; 0x08
    1c42:	8f 83       	std	Y+7, r24	; 0x07
    1c44:	ed 81       	ldd	r30, Y+5	; 0x05
    1c46:	fe 81       	ldd	r31, Y+6	; 0x06
    1c48:	00 82       	st	Z, r0
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	01 96       	adiw	r24, 0x01	; 1
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
    1c54:	99 85       	ldd	r25, Y+9	; 0x09
    1c56:	91 50       	subi	r25, 0x01	; 1
    1c58:	99 87       	std	Y+9, r25	; 0x09
    1c5a:	e9 85       	ldd	r30, Y+9	; 0x09
    1c5c:	ee 23       	and	r30, r30
    1c5e:	51 f7       	brne	.-44     	; 0x1c34 <GPS_READ+0x42>

}
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	29 96       	adiw	r28, 0x09	; 9
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <GPS_vidDisAttach>:
void GPS_vidDisAttach ()
{
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
	UART_u8RecieveChar();
    1c7e:	0e 94 8c 00 	call	0x118	; 0x118 <UART_u8RecieveChar>
}
    1c82:	cf 91       	pop	r28
    1c84:	df 91       	pop	r29
    1c86:	08 95       	ret

00001c88 <GPS_vidSelect>:
void GPS_vidSelect()
{
    1c88:	df 93       	push	r29
    1c8a:	cf 93       	push	r28
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8WritePin(Selector,Select_GPS);
    1c90:	80 e1       	ldi	r24, 0x10	; 16
    1c92:	61 e0       	ldi	r22, 0x01	; 1
    1c94:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <DIO_u8WritePin>
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <DIO_vidInit>:


#include "DIO_LOCAL.h"

void DIO_vidInit (void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	//DIO Initialization function

}
    1ca6:	cf 91       	pop	r28
    1ca8:	df 91       	pop	r29
    1caa:	08 95       	ret

00001cac <DIO_u8SetPinDir>:

uint8 DIO_u8SetPinDir (uint8 u8PinNum , uint8 u8Dir)
{
    1cac:	df 93       	push	r29
    1cae:	cf 93       	push	r28
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DIO_u8SetPinDir+0x6>
    1cb2:	00 d0       	rcall	.+0      	; 0x1cb4 <DIO_u8SetPinDir+0x8>
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	8a 83       	std	Y+2, r24	; 0x02
    1cbc:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Direction	:	OUTPUT	/	INPUT 	/ INPUT_PULLUP
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
    1cbe:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Dir<DIO_PIN_DIR_MAX))
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	80 32       	cpi	r24, 0x20	; 32
    1cc4:	08 f0       	brcs	.+2      	; 0x1cc8 <DIO_u8SetPinDir+0x1c>
    1cc6:	85 c1       	rjmp	.+778    	; 0x1fd2 <DIO_u8SetPinDir+0x326>
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	08 f0       	brcs	.+2      	; 0x1cd0 <DIO_u8SetPinDir+0x24>
    1cce:	81 c1       	rjmp	.+770    	; 0x1fd2 <DIO_u8SetPinDir+0x326>
	{
		u8Status = SUCCESS;
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	86 95       	lsr	r24
    1cd8:	86 95       	lsr	r24
    1cda:	86 95       	lsr	r24
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3d 83       	std	Y+5, r19	; 0x05
    1ce2:	2c 83       	std	Y+4, r18	; 0x04
    1ce4:	6c 81       	ldd	r22, Y+4	; 0x04
    1ce6:	7d 81       	ldd	r23, Y+5	; 0x05
    1ce8:	61 30       	cpi	r22, 0x01	; 1
    1cea:	71 05       	cpc	r23, r1
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <DIO_u8SetPinDir+0x44>
    1cee:	6e c0       	rjmp	.+220    	; 0x1dcc <DIO_u8SetPinDir+0x120>
    1cf0:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf2:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf4:	82 30       	cpi	r24, 0x02	; 2
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	34 f4       	brge	.+12     	; 0x1d06 <DIO_u8SetPinDir+0x5a>
    1cfa:	2c 81       	ldd	r18, Y+4	; 0x04
    1cfc:	3d 81       	ldd	r19, Y+5	; 0x05
    1cfe:	21 15       	cp	r18, r1
    1d00:	31 05       	cpc	r19, r1
    1d02:	71 f0       	breq	.+28     	; 0x1d20 <DIO_u8SetPinDir+0x74>
    1d04:	65 c1       	rjmp	.+714    	; 0x1fd0 <DIO_u8SetPinDir+0x324>
    1d06:	6c 81       	ldd	r22, Y+4	; 0x04
    1d08:	7d 81       	ldd	r23, Y+5	; 0x05
    1d0a:	62 30       	cpi	r22, 0x02	; 2
    1d0c:	71 05       	cpc	r23, r1
    1d0e:	09 f4       	brne	.+2      	; 0x1d12 <DIO_u8SetPinDir+0x66>
    1d10:	b3 c0       	rjmp	.+358    	; 0x1e78 <DIO_u8SetPinDir+0x1cc>
    1d12:	8c 81       	ldd	r24, Y+4	; 0x04
    1d14:	9d 81       	ldd	r25, Y+5	; 0x05
    1d16:	83 30       	cpi	r24, 0x03	; 3
    1d18:	91 05       	cpc	r25, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <DIO_u8SetPinDir+0x72>
    1d1c:	03 c1       	rjmp	.+518    	; 0x1f24 <DIO_u8SetPinDir+0x278>
    1d1e:	58 c1       	rjmp	.+688    	; 0x1fd0 <DIO_u8SetPinDir+0x324>
		{
		case PORT_A : //PORTA
			// Write pin direction
			Assign_Bit(DDRA ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1d20:	aa e3       	ldi	r26, 0x3A	; 58
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	27 70       	andi	r18, 0x07	; 7
    1d2e:	30 70       	andi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 c0       	rjmp	.+4      	; 0x1d3a <DIO_u8SetPinDir+0x8e>
    1d36:	88 0f       	add	r24, r24
    1d38:	99 1f       	adc	r25, r25
    1d3a:	2a 95       	dec	r18
    1d3c:	e2 f7       	brpl	.-8      	; 0x1d36 <DIO_u8SetPinDir+0x8a>
    1d3e:	98 2f       	mov	r25, r24
    1d40:	90 95       	com	r25
    1d42:	ea e3       	ldi	r30, 0x3A	; 58
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	80 81       	ld	r24, Z
    1d48:	49 2f       	mov	r20, r25
    1d4a:	48 23       	and	r20, r24
    1d4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9c 01       	movw	r18, r24
    1d54:	21 70       	andi	r18, 0x01	; 1
    1d56:	30 70       	andi	r19, 0x00	; 0
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	87 70       	andi	r24, 0x07	; 7
    1d60:	90 70       	andi	r25, 0x00	; 0
    1d62:	b9 01       	movw	r22, r18
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <DIO_u8SetPinDir+0xbe>
    1d66:	66 0f       	add	r22, r22
    1d68:	77 1f       	adc	r23, r23
    1d6a:	8a 95       	dec	r24
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <DIO_u8SetPinDir+0xba>
    1d6e:	cb 01       	movw	r24, r22
    1d70:	84 2b       	or	r24, r20
    1d72:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTA,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1d74:	ab e3       	ldi	r26, 0x3B	; 59
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	88 2f       	mov	r24, r24
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	9c 01       	movw	r18, r24
    1d80:	27 70       	andi	r18, 0x07	; 7
    1d82:	30 70       	andi	r19, 0x00	; 0
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <DIO_u8SetPinDir+0xe2>
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	2a 95       	dec	r18
    1d90:	e2 f7       	brpl	.-8      	; 0x1d8a <DIO_u8SetPinDir+0xde>
    1d92:	98 2f       	mov	r25, r24
    1d94:	90 95       	com	r25
    1d96:	eb e3       	ldi	r30, 0x3B	; 59
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	80 81       	ld	r24, Z
    1d9c:	49 2f       	mov	r20, r25
    1d9e:	48 23       	and	r20, r24
    1da0:	8b 81       	ldd	r24, Y+3	; 0x03
    1da2:	86 95       	lsr	r24
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	9c 01       	movw	r18, r24
    1daa:	21 70       	andi	r18, 0x01	; 1
    1dac:	30 70       	andi	r19, 0x00	; 0
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	87 70       	andi	r24, 0x07	; 7
    1db6:	90 70       	andi	r25, 0x00	; 0
    1db8:	b9 01       	movw	r22, r18
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <DIO_u8SetPinDir+0x114>
    1dbc:	66 0f       	add	r22, r22
    1dbe:	77 1f       	adc	r23, r23
    1dc0:	8a 95       	dec	r24
    1dc2:	e2 f7       	brpl	.-8      	; 0x1dbc <DIO_u8SetPinDir+0x110>
    1dc4:	cb 01       	movw	r24, r22
    1dc6:	84 2b       	or	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	03 c1       	rjmp	.+518    	; 0x1fd2 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_B : //PORTB
			// Write pin direction
			Assign_Bit(DDRB ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1dcc:	a7 e3       	ldi	r26, 0x37	; 55
    1dce:	b0 e0       	ldi	r27, 0x00	; 0
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	88 2f       	mov	r24, r24
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9c 01       	movw	r18, r24
    1dd8:	27 70       	andi	r18, 0x07	; 7
    1dda:	30 70       	andi	r19, 0x00	; 0
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <DIO_u8SetPinDir+0x13a>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	2a 95       	dec	r18
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <DIO_u8SetPinDir+0x136>
    1dea:	98 2f       	mov	r25, r24
    1dec:	90 95       	com	r25
    1dee:	e7 e3       	ldi	r30, 0x37	; 55
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	49 2f       	mov	r20, r25
    1df6:	48 23       	and	r20, r24
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	88 2f       	mov	r24, r24
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9c 01       	movw	r18, r24
    1e00:	21 70       	andi	r18, 0x01	; 1
    1e02:	30 70       	andi	r19, 0x00	; 0
    1e04:	8a 81       	ldd	r24, Y+2	; 0x02
    1e06:	88 2f       	mov	r24, r24
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	87 70       	andi	r24, 0x07	; 7
    1e0c:	90 70       	andi	r25, 0x00	; 0
    1e0e:	b9 01       	movw	r22, r18
    1e10:	02 c0       	rjmp	.+4      	; 0x1e16 <DIO_u8SetPinDir+0x16a>
    1e12:	66 0f       	add	r22, r22
    1e14:	77 1f       	adc	r23, r23
    1e16:	8a 95       	dec	r24
    1e18:	e2 f7       	brpl	.-8      	; 0x1e12 <DIO_u8SetPinDir+0x166>
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	84 2b       	or	r24, r20
    1e1e:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTB,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1e20:	a8 e3       	ldi	r26, 0x38	; 56
    1e22:	b0 e0       	ldi	r27, 0x00	; 0
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	88 2f       	mov	r24, r24
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9c 01       	movw	r18, r24
    1e2c:	27 70       	andi	r18, 0x07	; 7
    1e2e:	30 70       	andi	r19, 0x00	; 0
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <DIO_u8SetPinDir+0x18e>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	2a 95       	dec	r18
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <DIO_u8SetPinDir+0x18a>
    1e3e:	98 2f       	mov	r25, r24
    1e40:	90 95       	com	r25
    1e42:	e8 e3       	ldi	r30, 0x38	; 56
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	49 2f       	mov	r20, r25
    1e4a:	48 23       	and	r20, r24
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	86 95       	lsr	r24
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9c 01       	movw	r18, r24
    1e56:	21 70       	andi	r18, 0x01	; 1
    1e58:	30 70       	andi	r19, 0x00	; 0
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	88 2f       	mov	r24, r24
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	87 70       	andi	r24, 0x07	; 7
    1e62:	90 70       	andi	r25, 0x00	; 0
    1e64:	b9 01       	movw	r22, r18
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <DIO_u8SetPinDir+0x1c0>
    1e68:	66 0f       	add	r22, r22
    1e6a:	77 1f       	adc	r23, r23
    1e6c:	8a 95       	dec	r24
    1e6e:	e2 f7       	brpl	.-8      	; 0x1e68 <DIO_u8SetPinDir+0x1bc>
    1e70:	cb 01       	movw	r24, r22
    1e72:	84 2b       	or	r24, r20
    1e74:	8c 93       	st	X, r24
    1e76:	ad c0       	rjmp	.+346    	; 0x1fd2 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_C : //PORTC
			// Write pin direction
			Assign_Bit(DDRC ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1e78:	a4 e3       	ldi	r26, 0x34	; 52
    1e7a:	b0 e0       	ldi	r27, 0x00	; 0
    1e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9c 01       	movw	r18, r24
    1e84:	27 70       	andi	r18, 0x07	; 7
    1e86:	30 70       	andi	r19, 0x00	; 0
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <DIO_u8SetPinDir+0x1e6>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	2a 95       	dec	r18
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <DIO_u8SetPinDir+0x1e2>
    1e96:	98 2f       	mov	r25, r24
    1e98:	90 95       	com	r25
    1e9a:	e4 e3       	ldi	r30, 0x34	; 52
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	80 81       	ld	r24, Z
    1ea0:	49 2f       	mov	r20, r25
    1ea2:	48 23       	and	r20, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	88 2f       	mov	r24, r24
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9c 01       	movw	r18, r24
    1eac:	21 70       	andi	r18, 0x01	; 1
    1eae:	30 70       	andi	r19, 0x00	; 0
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	87 70       	andi	r24, 0x07	; 7
    1eb8:	90 70       	andi	r25, 0x00	; 0
    1eba:	b9 01       	movw	r22, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <DIO_u8SetPinDir+0x216>
    1ebe:	66 0f       	add	r22, r22
    1ec0:	77 1f       	adc	r23, r23
    1ec2:	8a 95       	dec	r24
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <DIO_u8SetPinDir+0x212>
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	84 2b       	or	r24, r20
    1eca:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTC,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1ecc:	a5 e3       	ldi	r26, 0x35	; 53
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	88 2f       	mov	r24, r24
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	9c 01       	movw	r18, r24
    1ed8:	27 70       	andi	r18, 0x07	; 7
    1eda:	30 70       	andi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <DIO_u8SetPinDir+0x23a>
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	2a 95       	dec	r18
    1ee8:	e2 f7       	brpl	.-8      	; 0x1ee2 <DIO_u8SetPinDir+0x236>
    1eea:	98 2f       	mov	r25, r24
    1eec:	90 95       	com	r25
    1eee:	e5 e3       	ldi	r30, 0x35	; 53
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	49 2f       	mov	r20, r25
    1ef6:	48 23       	and	r20, r24
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	86 95       	lsr	r24
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	9c 01       	movw	r18, r24
    1f02:	21 70       	andi	r18, 0x01	; 1
    1f04:	30 70       	andi	r19, 0x00	; 0
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	88 2f       	mov	r24, r24
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	87 70       	andi	r24, 0x07	; 7
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	b9 01       	movw	r22, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_u8SetPinDir+0x26c>
    1f14:	66 0f       	add	r22, r22
    1f16:	77 1f       	adc	r23, r23
    1f18:	8a 95       	dec	r24
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <DIO_u8SetPinDir+0x268>
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	84 2b       	or	r24, r20
    1f20:	8c 93       	st	X, r24
    1f22:	57 c0       	rjmp	.+174    	; 0x1fd2 <DIO_u8SetPinDir+0x326>
			break;
		case PORT_D : //PORTD
			// Write pin direction
			Assign_Bit(DDRD ,u8PinNum % 8, Get_Bit(u8Dir,0) );
    1f24:	a1 e3       	ldi	r26, 0x31	; 49
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	88 2f       	mov	r24, r24
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9c 01       	movw	r18, r24
    1f30:	27 70       	andi	r18, 0x07	; 7
    1f32:	30 70       	andi	r19, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <DIO_u8SetPinDir+0x292>
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	2a 95       	dec	r18
    1f40:	e2 f7       	brpl	.-8      	; 0x1f3a <DIO_u8SetPinDir+0x28e>
    1f42:	98 2f       	mov	r25, r24
    1f44:	90 95       	com	r25
    1f46:	e1 e3       	ldi	r30, 0x31	; 49
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	49 2f       	mov	r20, r25
    1f4e:	48 23       	and	r20, r24
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	88 2f       	mov	r24, r24
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	9c 01       	movw	r18, r24
    1f58:	21 70       	andi	r18, 0x01	; 1
    1f5a:	30 70       	andi	r19, 0x00	; 0
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	88 2f       	mov	r24, r24
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	87 70       	andi	r24, 0x07	; 7
    1f64:	90 70       	andi	r25, 0x00	; 0
    1f66:	b9 01       	movw	r22, r18
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <DIO_u8SetPinDir+0x2c2>
    1f6a:	66 0f       	add	r22, r22
    1f6c:	77 1f       	adc	r23, r23
    1f6e:	8a 95       	dec	r24
    1f70:	e2 f7       	brpl	.-8      	; 0x1f6a <DIO_u8SetPinDir+0x2be>
    1f72:	cb 01       	movw	r24, r22
    1f74:	84 2b       	or	r24, r20
    1f76:	8c 93       	st	X, r24
			// Write pin pullup state
			Assign_Bit(PORTD,u8PinNum % 8, Get_Bit(u8Dir,1) );
    1f78:	a2 e3       	ldi	r26, 0x32	; 50
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 01       	movw	r18, r24
    1f84:	27 70       	andi	r18, 0x07	; 7
    1f86:	30 70       	andi	r19, 0x00	; 0
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <DIO_u8SetPinDir+0x2e6>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	2a 95       	dec	r18
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <DIO_u8SetPinDir+0x2e2>
    1f96:	98 2f       	mov	r25, r24
    1f98:	90 95       	com	r25
    1f9a:	e2 e3       	ldi	r30, 0x32	; 50
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	80 81       	ld	r24, Z
    1fa0:	49 2f       	mov	r20, r25
    1fa2:	48 23       	and	r20, r24
    1fa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa6:	86 95       	lsr	r24
    1fa8:	88 2f       	mov	r24, r24
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c 01       	movw	r18, r24
    1fae:	21 70       	andi	r18, 0x01	; 1
    1fb0:	30 70       	andi	r19, 0x00	; 0
    1fb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb4:	88 2f       	mov	r24, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	87 70       	andi	r24, 0x07	; 7
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	b9 01       	movw	r22, r18
    1fbe:	02 c0       	rjmp	.+4      	; 0x1fc4 <DIO_u8SetPinDir+0x318>
    1fc0:	66 0f       	add	r22, r22
    1fc2:	77 1f       	adc	r23, r23
    1fc4:	8a 95       	dec	r24
    1fc6:	e2 f7       	brpl	.-8      	; 0x1fc0 <DIO_u8SetPinDir+0x314>
    1fc8:	cb 01       	movw	r24, r22
    1fca:	84 2b       	or	r24, r20
    1fcc:	8c 93       	st	X, r24
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <DIO_u8SetPinDir+0x326>
			break;
		default:
			u8Status=ERROR;
    1fd0:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	08 95       	ret

00001fe4 <DIO_u8WritePin>:

uint8 DIO_u8WritePin (uint8 u8PinNum , uint8 u8Data)
{
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	00 d0       	rcall	.+0      	; 0x1fea <DIO_u8WritePin+0x6>
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <DIO_u8WritePin+0x8>
    1fec:	0f 92       	push	r0
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
    1ff4:	6b 83       	std	Y+3, r22	; 0x03
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 *		Pin Data		:	HIGH	/	LOW
	 *
	 */
	// initializing the status of the functions
	uint8 u8Status=ERROR;
    1ff6:	19 82       	std	Y+1, r1	; 0x01
	// checking the inputs of the functions
	if ((u8PinNum<DIO_PINS_MAX)&&(u8Data<DIO_DATA_ERROR))
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	80 32       	cpi	r24, 0x20	; 32
    1ffc:	08 f0       	brcs	.+2      	; 0x2000 <DIO_u8WritePin+0x1c>
    1ffe:	d9 c0       	rjmp	.+434    	; 0x21b2 <DIO_u8WritePin+0x1ce>
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	82 30       	cpi	r24, 0x02	; 2
    2004:	08 f0       	brcs	.+2      	; 0x2008 <DIO_u8WritePin+0x24>
    2006:	d5 c0       	rjmp	.+426    	; 0x21b2 <DIO_u8WritePin+0x1ce>
	{
		u8Status=SUCCESS;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	89 83       	std	Y+1, r24	; 0x01
		// calculating the port no.
		switch(u8PinNum/8)
    200c:	8a 81       	ldd	r24, Y+2	; 0x02
    200e:	86 95       	lsr	r24
    2010:	86 95       	lsr	r24
    2012:	86 95       	lsr	r24
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	3d 83       	std	Y+5, r19	; 0x05
    201a:	2c 83       	std	Y+4, r18	; 0x04
    201c:	6c 81       	ldd	r22, Y+4	; 0x04
    201e:	7d 81       	ldd	r23, Y+5	; 0x05
    2020:	61 30       	cpi	r22, 0x01	; 1
    2022:	71 05       	cpc	r23, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <DIO_u8WritePin+0x44>
    2026:	43 c0       	rjmp	.+134    	; 0x20ae <DIO_u8WritePin+0xca>
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	9d 81       	ldd	r25, Y+5	; 0x05
    202c:	82 30       	cpi	r24, 0x02	; 2
    202e:	91 05       	cpc	r25, r1
    2030:	34 f4       	brge	.+12     	; 0x203e <DIO_u8WritePin+0x5a>
    2032:	2c 81       	ldd	r18, Y+4	; 0x04
    2034:	3d 81       	ldd	r19, Y+5	; 0x05
    2036:	21 15       	cp	r18, r1
    2038:	31 05       	cpc	r19, r1
    203a:	71 f0       	breq	.+28     	; 0x2058 <DIO_u8WritePin+0x74>
    203c:	b9 c0       	rjmp	.+370    	; 0x21b0 <DIO_u8WritePin+0x1cc>
    203e:	6c 81       	ldd	r22, Y+4	; 0x04
    2040:	7d 81       	ldd	r23, Y+5	; 0x05
    2042:	62 30       	cpi	r22, 0x02	; 2
    2044:	71 05       	cpc	r23, r1
    2046:	09 f4       	brne	.+2      	; 0x204a <DIO_u8WritePin+0x66>
    2048:	5d c0       	rjmp	.+186    	; 0x2104 <DIO_u8WritePin+0x120>
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	83 30       	cpi	r24, 0x03	; 3
    2050:	91 05       	cpc	r25, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <DIO_u8WritePin+0x72>
    2054:	82 c0       	rjmp	.+260    	; 0x215a <DIO_u8WritePin+0x176>
    2056:	ac c0       	rjmp	.+344    	; 0x21b0 <DIO_u8WritePin+0x1cc>
		{
		case PORT_A : //PORTA
			// Write pin values
			Assign_Bit(PORTA ,u8PinNum % 8, u8Data );
    2058:	ab e3       	ldi	r26, 0x3B	; 59
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9c 01       	movw	r18, r24
    2064:	27 70       	andi	r18, 0x07	; 7
    2066:	30 70       	andi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <DIO_u8WritePin+0x8e>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	2a 95       	dec	r18
    2074:	e2 f7       	brpl	.-8      	; 0x206e <DIO_u8WritePin+0x8a>
    2076:	98 2f       	mov	r25, r24
    2078:	90 95       	com	r25
    207a:	eb e3       	ldi	r30, 0x3B	; 59
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	49 2f       	mov	r20, r25
    2082:	48 23       	and	r20, r24
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	9c 01       	movw	r18, r24
    208c:	21 70       	andi	r18, 0x01	; 1
    208e:	30 70       	andi	r19, 0x00	; 0
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	87 70       	andi	r24, 0x07	; 7
    2098:	90 70       	andi	r25, 0x00	; 0
    209a:	b9 01       	movw	r22, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <DIO_u8WritePin+0xbe>
    209e:	66 0f       	add	r22, r22
    20a0:	77 1f       	adc	r23, r23
    20a2:	8a 95       	dec	r24
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <DIO_u8WritePin+0xba>
    20a6:	cb 01       	movw	r24, r22
    20a8:	84 2b       	or	r24, r20
    20aa:	8c 93       	st	X, r24
    20ac:	82 c0       	rjmp	.+260    	; 0x21b2 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_B : //PORTB
			// Write pin values
			Assign_Bit(PORTB ,u8PinNum % 8, u8Data );
    20ae:	a8 e3       	ldi	r26, 0x38	; 56
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	8a 81       	ldd	r24, Y+2	; 0x02
    20b4:	88 2f       	mov	r24, r24
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9c 01       	movw	r18, r24
    20ba:	27 70       	andi	r18, 0x07	; 7
    20bc:	30 70       	andi	r19, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <DIO_u8WritePin+0xe4>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	2a 95       	dec	r18
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <DIO_u8WritePin+0xe0>
    20cc:	98 2f       	mov	r25, r24
    20ce:	90 95       	com	r25
    20d0:	e8 e3       	ldi	r30, 0x38	; 56
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	49 2f       	mov	r20, r25
    20d8:	48 23       	and	r20, r24
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	9c 01       	movw	r18, r24
    20e2:	21 70       	andi	r18, 0x01	; 1
    20e4:	30 70       	andi	r19, 0x00	; 0
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	87 70       	andi	r24, 0x07	; 7
    20ee:	90 70       	andi	r25, 0x00	; 0
    20f0:	b9 01       	movw	r22, r18
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <DIO_u8WritePin+0x114>
    20f4:	66 0f       	add	r22, r22
    20f6:	77 1f       	adc	r23, r23
    20f8:	8a 95       	dec	r24
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <DIO_u8WritePin+0x110>
    20fc:	cb 01       	movw	r24, r22
    20fe:	84 2b       	or	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	57 c0       	rjmp	.+174    	; 0x21b2 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_C : //PORTC
			// Write pin values
			Assign_Bit(PORTC ,u8PinNum % 8, u8Data );
    2104:	a5 e3       	ldi	r26, 0x35	; 53
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9c 01       	movw	r18, r24
    2110:	27 70       	andi	r18, 0x07	; 7
    2112:	30 70       	andi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <DIO_u8WritePin+0x13a>
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	2a 95       	dec	r18
    2120:	e2 f7       	brpl	.-8      	; 0x211a <DIO_u8WritePin+0x136>
    2122:	98 2f       	mov	r25, r24
    2124:	90 95       	com	r25
    2126:	e5 e3       	ldi	r30, 0x35	; 53
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	49 2f       	mov	r20, r25
    212e:	48 23       	and	r20, r24
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	88 2f       	mov	r24, r24
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9c 01       	movw	r18, r24
    2138:	21 70       	andi	r18, 0x01	; 1
    213a:	30 70       	andi	r19, 0x00	; 0
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	88 2f       	mov	r24, r24
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	87 70       	andi	r24, 0x07	; 7
    2144:	90 70       	andi	r25, 0x00	; 0
    2146:	b9 01       	movw	r22, r18
    2148:	02 c0       	rjmp	.+4      	; 0x214e <DIO_u8WritePin+0x16a>
    214a:	66 0f       	add	r22, r22
    214c:	77 1f       	adc	r23, r23
    214e:	8a 95       	dec	r24
    2150:	e2 f7       	brpl	.-8      	; 0x214a <DIO_u8WritePin+0x166>
    2152:	cb 01       	movw	r24, r22
    2154:	84 2b       	or	r24, r20
    2156:	8c 93       	st	X, r24
    2158:	2c c0       	rjmp	.+88     	; 0x21b2 <DIO_u8WritePin+0x1ce>
			break;
		case PORT_D : //PORTD
			// Write pin values
			Assign_Bit(PORTD ,u8PinNum % 8, u8Data );
    215a:	a2 e3       	ldi	r26, 0x32	; 50
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	88 2f       	mov	r24, r24
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9c 01       	movw	r18, r24
    2166:	27 70       	andi	r18, 0x07	; 7
    2168:	30 70       	andi	r19, 0x00	; 0
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <DIO_u8WritePin+0x190>
    2170:	88 0f       	add	r24, r24
    2172:	99 1f       	adc	r25, r25
    2174:	2a 95       	dec	r18
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <DIO_u8WritePin+0x18c>
    2178:	98 2f       	mov	r25, r24
    217a:	90 95       	com	r25
    217c:	e2 e3       	ldi	r30, 0x32	; 50
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	49 2f       	mov	r20, r25
    2184:	48 23       	and	r20, r24
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	88 2f       	mov	r24, r24
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	9c 01       	movw	r18, r24
    218e:	21 70       	andi	r18, 0x01	; 1
    2190:	30 70       	andi	r19, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	88 2f       	mov	r24, r24
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	87 70       	andi	r24, 0x07	; 7
    219a:	90 70       	andi	r25, 0x00	; 0
    219c:	b9 01       	movw	r22, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <DIO_u8WritePin+0x1c0>
    21a0:	66 0f       	add	r22, r22
    21a2:	77 1f       	adc	r23, r23
    21a4:	8a 95       	dec	r24
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <DIO_u8WritePin+0x1bc>
    21a8:	cb 01       	movw	r24, r22
    21aa:	84 2b       	or	r24, r20
    21ac:	8c 93       	st	X, r24
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <DIO_u8WritePin+0x1ce>
			break;
		default:
			u8Status=ERROR;
    21b0:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

	}
	return u8Status;
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <DIO_u8ReadPin>:

uint8 DIO_u8ReadPin (uint8 u8PinNum )
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <DIO_u8ReadPin+0x6>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <DIO_u8ReadPin+0x8>
    21cc:	cd b7       	in	r28, 0x3d	; 61
    21ce:	de b7       	in	r29, 0x3e	; 62
    21d0:	8a 83       	std	Y+2, r24	; 0x02
	/*
	 * Reading from pin
	 * 		Pin number 		: 	PORTx_n 	n= 	0:7		x=	A:D
	 */
	// initializing the status of the functions
	uint8 u8Data=DIO_DATA_ERROR;
    21d2:	82 e0       	ldi	r24, 0x02	; 2
    21d4:	89 83       	std	Y+1, r24	; 0x01
	// checking the inputs of the functions
	if (u8PinNum<DIO_PINS_MAX)
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	80 32       	cpi	r24, 0x20	; 32
    21da:	08 f0       	brcs	.+2      	; 0x21de <DIO_u8ReadPin+0x1a>
    21dc:	76 c0       	rjmp	.+236    	; 0x22ca <DIO_u8ReadPin+0x106>
	{
		// calculating the port no.
		switch(u8PinNum/8)
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	86 95       	lsr	r24
    21e2:	86 95       	lsr	r24
    21e4:	86 95       	lsr	r24
    21e6:	28 2f       	mov	r18, r24
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	3c 83       	std	Y+4, r19	; 0x04
    21ec:	2b 83       	std	Y+3, r18	; 0x03
    21ee:	4b 81       	ldd	r20, Y+3	; 0x03
    21f0:	5c 81       	ldd	r21, Y+4	; 0x04
    21f2:	41 30       	cpi	r20, 0x01	; 1
    21f4:	51 05       	cpc	r21, r1
    21f6:	59 f1       	breq	.+86     	; 0x224e <DIO_u8ReadPin+0x8a>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	91 05       	cpc	r25, r1
    2200:	34 f4       	brge	.+12     	; 0x220e <DIO_u8ReadPin+0x4a>
    2202:	2b 81       	ldd	r18, Y+3	; 0x03
    2204:	3c 81       	ldd	r19, Y+4	; 0x04
    2206:	21 15       	cp	r18, r1
    2208:	31 05       	cpc	r19, r1
    220a:	69 f0       	breq	.+26     	; 0x2226 <DIO_u8ReadPin+0x62>
    220c:	5c c0       	rjmp	.+184    	; 0x22c6 <DIO_u8ReadPin+0x102>
    220e:	4b 81       	ldd	r20, Y+3	; 0x03
    2210:	5c 81       	ldd	r21, Y+4	; 0x04
    2212:	42 30       	cpi	r20, 0x02	; 2
    2214:	51 05       	cpc	r21, r1
    2216:	79 f1       	breq	.+94     	; 0x2276 <DIO_u8ReadPin+0xb2>
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	83 30       	cpi	r24, 0x03	; 3
    221e:	91 05       	cpc	r25, r1
    2220:	09 f4       	brne	.+2      	; 0x2224 <DIO_u8ReadPin+0x60>
    2222:	3d c0       	rjmp	.+122    	; 0x229e <DIO_u8ReadPin+0xda>
    2224:	50 c0       	rjmp	.+160    	; 0x22c6 <DIO_u8ReadPin+0x102>
		{
		case PORT_A : //PORTA
			//Read from pin
			u8Data= Get_Bit(PINA ,u8PinNum % 8);
    2226:	e9 e3       	ldi	r30, 0x39	; 57
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	28 2f       	mov	r18, r24
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	88 2f       	mov	r24, r24
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	87 70       	andi	r24, 0x07	; 7
    2238:	90 70       	andi	r25, 0x00	; 0
    223a:	a9 01       	movw	r20, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <DIO_u8ReadPin+0x7e>
    223e:	55 95       	asr	r21
    2240:	47 95       	ror	r20
    2242:	8a 95       	dec	r24
    2244:	e2 f7       	brpl	.-8      	; 0x223e <DIO_u8ReadPin+0x7a>
    2246:	ca 01       	movw	r24, r20
    2248:	81 70       	andi	r24, 0x01	; 1
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	3e c0       	rjmp	.+124    	; 0x22ca <DIO_u8ReadPin+0x106>
			break;
		case PORT_B : //PORTB
			//Read from pin
			u8Data= Get_Bit(PINB ,u8PinNum % 8);
    224e:	e6 e3       	ldi	r30, 0x36	; 54
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	28 2f       	mov	r18, r24
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	87 70       	andi	r24, 0x07	; 7
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	a9 01       	movw	r20, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_u8ReadPin+0xa6>
    2266:	55 95       	asr	r21
    2268:	47 95       	ror	r20
    226a:	8a 95       	dec	r24
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_u8ReadPin+0xa2>
    226e:	ca 01       	movw	r24, r20
    2270:	81 70       	andi	r24, 0x01	; 1
    2272:	89 83       	std	Y+1, r24	; 0x01
    2274:	2a c0       	rjmp	.+84     	; 0x22ca <DIO_u8ReadPin+0x106>
			break;
		case PORT_C : //PORTC
			//Read from pin
			u8Data= Get_Bit(PINC ,u8PinNum % 8);
    2276:	e3 e3       	ldi	r30, 0x33	; 51
    2278:	f0 e0       	ldi	r31, 0x00	; 0
    227a:	80 81       	ld	r24, Z
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	88 2f       	mov	r24, r24
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	87 70       	andi	r24, 0x07	; 7
    2288:	90 70       	andi	r25, 0x00	; 0
    228a:	a9 01       	movw	r20, r18
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <DIO_u8ReadPin+0xce>
    228e:	55 95       	asr	r21
    2290:	47 95       	ror	r20
    2292:	8a 95       	dec	r24
    2294:	e2 f7       	brpl	.-8      	; 0x228e <DIO_u8ReadPin+0xca>
    2296:	ca 01       	movw	r24, r20
    2298:	81 70       	andi	r24, 0x01	; 1
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	16 c0       	rjmp	.+44     	; 0x22ca <DIO_u8ReadPin+0x106>
			break;
		case PORT_D : //PORTD
			//Read from pin
			u8Data= Get_Bit(PIND ,u8PinNum % 8);
    229e:	e0 e3       	ldi	r30, 0x30	; 48
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	88 2f       	mov	r24, r24
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	87 70       	andi	r24, 0x07	; 7
    22b0:	90 70       	andi	r25, 0x00	; 0
    22b2:	a9 01       	movw	r20, r18
    22b4:	02 c0       	rjmp	.+4      	; 0x22ba <DIO_u8ReadPin+0xf6>
    22b6:	55 95       	asr	r21
    22b8:	47 95       	ror	r20
    22ba:	8a 95       	dec	r24
    22bc:	e2 f7       	brpl	.-8      	; 0x22b6 <DIO_u8ReadPin+0xf2>
    22be:	ca 01       	movw	r24, r20
    22c0:	81 70       	andi	r24, 0x01	; 1
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <DIO_u8ReadPin+0x106>
			break;
		default:
			u8Data= DIO_DATA_ERROR;
    22c6:	82 e0       	ldi	r24, 0x02	; 2
    22c8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return u8Data;
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <str_concat>:
}SOLDIER;

int8 mobile_number[3][15]={"+0201553130804","+201210674670","+201273041399"};

static uint8 str_concat (int8 str1[],int8 str2[])
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <str_concat+0x6>
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <str_concat+0x8>
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <str_concat+0xa>
    22e4:	cd b7       	in	r28, 0x3d	; 61
    22e6:	de b7       	in	r29, 0x3e	; 62
    22e8:	9c 83       	std	Y+4, r25	; 0x04
    22ea:	8b 83       	std	Y+3, r24	; 0x03
    22ec:	7e 83       	std	Y+6, r23	; 0x06
    22ee:	6d 83       	std	Y+5, r22	; 0x05
	uint8 i=0,j=0;
    22f0:	1a 82       	std	Y+2, r1	; 0x02
    22f2:	19 82       	std	Y+1, r1	; 0x01
    22f4:	03 c0       	rjmp	.+6      	; 0x22fc <str_concat+0x22>
	while (str1[i])
	{
		i++;
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	8a 83       	std	Y+2, r24	; 0x02
int8 mobile_number[3][15]={"+0201553130804","+201210674670","+201273041399"};

static uint8 str_concat (int8 str1[],int8 str2[])
{
	uint8 i=0,j=0;
	while (str1[i])
    22fc:	8a 81       	ldd	r24, Y+2	; 0x02
    22fe:	28 2f       	mov	r18, r24
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	fc 01       	movw	r30, r24
    2308:	e2 0f       	add	r30, r18
    230a:	f3 1f       	adc	r31, r19
    230c:	80 81       	ld	r24, Z
    230e:	88 23       	and	r24, r24
    2310:	91 f7       	brne	.-28     	; 0x22f6 <str_concat+0x1c>
    2312:	18 c0       	rjmp	.+48     	; 0x2344 <str_concat+0x6a>
	{
		i++;
	}
	while (str2[j])
	{
		str1[i++]=str2[j++];
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	dc 01       	movw	r26, r24
    2320:	a2 0f       	add	r26, r18
    2322:	b3 1f       	adc	r27, r19
    2324:	89 81       	ldd	r24, Y+1	; 0x01
    2326:	28 2f       	mov	r18, r24
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	fc 01       	movw	r30, r24
    2330:	e2 0f       	add	r30, r18
    2332:	f3 1f       	adc	r31, r19
    2334:	80 81       	ld	r24, Z
    2336:	8c 93       	st	X, r24
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	8f 5f       	subi	r24, 0xFF	; 255
    233c:	8a 83       	std	Y+2, r24	; 0x02
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	8f 5f       	subi	r24, 0xFF	; 255
    2342:	89 83       	std	Y+1, r24	; 0x01
	uint8 i=0,j=0;
	while (str1[i])
	{
		i++;
	}
	while (str2[j])
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	28 2f       	mov	r18, r24
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	8d 81       	ldd	r24, Y+5	; 0x05
    234c:	9e 81       	ldd	r25, Y+6	; 0x06
    234e:	fc 01       	movw	r30, r24
    2350:	e2 0f       	add	r30, r18
    2352:	f3 1f       	adc	r31, r19
    2354:	80 81       	ld	r24, Z
    2356:	88 23       	and	r24, r24
    2358:	e9 f6       	brne	.-70     	; 0x2314 <str_concat+0x3a>
	{
		str1[i++]=str2[j++];
	}
	str1[i]=0;
    235a:	8a 81       	ldd	r24, Y+2	; 0x02
    235c:	28 2f       	mov	r18, r24
    235e:	30 e0       	ldi	r19, 0x00	; 0
    2360:	8b 81       	ldd	r24, Y+3	; 0x03
    2362:	9c 81       	ldd	r25, Y+4	; 0x04
    2364:	fc 01       	movw	r30, r24
    2366:	e2 0f       	add	r30, r18
    2368:	f3 1f       	adc	r31, r19
    236a:	10 82       	st	Z, r1
	return i;
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    236e:	26 96       	adiw	r28, 0x06	; 6
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <main>:

uint8 x[20];
int main(void)
{
    2380:	1f 93       	push	r17
    2382:	df 93       	push	r29
    2384:	cf 93       	push	r28
    2386:	cd b7       	in	r28, 0x3d	; 61
    2388:	de b7       	in	r29, 0x3e	; 62
    238a:	ca 5a       	subi	r28, 0xAA	; 170
    238c:	d0 40       	sbci	r29, 0x00	; 0
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
	int8 message[50]={0};
    2398:	82 e3       	ldi	r24, 0x32	; 50
    239a:	fe 01       	movw	r30, r28
    239c:	32 96       	adiw	r30, 0x02	; 2
    239e:	df 01       	movw	r26, r30
    23a0:	98 2f       	mov	r25, r24
    23a2:	1d 92       	st	X+, r1
    23a4:	9a 95       	dec	r25
    23a6:	e9 f7       	brne	.-6      	; 0x23a2 <main+0x22>
	GPS Data ;

	_delay_ms(100);
    23a8:	84 e6       	ldi	r24, 0x64	; 100
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	0e 94 b2 02 	call	0x564	; 0x564 <_delay_ms>
	LCD_vidInit();
    23b0:	0e 94 3d 09 	call	0x127a	; 0x127a <LCD_vidInit>

	TIMER_vidInit();
    23b4:	0e 94 9f 02 	call	0x53e	; 0x53e <TIMER_vidInit>
	Enable_Global_Interrupt();
    23b8:	af e5       	ldi	r26, 0x5F	; 95
    23ba:	b0 e0       	ldi	r27, 0x00	; 0
    23bc:	ef e5       	ldi	r30, 0x5F	; 95
    23be:	f0 e0       	ldi	r31, 0x00	; 0
    23c0:	80 81       	ld	r24, Z
    23c2:	80 68       	ori	r24, 0x80	; 128
    23c4:	8c 93       	st	X, r24
	TEMP_SENSOR_vidInit();
    23c6:	0e 94 16 03 	call	0x62c	; 0x62c <TEMP_SENSOR_vidInit>
	GPS_vidInit();
    23ca:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <GPS_vidInit>
	GSM_vidInit();
    23ce:	0e 94 bd 0a 	call	0x157a	; 0x157a <GSM_vidInit>

	GSM_vidSelect();
    23d2:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GSM_vidSelect>
	while(!GSM_u8Startup());
    23d6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <GSM_u8Startup>
    23da:	88 23       	and	r24, r24
    23dc:	e1 f3       	breq	.-8      	; 0x23d6 <main+0x56>


	GPS_vidSelect();
    23de:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <GPS_vidSelect>
	Data = GPS_READ();
    23e2:	ce 01       	movw	r24, r28
    23e4:	c4 96       	adiw	r24, 0x34	; 52
    23e6:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <GPS_READ>

	GSM_vidSelect();
    23ea:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GSM_vidSelect>
	GPS_vidDisAttach();
    23ee:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <GPS_vidDisAttach>

	SOLDIER x={"Mr. XYZ","XXX","NOT Valid","NOT Valid",0};
    23f2:	ce 01       	movw	r24, r28
    23f4:	81 5a       	subi	r24, 0xA1	; 161
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	2f e2       	ldi	r18, 0x2F	; 47
    23fa:	fc 01       	movw	r30, r24
    23fc:	df 01       	movw	r26, r30
    23fe:	82 2f       	mov	r24, r18
    2400:	1d 92       	st	X+, r1
    2402:	8a 95       	dec	r24
    2404:	e9 f7       	brne	.-6      	; 0x2400 <main+0x80>
    2406:	de 01       	movw	r26, r28
    2408:	a1 5a       	subi	r26, 0xA1	; 161
    240a:	bf 4f       	sbci	r27, 0xFF	; 255
    240c:	cf 56       	subi	r28, 0x6F	; 111
    240e:	df 4f       	sbci	r29, 0xFF	; 255
    2410:	b9 83       	std	Y+1, r27	; 0x01
    2412:	a8 83       	st	Y, r26
    2414:	c1 59       	subi	r28, 0x91	; 145
    2416:	d0 40       	sbci	r29, 0x00	; 0
    2418:	cf 56       	subi	r28, 0x6F	; 111
    241a:	df 4f       	sbci	r29, 0xFF	; 255
    241c:	e8 81       	ld	r30, Y
    241e:	f9 81       	ldd	r31, Y+1	; 0x01
    2420:	c1 59       	subi	r28, 0x91	; 145
    2422:	d0 40       	sbci	r29, 0x00	; 0
    2424:	cd 56       	subi	r28, 0x6D	; 109
    2426:	df 4f       	sbci	r29, 0xFF	; 255
    2428:	f9 83       	std	Y+1, r31	; 0x01
    242a:	e8 83       	st	Y, r30
    242c:	c3 59       	subi	r28, 0x93	; 147
    242e:	d0 40       	sbci	r29, 0x00	; 0
    2430:	8e e9       	ldi	r24, 0x9E	; 158
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	cb 56       	subi	r28, 0x6B	; 107
    2436:	df 4f       	sbci	r29, 0xFF	; 255
    2438:	99 83       	std	Y+1, r25	; 0x01
    243a:	88 83       	st	Y, r24
    243c:	c5 59       	subi	r28, 0x95	; 149
    243e:	d0 40       	sbci	r29, 0x00	; 0
    2440:	98 e0       	ldi	r25, 0x08	; 8
    2442:	c9 56       	subi	r28, 0x69	; 105
    2444:	df 4f       	sbci	r29, 0xFF	; 255
    2446:	98 83       	st	Y, r25
    2448:	c7 59       	subi	r28, 0x97	; 151
    244a:	d0 40       	sbci	r29, 0x00	; 0
    244c:	cb 56       	subi	r28, 0x6B	; 107
    244e:	df 4f       	sbci	r29, 0xFF	; 255
    2450:	a8 81       	ld	r26, Y
    2452:	b9 81       	ldd	r27, Y+1	; 0x01
    2454:	c5 59       	subi	r28, 0x95	; 149
    2456:	d0 40       	sbci	r29, 0x00	; 0
    2458:	0c 90       	ld	r0, X
    245a:	cb 56       	subi	r28, 0x6B	; 107
    245c:	df 4f       	sbci	r29, 0xFF	; 255
    245e:	e8 81       	ld	r30, Y
    2460:	f9 81       	ldd	r31, Y+1	; 0x01
    2462:	c5 59       	subi	r28, 0x95	; 149
    2464:	d0 40       	sbci	r29, 0x00	; 0
    2466:	31 96       	adiw	r30, 0x01	; 1
    2468:	cb 56       	subi	r28, 0x6B	; 107
    246a:	df 4f       	sbci	r29, 0xFF	; 255
    246c:	f9 83       	std	Y+1, r31	; 0x01
    246e:	e8 83       	st	Y, r30
    2470:	c5 59       	subi	r28, 0x95	; 149
    2472:	d0 40       	sbci	r29, 0x00	; 0
    2474:	cd 56       	subi	r28, 0x6D	; 109
    2476:	df 4f       	sbci	r29, 0xFF	; 255
    2478:	a8 81       	ld	r26, Y
    247a:	b9 81       	ldd	r27, Y+1	; 0x01
    247c:	c3 59       	subi	r28, 0x93	; 147
    247e:	d0 40       	sbci	r29, 0x00	; 0
    2480:	0c 92       	st	X, r0
    2482:	cd 56       	subi	r28, 0x6D	; 109
    2484:	df 4f       	sbci	r29, 0xFF	; 255
    2486:	e8 81       	ld	r30, Y
    2488:	f9 81       	ldd	r31, Y+1	; 0x01
    248a:	c3 59       	subi	r28, 0x93	; 147
    248c:	d0 40       	sbci	r29, 0x00	; 0
    248e:	31 96       	adiw	r30, 0x01	; 1
    2490:	cd 56       	subi	r28, 0x6D	; 109
    2492:	df 4f       	sbci	r29, 0xFF	; 255
    2494:	f9 83       	std	Y+1, r31	; 0x01
    2496:	e8 83       	st	Y, r30
    2498:	c3 59       	subi	r28, 0x93	; 147
    249a:	d0 40       	sbci	r29, 0x00	; 0
    249c:	c9 56       	subi	r28, 0x69	; 105
    249e:	df 4f       	sbci	r29, 0xFF	; 255
    24a0:	f8 81       	ld	r31, Y
    24a2:	c7 59       	subi	r28, 0x97	; 151
    24a4:	d0 40       	sbci	r29, 0x00	; 0
    24a6:	f1 50       	subi	r31, 0x01	; 1
    24a8:	c9 56       	subi	r28, 0x69	; 105
    24aa:	df 4f       	sbci	r29, 0xFF	; 255
    24ac:	f8 83       	st	Y, r31
    24ae:	c7 59       	subi	r28, 0x97	; 151
    24b0:	d0 40       	sbci	r29, 0x00	; 0
    24b2:	c9 56       	subi	r28, 0x69	; 105
    24b4:	df 4f       	sbci	r29, 0xFF	; 255
    24b6:	88 81       	ld	r24, Y
    24b8:	c7 59       	subi	r28, 0x97	; 151
    24ba:	d0 40       	sbci	r29, 0x00	; 0
    24bc:	88 23       	and	r24, r24
    24be:	31 f6       	brne	.-116    	; 0x244c <main+0xcc>
    24c0:	87 e0       	ldi	r24, 0x07	; 7
    24c2:	cf 56       	subi	r28, 0x6F	; 111
    24c4:	df 4f       	sbci	r29, 0xFF	; 255
    24c6:	e8 81       	ld	r30, Y
    24c8:	f9 81       	ldd	r31, Y+1	; 0x01
    24ca:	c1 59       	subi	r28, 0x91	; 145
    24cc:	d0 40       	sbci	r29, 0x00	; 0
    24ce:	38 96       	adiw	r30, 0x08	; 8
    24d0:	df 01       	movw	r26, r30
    24d2:	98 2f       	mov	r25, r24
    24d4:	1d 92       	st	X+, r1
    24d6:	9a 95       	dec	r25
    24d8:	e9 f7       	brne	.-6      	; 0x24d4 <main+0x154>
    24da:	fe 01       	movw	r30, r28
    24dc:	e1 5a       	subi	r30, 0xA1	; 161
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 91 ad 00 	lds	r24, 0x00AD
    24e4:	90 91 ae 00 	lds	r25, 0x00AE
    24e8:	a0 91 af 00 	lds	r26, 0x00AF
    24ec:	b0 91 b0 00 	lds	r27, 0x00B0
    24f0:	87 87       	std	Z+15, r24	; 0x0f
    24f2:	90 8b       	std	Z+16, r25	; 0x10
    24f4:	a1 8b       	std	Z+17, r26	; 0x11
    24f6:	b2 8b       	std	Z+18, r27	; 0x12
    24f8:	de 01       	movw	r26, r28
    24fa:	a1 5a       	subi	r26, 0xA1	; 161
    24fc:	bf 4f       	sbci	r27, 0xFF	; 255
    24fe:	c8 56       	subi	r28, 0x68	; 104
    2500:	df 4f       	sbci	r29, 0xFF	; 255
    2502:	b9 83       	std	Y+1, r27	; 0x01
    2504:	a8 83       	st	Y, r26
    2506:	c8 59       	subi	r28, 0x98	; 152
    2508:	d0 40       	sbci	r29, 0x00	; 0
    250a:	c8 56       	subi	r28, 0x68	; 104
    250c:	df 4f       	sbci	r29, 0xFF	; 255
    250e:	e8 81       	ld	r30, Y
    2510:	f9 81       	ldd	r31, Y+1	; 0x01
    2512:	c8 59       	subi	r28, 0x98	; 152
    2514:	d0 40       	sbci	r29, 0x00	; 0
    2516:	73 96       	adiw	r30, 0x13	; 19
    2518:	c6 56       	subi	r28, 0x66	; 102
    251a:	df 4f       	sbci	r29, 0xFF	; 255
    251c:	f9 83       	std	Y+1, r31	; 0x01
    251e:	e8 83       	st	Y, r30
    2520:	ca 59       	subi	r28, 0x9A	; 154
    2522:	d0 40       	sbci	r29, 0x00	; 0
    2524:	81 eb       	ldi	r24, 0xB1	; 177
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	c4 56       	subi	r28, 0x64	; 100
    252a:	df 4f       	sbci	r29, 0xFF	; 255
    252c:	99 83       	std	Y+1, r25	; 0x01
    252e:	88 83       	st	Y, r24
    2530:	cc 59       	subi	r28, 0x9C	; 156
    2532:	d0 40       	sbci	r29, 0x00	; 0
    2534:	9a e0       	ldi	r25, 0x0A	; 10
    2536:	c2 56       	subi	r28, 0x62	; 98
    2538:	df 4f       	sbci	r29, 0xFF	; 255
    253a:	98 83       	st	Y, r25
    253c:	ce 59       	subi	r28, 0x9E	; 158
    253e:	d0 40       	sbci	r29, 0x00	; 0
    2540:	c4 56       	subi	r28, 0x64	; 100
    2542:	df 4f       	sbci	r29, 0xFF	; 255
    2544:	a8 81       	ld	r26, Y
    2546:	b9 81       	ldd	r27, Y+1	; 0x01
    2548:	cc 59       	subi	r28, 0x9C	; 156
    254a:	d0 40       	sbci	r29, 0x00	; 0
    254c:	0c 90       	ld	r0, X
    254e:	c4 56       	subi	r28, 0x64	; 100
    2550:	df 4f       	sbci	r29, 0xFF	; 255
    2552:	e8 81       	ld	r30, Y
    2554:	f9 81       	ldd	r31, Y+1	; 0x01
    2556:	cc 59       	subi	r28, 0x9C	; 156
    2558:	d0 40       	sbci	r29, 0x00	; 0
    255a:	31 96       	adiw	r30, 0x01	; 1
    255c:	c4 56       	subi	r28, 0x64	; 100
    255e:	df 4f       	sbci	r29, 0xFF	; 255
    2560:	f9 83       	std	Y+1, r31	; 0x01
    2562:	e8 83       	st	Y, r30
    2564:	cc 59       	subi	r28, 0x9C	; 156
    2566:	d0 40       	sbci	r29, 0x00	; 0
    2568:	c6 56       	subi	r28, 0x66	; 102
    256a:	df 4f       	sbci	r29, 0xFF	; 255
    256c:	a8 81       	ld	r26, Y
    256e:	b9 81       	ldd	r27, Y+1	; 0x01
    2570:	ca 59       	subi	r28, 0x9A	; 154
    2572:	d0 40       	sbci	r29, 0x00	; 0
    2574:	0c 92       	st	X, r0
    2576:	c6 56       	subi	r28, 0x66	; 102
    2578:	df 4f       	sbci	r29, 0xFF	; 255
    257a:	e8 81       	ld	r30, Y
    257c:	f9 81       	ldd	r31, Y+1	; 0x01
    257e:	ca 59       	subi	r28, 0x9A	; 154
    2580:	d0 40       	sbci	r29, 0x00	; 0
    2582:	31 96       	adiw	r30, 0x01	; 1
    2584:	c6 56       	subi	r28, 0x66	; 102
    2586:	df 4f       	sbci	r29, 0xFF	; 255
    2588:	f9 83       	std	Y+1, r31	; 0x01
    258a:	e8 83       	st	Y, r30
    258c:	ca 59       	subi	r28, 0x9A	; 154
    258e:	d0 40       	sbci	r29, 0x00	; 0
    2590:	c2 56       	subi	r28, 0x62	; 98
    2592:	df 4f       	sbci	r29, 0xFF	; 255
    2594:	f8 81       	ld	r31, Y
    2596:	ce 59       	subi	r28, 0x9E	; 158
    2598:	d0 40       	sbci	r29, 0x00	; 0
    259a:	f1 50       	subi	r31, 0x01	; 1
    259c:	c2 56       	subi	r28, 0x62	; 98
    259e:	df 4f       	sbci	r29, 0xFF	; 255
    25a0:	f8 83       	st	Y, r31
    25a2:	ce 59       	subi	r28, 0x9E	; 158
    25a4:	d0 40       	sbci	r29, 0x00	; 0
    25a6:	c2 56       	subi	r28, 0x62	; 98
    25a8:	df 4f       	sbci	r29, 0xFF	; 255
    25aa:	88 81       	ld	r24, Y
    25ac:	ce 59       	subi	r28, 0x9E	; 158
    25ae:	d0 40       	sbci	r29, 0x00	; 0
    25b0:	88 23       	and	r24, r24
    25b2:	31 f6       	brne	.-116    	; 0x2540 <main+0x1c0>
    25b4:	c8 56       	subi	r28, 0x68	; 104
    25b6:	df 4f       	sbci	r29, 0xFF	; 255
    25b8:	a8 81       	ld	r26, Y
    25ba:	b9 81       	ldd	r27, Y+1	; 0x01
    25bc:	c8 59       	subi	r28, 0x98	; 152
    25be:	d0 40       	sbci	r29, 0x00	; 0
    25c0:	5d 96       	adiw	r26, 0x1d	; 29
    25c2:	1d 92       	st	X+, r1
    25c4:	1d 92       	st	X+, r1
    25c6:	1d 92       	st	X+, r1
    25c8:	1c 92       	st	X, r1
    25ca:	90 97       	sbiw	r26, 0x20	; 32
    25cc:	fe 01       	movw	r30, r28
    25ce:	e1 5a       	subi	r30, 0xA1	; 161
    25d0:	ff 4f       	sbci	r31, 0xFF	; 255
    25d2:	c1 56       	subi	r28, 0x61	; 97
    25d4:	df 4f       	sbci	r29, 0xFF	; 255
    25d6:	f9 83       	std	Y+1, r31	; 0x01
    25d8:	e8 83       	st	Y, r30
    25da:	cf 59       	subi	r28, 0x9F	; 159
    25dc:	d0 40       	sbci	r29, 0x00	; 0
    25de:	c1 56       	subi	r28, 0x61	; 97
    25e0:	df 4f       	sbci	r29, 0xFF	; 255
    25e2:	88 81       	ld	r24, Y
    25e4:	99 81       	ldd	r25, Y+1	; 0x01
    25e6:	cf 59       	subi	r28, 0x9F	; 159
    25e8:	d0 40       	sbci	r29, 0x00	; 0
    25ea:	81 96       	adiw	r24, 0x21	; 33
    25ec:	cf 55       	subi	r28, 0x5F	; 95
    25ee:	df 4f       	sbci	r29, 0xFF	; 255
    25f0:	99 83       	std	Y+1, r25	; 0x01
    25f2:	88 83       	st	Y, r24
    25f4:	c1 5a       	subi	r28, 0xA1	; 161
    25f6:	d0 40       	sbci	r29, 0x00	; 0
    25f8:	a1 eb       	ldi	r26, 0xB1	; 177
    25fa:	b0 e0       	ldi	r27, 0x00	; 0
    25fc:	cd 55       	subi	r28, 0x5D	; 93
    25fe:	df 4f       	sbci	r29, 0xFF	; 255
    2600:	b9 83       	std	Y+1, r27	; 0x01
    2602:	a8 83       	st	Y, r26
    2604:	c3 5a       	subi	r28, 0xA3	; 163
    2606:	d0 40       	sbci	r29, 0x00	; 0
    2608:	ba e0       	ldi	r27, 0x0A	; 10
    260a:	cb 55       	subi	r28, 0x5B	; 91
    260c:	df 4f       	sbci	r29, 0xFF	; 255
    260e:	b8 83       	st	Y, r27
    2610:	c5 5a       	subi	r28, 0xA5	; 165
    2612:	d0 40       	sbci	r29, 0x00	; 0
    2614:	cd 55       	subi	r28, 0x5D	; 93
    2616:	df 4f       	sbci	r29, 0xFF	; 255
    2618:	e8 81       	ld	r30, Y
    261a:	f9 81       	ldd	r31, Y+1	; 0x01
    261c:	c3 5a       	subi	r28, 0xA3	; 163
    261e:	d0 40       	sbci	r29, 0x00	; 0
    2620:	00 80       	ld	r0, Z
    2622:	cd 55       	subi	r28, 0x5D	; 93
    2624:	df 4f       	sbci	r29, 0xFF	; 255
    2626:	88 81       	ld	r24, Y
    2628:	99 81       	ldd	r25, Y+1	; 0x01
    262a:	c3 5a       	subi	r28, 0xA3	; 163
    262c:	d0 40       	sbci	r29, 0x00	; 0
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	cd 55       	subi	r28, 0x5D	; 93
    2632:	df 4f       	sbci	r29, 0xFF	; 255
    2634:	99 83       	std	Y+1, r25	; 0x01
    2636:	88 83       	st	Y, r24
    2638:	c3 5a       	subi	r28, 0xA3	; 163
    263a:	d0 40       	sbci	r29, 0x00	; 0
    263c:	cf 55       	subi	r28, 0x5F	; 95
    263e:	df 4f       	sbci	r29, 0xFF	; 255
    2640:	a8 81       	ld	r26, Y
    2642:	b9 81       	ldd	r27, Y+1	; 0x01
    2644:	c1 5a       	subi	r28, 0xA1	; 161
    2646:	d0 40       	sbci	r29, 0x00	; 0
    2648:	0c 92       	st	X, r0
    264a:	cf 55       	subi	r28, 0x5F	; 95
    264c:	df 4f       	sbci	r29, 0xFF	; 255
    264e:	e8 81       	ld	r30, Y
    2650:	f9 81       	ldd	r31, Y+1	; 0x01
    2652:	c1 5a       	subi	r28, 0xA1	; 161
    2654:	d0 40       	sbci	r29, 0x00	; 0
    2656:	31 96       	adiw	r30, 0x01	; 1
    2658:	cf 55       	subi	r28, 0x5F	; 95
    265a:	df 4f       	sbci	r29, 0xFF	; 255
    265c:	f9 83       	std	Y+1, r31	; 0x01
    265e:	e8 83       	st	Y, r30
    2660:	c1 5a       	subi	r28, 0xA1	; 161
    2662:	d0 40       	sbci	r29, 0x00	; 0
    2664:	cb 55       	subi	r28, 0x5B	; 91
    2666:	df 4f       	sbci	r29, 0xFF	; 255
    2668:	f8 81       	ld	r31, Y
    266a:	c5 5a       	subi	r28, 0xA5	; 165
    266c:	d0 40       	sbci	r29, 0x00	; 0
    266e:	f1 50       	subi	r31, 0x01	; 1
    2670:	cb 55       	subi	r28, 0x5B	; 91
    2672:	df 4f       	sbci	r29, 0xFF	; 255
    2674:	f8 83       	st	Y, r31
    2676:	c5 5a       	subi	r28, 0xA5	; 165
    2678:	d0 40       	sbci	r29, 0x00	; 0
    267a:	cb 55       	subi	r28, 0x5B	; 91
    267c:	df 4f       	sbci	r29, 0xFF	; 255
    267e:	88 81       	ld	r24, Y
    2680:	c5 5a       	subi	r28, 0xA5	; 165
    2682:	d0 40       	sbci	r29, 0x00	; 0
    2684:	88 23       	and	r24, r24
    2686:	31 f6       	brne	.-116    	; 0x2614 <main+0x294>
    2688:	83 e0       	ldi	r24, 0x03	; 3
    268a:	c1 56       	subi	r28, 0x61	; 97
    268c:	df 4f       	sbci	r29, 0xFF	; 255
    268e:	e8 81       	ld	r30, Y
    2690:	f9 81       	ldd	r31, Y+1	; 0x01
    2692:	cf 59       	subi	r28, 0x9F	; 159
    2694:	d0 40       	sbci	r29, 0x00	; 0
    2696:	bb 96       	adiw	r30, 0x2b	; 43
    2698:	df 01       	movw	r26, r30
    269a:	98 2f       	mov	r25, r24
    269c:	1d 92       	st	X+, r1
    269e:	9a 95       	dec	r25
    26a0:	e9 f7       	brne	.-6      	; 0x269c <main+0x31c>
	x.FIX=1;
    26a2:	fe 01       	movw	r30, r28
    26a4:	e1 5a       	subi	r30, 0xA1	; 161
    26a6:	ff 4f       	sbci	r31, 0xFF	; 255
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	86 a7       	std	Z+46, r24	; 0x2e
	x.FIX&=GPS_u8GetLat(x.LAT);
    26ac:	fe 01       	movw	r30, r28
    26ae:	e1 5a       	subi	r30, 0xA1	; 161
    26b0:	ff 4f       	sbci	r31, 0xFF	; 255
    26b2:	16 a5       	ldd	r17, Z+46	; 0x2e
    26b4:	ce 01       	movw	r24, r28
    26b6:	81 5a       	subi	r24, 0xA1	; 161
    26b8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ba:	81 96       	adiw	r24, 0x21	; 33
    26bc:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <GPS_u8GetLat>
    26c0:	81 23       	and	r24, r17
    26c2:	fe 01       	movw	r30, r28
    26c4:	e1 5a       	subi	r30, 0xA1	; 161
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	86 a7       	std	Z+46, r24	; 0x2e
	x.FIX&=GPS_u8GetLon(x.LON);
    26ca:	fe 01       	movw	r30, r28
    26cc:	e1 5a       	subi	r30, 0xA1	; 161
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	16 a5       	ldd	r17, Z+46	; 0x2e
    26d2:	ce 01       	movw	r24, r28
    26d4:	81 5a       	subi	r24, 0xA1	; 161
    26d6:	9f 4f       	sbci	r25, 0xFF	; 255
    26d8:	43 96       	adiw	r24, 0x13	; 19
    26da:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <GPS_u8GetLon>
    26de:	81 23       	and	r24, r17
    26e0:	fe 01       	movw	r30, r28
    26e2:	e1 5a       	subi	r30, 0xA1	; 161
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	86 a7       	std	Z+46, r24	; 0x2e
	TEMP_SENSOR_u16GetData(x.TEMP);
    26e8:	ce 01       	movw	r24, r28
    26ea:	81 5a       	subi	r24, 0xA1	; 161
    26ec:	9f 4f       	sbci	r25, 0xFF	; 255
    26ee:	0f 96       	adiw	r24, 0x0f	; 15
    26f0:	0e 94 25 03 	call	0x64a	; 0x64a <TEMP_SENSOR_u16GetData>

	str_concat(message,"Name: ");
    26f4:	ce 01       	movw	r24, r28
    26f6:	02 96       	adiw	r24, 0x02	; 2
    26f8:	24 e7       	ldi	r18, 0x74	; 116
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	b9 01       	movw	r22, r18
    26fe:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,x.Name);
    2702:	ce 01       	movw	r24, r28
    2704:	02 96       	adiw	r24, 0x02	; 2
    2706:	9e 01       	movw	r18, r28
    2708:	21 5a       	subi	r18, 0xA1	; 161
    270a:	3f 4f       	sbci	r19, 0xFF	; 255
    270c:	b9 01       	movw	r22, r18
    270e:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,"\r");
    2712:	ce 01       	movw	r24, r28
    2714:	02 96       	adiw	r24, 0x02	; 2
    2716:	2b e7       	ldi	r18, 0x7B	; 123
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	b9 01       	movw	r22, r18
    271c:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,"Temp:");
    2720:	ce 01       	movw	r24, r28
    2722:	02 96       	adiw	r24, 0x02	; 2
    2724:	2d e7       	ldi	r18, 0x7D	; 125
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	b9 01       	movw	r22, r18
    272a:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,x.TEMP);
    272e:	ae 01       	movw	r20, r28
    2730:	4e 5f       	subi	r20, 0xFE	; 254
    2732:	5f 4f       	sbci	r21, 0xFF	; 255
    2734:	ce 01       	movw	r24, r28
    2736:	81 5a       	subi	r24, 0xA1	; 161
    2738:	9f 4f       	sbci	r25, 0xFF	; 255
    273a:	9c 01       	movw	r18, r24
    273c:	21 5f       	subi	r18, 0xF1	; 241
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	ca 01       	movw	r24, r20
    2742:	b9 01       	movw	r22, r18
    2744:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	if(!x.FIX)
    2748:	fe 01       	movw	r30, r28
    274a:	e1 5a       	subi	r30, 0xA1	; 161
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2750:	88 23       	and	r24, r24
    2752:	39 f4       	brne	.+14     	; 0x2762 <main+0x3e2>
	{
		str_concat(message,"Last Known LOC");
    2754:	ce 01       	movw	r24, r28
    2756:	02 96       	adiw	r24, 0x02	; 2
    2758:	23 e8       	ldi	r18, 0x83	; 131
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	b9 01       	movw	r22, r18
    275e:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	}
	str_concat(message,"\r");
    2762:	ce 01       	movw	r24, r28
    2764:	02 96       	adiw	r24, 0x02	; 2
    2766:	2b e7       	ldi	r18, 0x7B	; 123
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	b9 01       	movw	r22, r18
    276c:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,"LAT: ");
    2770:	ce 01       	movw	r24, r28
    2772:	02 96       	adiw	r24, 0x02	; 2
    2774:	22 e9       	ldi	r18, 0x92	; 146
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	b9 01       	movw	r22, r18
    277a:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,x.LAT);
    277e:	ae 01       	movw	r20, r28
    2780:	4e 5f       	subi	r20, 0xFE	; 254
    2782:	5f 4f       	sbci	r21, 0xFF	; 255
    2784:	ce 01       	movw	r24, r28
    2786:	81 5a       	subi	r24, 0xA1	; 161
    2788:	9f 4f       	sbci	r25, 0xFF	; 255
    278a:	9c 01       	movw	r18, r24
    278c:	2f 5d       	subi	r18, 0xDF	; 223
    278e:	3f 4f       	sbci	r19, 0xFF	; 255
    2790:	ca 01       	movw	r24, r20
    2792:	b9 01       	movw	r22, r18
    2794:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,"\r");
    2798:	ce 01       	movw	r24, r28
    279a:	02 96       	adiw	r24, 0x02	; 2
    279c:	2b e7       	ldi	r18, 0x7B	; 123
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	b9 01       	movw	r22, r18
    27a2:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,"LON: ");
    27a6:	ce 01       	movw	r24, r28
    27a8:	02 96       	adiw	r24, 0x02	; 2
    27aa:	28 e9       	ldi	r18, 0x98	; 152
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	b9 01       	movw	r22, r18
    27b0:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,x.LON);
    27b4:	ae 01       	movw	r20, r28
    27b6:	4e 5f       	subi	r20, 0xFE	; 254
    27b8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ba:	ce 01       	movw	r24, r28
    27bc:	81 5a       	subi	r24, 0xA1	; 161
    27be:	9f 4f       	sbci	r25, 0xFF	; 255
    27c0:	9c 01       	movw	r18, r24
    27c2:	2d 5e       	subi	r18, 0xED	; 237
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	ca 01       	movw	r24, r20
    27c8:	b9 01       	movw	r22, r18
    27ca:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	str_concat(message,"\r");
    27ce:	ce 01       	movw	r24, r28
    27d0:	02 96       	adiw	r24, 0x02	; 2
    27d2:	2b e7       	ldi	r18, 0x7B	; 123
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	b9 01       	movw	r22, r18
    27d8:	0e 94 6d 11 	call	0x22da	; 0x22da <str_concat>
	LCD_vidString(x.TEMP);
    27dc:	ce 01       	movw	r24, r28
    27de:	81 5a       	subi	r24, 0xA1	; 161
    27e0:	9f 4f       	sbci	r25, 0xFF	; 255
    27e2:	0f 96       	adiw	r24, 0x0f	; 15
    27e4:	0e 94 47 09 	call	0x128e	; 0x128e <LCD_vidString>

	SW_vidInit();
    27e8:	0e 94 92 03 	call	0x724	; 0x724 <SW_vidInit>
	uint8 arr[]={PORTB_5,PORTB_6,PORTB_7};
    27ec:	ce 01       	movw	r24, r28
    27ee:	82 57       	subi	r24, 0x72	; 114
    27f0:	9f 4f       	sbci	r25, 0xFF	; 255
    27f2:	ca 55       	subi	r28, 0x5A	; 90
    27f4:	df 4f       	sbci	r29, 0xFF	; 255
    27f6:	99 83       	std	Y+1, r25	; 0x01
    27f8:	88 83       	st	Y, r24
    27fa:	c6 5a       	subi	r28, 0xA6	; 166
    27fc:	d0 40       	sbci	r29, 0x00	; 0
    27fe:	a2 e3       	ldi	r26, 0x32	; 50
    2800:	b1 e0       	ldi	r27, 0x01	; 1
    2802:	c8 55       	subi	r28, 0x58	; 88
    2804:	df 4f       	sbci	r29, 0xFF	; 255
    2806:	b9 83       	std	Y+1, r27	; 0x01
    2808:	a8 83       	st	Y, r26
    280a:	c8 5a       	subi	r28, 0xA8	; 168
    280c:	d0 40       	sbci	r29, 0x00	; 0
    280e:	b3 e0       	ldi	r27, 0x03	; 3
    2810:	c6 55       	subi	r28, 0x56	; 86
    2812:	df 4f       	sbci	r29, 0xFF	; 255
    2814:	b8 83       	st	Y, r27
    2816:	ca 5a       	subi	r28, 0xAA	; 170
    2818:	d0 40       	sbci	r29, 0x00	; 0
    281a:	c8 55       	subi	r28, 0x58	; 88
    281c:	df 4f       	sbci	r29, 0xFF	; 255
    281e:	e8 81       	ld	r30, Y
    2820:	f9 81       	ldd	r31, Y+1	; 0x01
    2822:	c8 5a       	subi	r28, 0xA8	; 168
    2824:	d0 40       	sbci	r29, 0x00	; 0
    2826:	00 80       	ld	r0, Z
    2828:	c8 55       	subi	r28, 0x58	; 88
    282a:	df 4f       	sbci	r29, 0xFF	; 255
    282c:	88 81       	ld	r24, Y
    282e:	99 81       	ldd	r25, Y+1	; 0x01
    2830:	c8 5a       	subi	r28, 0xA8	; 168
    2832:	d0 40       	sbci	r29, 0x00	; 0
    2834:	01 96       	adiw	r24, 0x01	; 1
    2836:	c8 55       	subi	r28, 0x58	; 88
    2838:	df 4f       	sbci	r29, 0xFF	; 255
    283a:	99 83       	std	Y+1, r25	; 0x01
    283c:	88 83       	st	Y, r24
    283e:	c8 5a       	subi	r28, 0xA8	; 168
    2840:	d0 40       	sbci	r29, 0x00	; 0
    2842:	ca 55       	subi	r28, 0x5A	; 90
    2844:	df 4f       	sbci	r29, 0xFF	; 255
    2846:	a8 81       	ld	r26, Y
    2848:	b9 81       	ldd	r27, Y+1	; 0x01
    284a:	c6 5a       	subi	r28, 0xA6	; 166
    284c:	d0 40       	sbci	r29, 0x00	; 0
    284e:	0c 92       	st	X, r0
    2850:	ca 55       	subi	r28, 0x5A	; 90
    2852:	df 4f       	sbci	r29, 0xFF	; 255
    2854:	e8 81       	ld	r30, Y
    2856:	f9 81       	ldd	r31, Y+1	; 0x01
    2858:	c6 5a       	subi	r28, 0xA6	; 166
    285a:	d0 40       	sbci	r29, 0x00	; 0
    285c:	31 96       	adiw	r30, 0x01	; 1
    285e:	ca 55       	subi	r28, 0x5A	; 90
    2860:	df 4f       	sbci	r29, 0xFF	; 255
    2862:	f9 83       	std	Y+1, r31	; 0x01
    2864:	e8 83       	st	Y, r30
    2866:	c6 5a       	subi	r28, 0xA6	; 166
    2868:	d0 40       	sbci	r29, 0x00	; 0
    286a:	c6 55       	subi	r28, 0x56	; 86
    286c:	df 4f       	sbci	r29, 0xFF	; 255
    286e:	f8 81       	ld	r31, Y
    2870:	ca 5a       	subi	r28, 0xAA	; 170
    2872:	d0 40       	sbci	r29, 0x00	; 0
    2874:	f1 50       	subi	r31, 0x01	; 1
    2876:	c6 55       	subi	r28, 0x56	; 86
    2878:	df 4f       	sbci	r29, 0xFF	; 255
    287a:	f8 83       	st	Y, r31
    287c:	ca 5a       	subi	r28, 0xAA	; 170
    287e:	d0 40       	sbci	r29, 0x00	; 0
    2880:	c6 55       	subi	r28, 0x56	; 86
    2882:	df 4f       	sbci	r29, 0xFF	; 255
    2884:	88 81       	ld	r24, Y
    2886:	ca 5a       	subi	r28, 0xAA	; 170
    2888:	d0 40       	sbci	r29, 0x00	; 0
    288a:	88 23       	and	r24, r24
    288c:	31 f6       	brne	.-116    	; 0x281a <main+0x49a>
	SW_u8AddPBN(PORTB_5);
    288e:	8d e0       	ldi	r24, 0x0D	; 13
    2890:	0e 94 99 03 	call	0x732	; 0x732 <SW_u8AddPBN>
	SW_u8AddPBN(PORTB_6);
    2894:	8e e0       	ldi	r24, 0x0E	; 14
    2896:	0e 94 99 03 	call	0x732	; 0x732 <SW_u8AddPBN>
	SW_u8AddPBN(PORTB_7);
    289a:	8f e0       	ldi	r24, 0x0F	; 15
    289c:	0e 94 99 03 	call	0x732	; 0x732 <SW_u8AddPBN>
	uint8 i=0;
    28a0:	19 82       	std	Y+1, r1	; 0x01
//			TEMP_SENSOR_u16GetData(x.TEMP);
//
//
//			APP_state = APP_uptodate;
//		}
		if (SW_u8Read(arr[(i++)%3])== Pushed) // active low
    28a2:	89 81       	ldd	r24, Y+1	; 0x01
    28a4:	93 e0       	ldi	r25, 0x03	; 3
    28a6:	69 2f       	mov	r22, r25
    28a8:	0e 94 68 15 	call	0x2ad0	; 0x2ad0 <__udivmodqi4>
    28ac:	89 2f       	mov	r24, r25
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	ce 01       	movw	r24, r28
    28b4:	82 57       	subi	r24, 0x72	; 114
    28b6:	9f 4f       	sbci	r25, 0xFF	; 255
    28b8:	fc 01       	movw	r30, r24
    28ba:	e2 0f       	add	r30, r18
    28bc:	f3 1f       	adc	r31, r19
    28be:	90 81       	ld	r25, Z
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	89 2f       	mov	r24, r25
    28c8:	0e 94 c3 04 	call	0x986	; 0x986 <SW_u8Read>
    28cc:	81 30       	cpi	r24, 0x01	; 1
    28ce:	49 f7       	brne	.-46     	; 0x28a2 <main+0x522>
		{
			GSM_vidSendSMS(message,mobile_number[(i-1)%3]);
    28d0:	e1 e0       	ldi	r30, 0x01	; 1
    28d2:	f1 e0       	ldi	r31, 0x01	; 1
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	88 2f       	mov	r24, r24
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	23 e0       	ldi	r18, 0x03	; 3
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	b9 01       	movw	r22, r18
    28e2:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__divmodhi4>
    28e6:	9c 01       	movw	r18, r24
    28e8:	c9 01       	movw	r24, r18
    28ea:	88 0f       	add	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	82 0f       	add	r24, r18
    28f0:	93 1f       	adc	r25, r19
    28f2:	9c 01       	movw	r18, r24
    28f4:	22 0f       	add	r18, r18
    28f6:	33 1f       	adc	r19, r19
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	82 0f       	add	r24, r18
    28fe:	93 1f       	adc	r25, r19
    2900:	9f 01       	movw	r18, r30
    2902:	28 0f       	add	r18, r24
    2904:	39 1f       	adc	r19, r25
    2906:	ce 01       	movw	r24, r28
    2908:	02 96       	adiw	r24, 0x02	; 2
    290a:	b9 01       	movw	r22, r18
    290c:	0e 94 06 0b 	call	0x160c	; 0x160c <GSM_vidSendSMS>
    2910:	c8 cf       	rjmp	.-112    	; 0x28a2 <main+0x522>

00002912 <__vector_10>:
}

void (*fun[])()={LCD_vidTask,SW_vidTask};
//uint32 update_time=0;
ISR(TIMER0_COMP_VECTOR_NUM )
{
    2912:	1f 92       	push	r1
    2914:	0f 92       	push	r0
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	0f 92       	push	r0
    291a:	11 24       	eor	r1, r1
    291c:	2f 93       	push	r18
    291e:	3f 93       	push	r19
    2920:	4f 93       	push	r20
    2922:	5f 93       	push	r21
    2924:	6f 93       	push	r22
    2926:	7f 93       	push	r23
    2928:	8f 93       	push	r24
    292a:	9f 93       	push	r25
    292c:	af 93       	push	r26
    292e:	bf 93       	push	r27
    2930:	ef 93       	push	r30
    2932:	ff 93       	push	r31
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
//	if((update_time++)>20000)
//	{
//		update_time=0;
//		APP_state=APP_update;
//	}
	fun[(updatetime())%2]();
    293c:	0e 94 42 02 	call	0x484	; 0x484 <updatetime>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	81 70       	andi	r24, 0x01	; 1
    2946:	90 70       	andi	r25, 0x00	; 0
    2948:	a0 70       	andi	r26, 0x00	; 0
    294a:	b0 70       	andi	r27, 0x00	; 0
    294c:	88 0f       	add	r24, r24
    294e:	99 1f       	adc	r25, r25
    2950:	fc 01       	movw	r30, r24
    2952:	e2 5d       	subi	r30, 0xD2	; 210
    2954:	fe 4f       	sbci	r31, 0xFE	; 254
    2956:	01 90       	ld	r0, Z+
    2958:	f0 81       	ld	r31, Z
    295a:	e0 2d       	mov	r30, r0
    295c:	09 95       	icall

}
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	ff 91       	pop	r31
    2964:	ef 91       	pop	r30
    2966:	bf 91       	pop	r27
    2968:	af 91       	pop	r26
    296a:	9f 91       	pop	r25
    296c:	8f 91       	pop	r24
    296e:	7f 91       	pop	r23
    2970:	6f 91       	pop	r22
    2972:	5f 91       	pop	r21
    2974:	4f 91       	pop	r20
    2976:	3f 91       	pop	r19
    2978:	2f 91       	pop	r18
    297a:	0f 90       	pop	r0
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	0f 90       	pop	r0
    2980:	1f 90       	pop	r1
    2982:	18 95       	reti

00002984 <ADC_vidInit>:

#include "ADC_LOCAL.h"


void ADC_vidInit()
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	ADMUX_R =((ADC_REFRENCE		<< ADMUX_REFS_S 	)& ADMUX_REFS_M)
    298c:	e7 e2       	ldi	r30, 0x27	; 39
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 e6       	ldi	r24, 0x60	; 96
    2992:	80 83       	st	Z, r24
			|( ADC_ADLAR		<< ADMUX_ADLAR	);
//	ADMUX_R=0x60;
	ADCSRA_R=(1					<< ADCSRA_ADEN)
    2994:	e6 e2       	ldi	r30, 0x26	; 38
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	87 e8       	ldi	r24, 0x87	; 135
    299a:	80 83       	st	Z, r24
			|( ADC_AUTO_TRIGGER	<< ADCSRA_ADATE)
			|( ADC_INTERRUPT 	<< ADCSRA_ADIE)
			|((ADC_PRESCALAR 	<< ADCSRA_ADPS_S)&ADCSRA_ADPS_M);
	SFIOR_R|=((ADC_TRIGGER << SFIOR_ADTS_S)&SFIOR_ADTS_M);
    299c:	a0 e5       	ldi	r26, 0x50	; 80
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e0 e5       	ldi	r30, 0x50	; 80
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	8c 93       	st	X, r24
}
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <ADC_Select>:
void ADC_Select(uint8 ADC)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	0f 92       	push	r0
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_R |= (ADC<<ADMUX_MUX_S)&ADMUX_MUX_M;
    29ba:	a7 e2       	ldi	r26, 0x27	; 39
    29bc:	b0 e0       	ldi	r27, 0x00	; 0
    29be:	e7 e2       	ldi	r30, 0x27	; 39
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	98 2f       	mov	r25, r24
    29c6:	89 81       	ldd	r24, Y+1	; 0x01
    29c8:	8f 71       	andi	r24, 0x1F	; 31
    29ca:	89 2b       	or	r24, r25
    29cc:	8c 93       	st	X, r24
}
    29ce:	0f 90       	pop	r0
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <ADC_vidStartConversion>:
void ADC_vidStartConversion ()
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA_R,ADCSRA_ADSC);
    29de:	a6 e2       	ldi	r26, 0x26	; 38
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e6 e2       	ldi	r30, 0x26	; 38
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	80 64       	ori	r24, 0x40	; 64
    29ea:	8c 93       	st	X, r24
}
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <ADC_u8ConvFinshed>:
uint8 ADC_u8ConvFinshed()
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	return Get_Bit(ADCSRA_R,ADCSRA_ADIF);
    29fa:	e6 e2       	ldi	r30, 0x26	; 38
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	80 81       	ld	r24, Z
    2a00:	82 95       	swap	r24
    2a02:	8f 70       	andi	r24, 0x0F	; 15
    2a04:	81 70       	andi	r24, 0x01	; 1
}
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	08 95       	ret

00002a0c <ADC_u16GetData>:
uint16 ADC_u16GetData(void)
{
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	00 d0       	rcall	.+0      	; 0x2a12 <ADC_u16GetData+0x6>
    2a12:	cd b7       	in	r28, 0x3d	; 61
    2a14:	de b7       	in	r29, 0x3e	; 62
	uint16 u16Data;

	u16Data =ADCL_R>>ADCL_S;
    2a16:	e4 e2       	ldi	r30, 0x24	; 36
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	82 95       	swap	r24
    2a1e:	86 95       	lsr	r24
    2a20:	86 95       	lsr	r24
    2a22:	83 70       	andi	r24, 0x03	; 3
    2a24:	88 2f       	mov	r24, r24
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	9a 83       	std	Y+2, r25	; 0x02
    2a2a:	89 83       	std	Y+1, r24	; 0x01
	u16Data|=ADCH_R<<ADCH_S;
    2a2c:	e5 e2       	ldi	r30, 0x25	; 37
    2a2e:	f0 e0       	ldi	r31, 0x00	; 0
    2a30:	80 81       	ld	r24, Z
    2a32:	88 2f       	mov	r24, r24
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	9c 01       	movw	r18, r24
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	9a 81       	ldd	r25, Y+2	; 0x02
    2a44:	82 2b       	or	r24, r18
    2a46:	93 2b       	or	r25, r19
    2a48:	9a 83       	std	Y+2, r25	; 0x02
    2a4a:	89 83       	std	Y+1, r24	; 0x01
	Set_Bit(ADCSRA_R,ADCSRA_ADIF);
    2a4c:	a6 e2       	ldi	r26, 0x26	; 38
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	e6 e2       	ldi	r30, 0x26	; 38
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	80 61       	ori	r24, 0x10	; 16
    2a58:	8c 93       	st	X, r24

	return (u16Data);
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <ADC_u16Read>:


uint16 ADC_u16Read( uint8 ADC)
{
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	0f 92       	push	r0
    2a6e:	cd b7       	in	r28, 0x3d	; 61
    2a70:	de b7       	in	r29, 0x3e	; 62
    2a72:	89 83       	std	Y+1, r24	; 0x01
	ADC_Select(ADC);
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	0e 94 d7 14 	call	0x29ae	; 0x29ae <ADC_Select>
	ADC_vidStartConversion();
    2a7a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <ADC_vidStartConversion>
	while(!ADC_u8ConvFinshed());
    2a7e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <ADC_u8ConvFinshed>
    2a82:	88 23       	and	r24, r24
    2a84:	e1 f3       	breq	.-8      	; 0x2a7e <ADC_u16Read+0x16>
	return (ADC_u16GetData());
    2a86:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <ADC_u16GetData>
}
    2a8a:	0f 90       	pop	r0
    2a8c:	cf 91       	pop	r28
    2a8e:	df 91       	pop	r29
    2a90:	08 95       	ret

00002a92 <__mulsi3>:
    2a92:	62 9f       	mul	r22, r18
    2a94:	d0 01       	movw	r26, r0
    2a96:	73 9f       	mul	r23, r19
    2a98:	f0 01       	movw	r30, r0
    2a9a:	82 9f       	mul	r24, r18
    2a9c:	e0 0d       	add	r30, r0
    2a9e:	f1 1d       	adc	r31, r1
    2aa0:	64 9f       	mul	r22, r20
    2aa2:	e0 0d       	add	r30, r0
    2aa4:	f1 1d       	adc	r31, r1
    2aa6:	92 9f       	mul	r25, r18
    2aa8:	f0 0d       	add	r31, r0
    2aaa:	83 9f       	mul	r24, r19
    2aac:	f0 0d       	add	r31, r0
    2aae:	74 9f       	mul	r23, r20
    2ab0:	f0 0d       	add	r31, r0
    2ab2:	65 9f       	mul	r22, r21
    2ab4:	f0 0d       	add	r31, r0
    2ab6:	99 27       	eor	r25, r25
    2ab8:	72 9f       	mul	r23, r18
    2aba:	b0 0d       	add	r27, r0
    2abc:	e1 1d       	adc	r30, r1
    2abe:	f9 1f       	adc	r31, r25
    2ac0:	63 9f       	mul	r22, r19
    2ac2:	b0 0d       	add	r27, r0
    2ac4:	e1 1d       	adc	r30, r1
    2ac6:	f9 1f       	adc	r31, r25
    2ac8:	bd 01       	movw	r22, r26
    2aca:	cf 01       	movw	r24, r30
    2acc:	11 24       	eor	r1, r1
    2ace:	08 95       	ret

00002ad0 <__udivmodqi4>:
    2ad0:	99 1b       	sub	r25, r25
    2ad2:	79 e0       	ldi	r23, 0x09	; 9
    2ad4:	04 c0       	rjmp	.+8      	; 0x2ade <__udivmodqi4_ep>

00002ad6 <__udivmodqi4_loop>:
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	96 17       	cp	r25, r22
    2ada:	08 f0       	brcs	.+2      	; 0x2ade <__udivmodqi4_ep>
    2adc:	96 1b       	sub	r25, r22

00002ade <__udivmodqi4_ep>:
    2ade:	88 1f       	adc	r24, r24
    2ae0:	7a 95       	dec	r23
    2ae2:	c9 f7       	brne	.-14     	; 0x2ad6 <__udivmodqi4_loop>
    2ae4:	80 95       	com	r24
    2ae6:	08 95       	ret

00002ae8 <__udivmodhi4>:
    2ae8:	aa 1b       	sub	r26, r26
    2aea:	bb 1b       	sub	r27, r27
    2aec:	51 e1       	ldi	r21, 0x11	; 17
    2aee:	07 c0       	rjmp	.+14     	; 0x2afe <__udivmodhi4_ep>

00002af0 <__udivmodhi4_loop>:
    2af0:	aa 1f       	adc	r26, r26
    2af2:	bb 1f       	adc	r27, r27
    2af4:	a6 17       	cp	r26, r22
    2af6:	b7 07       	cpc	r27, r23
    2af8:	10 f0       	brcs	.+4      	; 0x2afe <__udivmodhi4_ep>
    2afa:	a6 1b       	sub	r26, r22
    2afc:	b7 0b       	sbc	r27, r23

00002afe <__udivmodhi4_ep>:
    2afe:	88 1f       	adc	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	5a 95       	dec	r21
    2b04:	a9 f7       	brne	.-22     	; 0x2af0 <__udivmodhi4_loop>
    2b06:	80 95       	com	r24
    2b08:	90 95       	com	r25
    2b0a:	bc 01       	movw	r22, r24
    2b0c:	cd 01       	movw	r24, r26
    2b0e:	08 95       	ret

00002b10 <__divmodhi4>:
    2b10:	97 fb       	bst	r25, 7
    2b12:	09 2e       	mov	r0, r25
    2b14:	07 26       	eor	r0, r23
    2b16:	0a d0       	rcall	.+20     	; 0x2b2c <__divmodhi4_neg1>
    2b18:	77 fd       	sbrc	r23, 7
    2b1a:	04 d0       	rcall	.+8      	; 0x2b24 <__divmodhi4_neg2>
    2b1c:	e5 df       	rcall	.-54     	; 0x2ae8 <__udivmodhi4>
    2b1e:	06 d0       	rcall	.+12     	; 0x2b2c <__divmodhi4_neg1>
    2b20:	00 20       	and	r0, r0
    2b22:	1a f4       	brpl	.+6      	; 0x2b2a <__divmodhi4_exit>

00002b24 <__divmodhi4_neg2>:
    2b24:	70 95       	com	r23
    2b26:	61 95       	neg	r22
    2b28:	7f 4f       	sbci	r23, 0xFF	; 255

00002b2a <__divmodhi4_exit>:
    2b2a:	08 95       	ret

00002b2c <__divmodhi4_neg1>:
    2b2c:	f6 f7       	brtc	.-4      	; 0x2b2a <__divmodhi4_exit>
    2b2e:	90 95       	com	r25
    2b30:	81 95       	neg	r24
    2b32:	9f 4f       	sbci	r25, 0xFF	; 255
    2b34:	08 95       	ret

00002b36 <__udivmodsi4>:
    2b36:	a1 e2       	ldi	r26, 0x21	; 33
    2b38:	1a 2e       	mov	r1, r26
    2b3a:	aa 1b       	sub	r26, r26
    2b3c:	bb 1b       	sub	r27, r27
    2b3e:	fd 01       	movw	r30, r26
    2b40:	0d c0       	rjmp	.+26     	; 0x2b5c <__udivmodsi4_ep>

00002b42 <__udivmodsi4_loop>:
    2b42:	aa 1f       	adc	r26, r26
    2b44:	bb 1f       	adc	r27, r27
    2b46:	ee 1f       	adc	r30, r30
    2b48:	ff 1f       	adc	r31, r31
    2b4a:	a2 17       	cp	r26, r18
    2b4c:	b3 07       	cpc	r27, r19
    2b4e:	e4 07       	cpc	r30, r20
    2b50:	f5 07       	cpc	r31, r21
    2b52:	20 f0       	brcs	.+8      	; 0x2b5c <__udivmodsi4_ep>
    2b54:	a2 1b       	sub	r26, r18
    2b56:	b3 0b       	sbc	r27, r19
    2b58:	e4 0b       	sbc	r30, r20
    2b5a:	f5 0b       	sbc	r31, r21

00002b5c <__udivmodsi4_ep>:
    2b5c:	66 1f       	adc	r22, r22
    2b5e:	77 1f       	adc	r23, r23
    2b60:	88 1f       	adc	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	1a 94       	dec	r1
    2b66:	69 f7       	brne	.-38     	; 0x2b42 <__udivmodsi4_loop>
    2b68:	60 95       	com	r22
    2b6a:	70 95       	com	r23
    2b6c:	80 95       	com	r24
    2b6e:	90 95       	com	r25
    2b70:	9b 01       	movw	r18, r22
    2b72:	ac 01       	movw	r20, r24
    2b74:	bd 01       	movw	r22, r26
    2b76:	cf 01       	movw	r24, r30
    2b78:	08 95       	ret

00002b7a <_exit>:
    2b7a:	f8 94       	cli

00002b7c <__stop_program>:
    2b7c:	ff cf       	rjmp	.-2      	; 0x2b7c <__stop_program>
